<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_wall_ghost</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = HUD_DEPTH

var pos = snapToGrid(array(x+G_CELLSIZE/2,y+G_CELLSIZE/2));
x = pos[0];
y = pos[1];

debugSpeed = object_debug.explorerDebugSpeed;
range = noone;

//debug
timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debugSpeed &gt; 0){
    timer += 1/60;
    if (DEBUG) visible = true;
}

if ((debugSpeed&gt; 0 &amp;&amp; timer &gt;= debugSpeed) || debugSpeed &lt;= 0){

    timer = 0;
    
    var bx = round(x/G_CELLSIZE);
    var by = round(y/G_CELLSIZE);
    var doneGrid = object_visionman.checkedGrid;
    var seenRooms = object_visionman.seenRooms;
    var coords = ds_list_create();
    var col = onChunk(array(bx, by), object_electromagnetical_scrambler_explorer);
    if (instance_exists(col)){
        col.triggered = true;
    }
    
    ds_list_add(coords, array(bx, by+1), 
                        array(bx, by-1), 
                        array(bx-1, by), 
                        array(bx+1, by));
    
                        
    for (var j = 0; j &lt; 4; j++){
        var thisCoord = ds_list_find_value(coords, j);
        
        if (ds_grid_get(global.terrain_walls, thisCoord[0], thisCoord[1]) == TERRAIN_WALL_CLEAR &amp;&amp;
            ds_grid_get(doneGrid, thisCoord[0], thisCoord[1]) != true){
            
            if (range == noone || range &gt; 0){
                var explorer = instance_create(thisCoord[0]*G_CELLSIZE, thisCoord[1]*G_CELLSIZE, object_vision_explorer);
                explorer.debugSpeed= debugSpeed;
                if (range != noone &amp;&amp; isVisible(thisCoord)){
                    explorer.range = range-1;
                }
                ds_grid_set(doneGrid, thisCoord[0], thisCoord[1], true);
            }
                
        }
    }
    
    ds_grid_set(seenRooms, bx, by, true);
    ds_grid_set(seenRooms, bx+1, by, true);
    ds_grid_set(seenRooms, bx+1, by+1, true);
    ds_grid_set(seenRooms, bx+1, by-1, true);
    ds_grid_set(seenRooms, bx-1, by, true);
    ds_grid_set(seenRooms, bx-1, by+1, true);
    ds_grid_set(seenRooms, bx-1, by-1, true);
    ds_grid_set(seenRooms, bx, by+1, true);
    ds_grid_set(seenRooms, bx, by-1, true);
    
    ds_list_destroy(coords);
    
    /// Update
    terrain_update_region(global.terrain_walls, bx-1, by-1, bx+2, by+2);
    refreshVision(array(bx, by, bx, by));
    /// Endof
    
    if (instance_number(object_index) &lt;= 1){
        ds_grid_clear(doneGrid, false);
    }
    instance_destroy();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var pos = array(x,y);

draw_set_color(c_aqua);

    pos = sysToDisplay(pos);
    var top = pos;
    var left = array(pos[0]-G_CELLSIZE, pos[1] + G_CELLSIZE/2);
    var right = array(pos[0]+G_CELLSIZE, pos[1] + G_CELLSIZE/2);
    var bottom = array(pos[0], pos[1] + G_CELLSIZE);
    
    draw_line(top[0], top[1], left[0], left[1]);
    draw_line(left[0], left[1], bottom[0], bottom[1]);
    draw_line(bottom[0], bottom[1], right[0], right[1]);
    draw_line(top[0], top[1], right[0], right[1]);
    draw_line(top[0], top[1], bottom[0], bottom[1]);
    draw_line(left[0], left[1], right[0], right[1]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
