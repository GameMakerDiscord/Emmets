<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_mainmenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
headerHeight = 64;
rightWidth = view_wview/4;
interiorPadding = 2;
textPadding = 8;
lineHeight = 24;
leftMargin = 32;
leftColumnWidth = 240;
descriptionPosition = 240;

font = font_msdos;
options = array("demoMode", "softDebug", "enableLogging", "", "saveExit", "discardExit");
values = array(noone);
for (var i = 0 ; i&lt; array_length_1d(options); i++){
    values[i] = debugGetUnsafe(options[i]);
    if (is_undefined(values[i])){
        values[i] = noone;
    }
}

currentSelection = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_left) || keyboard_check_pressed(vk_up)){
    currentSelection = currentSelection-1;
    if (currentSelection &lt; 0){
        currentSelection = array_length_1d(options) + currentSelection;
    }
    if (options[currentSelection] == ""){
        currentSelection--;
    }
}

if (keyboard_check_pressed(vk_right) || keyboard_check_pressed(vk_down)){
    currentSelection = currentSelection+1;
    if (currentSelection &gt;= array_length_1d(options)){
        currentSelection = currentSelection-array_length_1d(options);
    }
    if (options[currentSelection] == ""){
        currentSelection++;
    }
}

if (keyboard_check_pressed(vk_enter)){
    var param = values[currentSelection];
    if (param != noone){
        values[currentSelection] = !values[currentSelection];
    }
    else{
        switch (options[currentSelection]){
            case "discardExit":
                room_goto(boot);
                break;
                
            case "saveExit":
                var uncrypt = false;
                for (var i = 0 ; i&lt; array_length_1d(options); i++){
                    var val = (values[i]);
                    if (val != noone){
                        debugParamSet(options[i], val);
                        if (val == true &amp;&amp; options[i] == "demoMode"){
                            switchToDemo();
                        }
                    }
                    if (values[i] == true){
                        uncrypt = true;
                    }
                }
                if (uncrypt){
                    debugParamSet("disableCrypt", true);
                    offlineSwitch(true);
                    loadGame();
                }
                
                room_goto(boot);
                break;
        }
    }
}

if (keyboard_check_pressed(vk_escape)){
    room_goto(boot);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;

draw_set_font(font);

var blue = make_color_rgb(0, 0, 168);
var yellow = make_color_rgb(252, 252, 84);

var colors = array(blue, blue, c_black);

// Background
drawBlock(array(vx, vy, vx+w, vy+h), colors, 0);
colors = array(c_white, blue, c_black);

// Blocks
drawBlock(array(vx, vy+headerHeight, vx+w, vy+h-headerHeight), colors, 0);
drawBlock(array(vx+interiorPadding, vy+headerHeight+interiorPadding, vx+w-rightWidth, vy+h-headerHeight-interiorPadding), colors, 0);
drawBlock(array(vx+w-rightWidth, vy+headerHeight+interiorPadding, vx+w-interiorPadding, vy+h-headerHeight-interiorPadding), colors, 0);

//Header &amp; Bottom
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_white);
draw_text(vx+floor(w/2), vy+floor(headerHeight/2), translate("BIOS", "header"));
draw_text(vx+floor(w/2), vy+h-floor(headerHeight/2), translate("BIOS", "footer"));

//Menu
for (var i = 0; i &lt; array_length_1d(options); i++){
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    var option = options[i];
    if (string_length(option) &lt;= 0) continue;
    
    var param = values[i];
    
    if (param == noone &amp;&amp; currentSelection == i){
        var block = array(vx+leftMargin, vy+headerHeight+textPadding+lineHeight*i, vx+leftMargin+string_width(translate("BIOS", option)), vy+headerHeight+textPadding+lineHeight*i+string_height("A"));
        drawBlock(block, array(c_red, c_red, c_white), 0);
    }
    draw_set_color(c_white);
    draw_text(vx+leftMargin, vy+headerHeight+textPadding+lineHeight*i, translate("BIOS", option));
    
    if (param != noone){
    
        var displayed = "["+translate("BIOS", string(param))+"]";
        if (currentSelection == i){
            var block = array(vx+leftColumnWidth+leftMargin, vy+headerHeight+textPadding+lineHeight*i, vx+leftColumnWidth+leftMargin+string_width(displayed), vy+headerHeight+textPadding+lineHeight*i+string_height("A"));
            drawBlock(block, array(c_red, c_red, c_white), 0);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
            draw_set_color(c_white);
            draw_text_ext(vx+leftMargin, vy+descriptionPosition, translate("BIOS", option+"_description"), -1, w/2);
        }
        
        draw_set_color(yellow);
        draw_text(vx+leftColumnWidth+leftMargin, vy+headerHeight+textPadding+lineHeight*i, displayed);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
