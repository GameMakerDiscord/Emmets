<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_headband</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();

depth = HUD_DEPTH;

buttons = array("menu","help");
keys = array(vk_escape, vk_f1);
/*
buttons = array("help", "options");
keys = array(vk_f1, vk_f2);
*/
nbOfPossibleButtons = 6;
spacing = 6;
hPadding = 1;
bandMargin = 1;
widthOfAButton = (view_wview-UI_RIGHT_BAND-UI_LEFT_BAND-spacing*2)/nbOfPossibleButtons;

rscBoxWidth = 48;
rscBoxHeight = 14;

hoveredButton = array(noone);
for (var i =0; i &lt; array_length_1d(buttons); i++){
    hoveredButton[i] = noone;
}
hoveredRsc = noone;

hoveredOxygen = false;
oxygenMinimum = 0.1


colors = object_station.colors;
hoveredColors = object_station.hoveredColors;
disabledColors = object_station.greyedColors;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXIT IF NOT INGAME
if (!object_game.inGame || notAGameRoom(room)){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXIT IF PAUSED
if (object_game.paused){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (notAGameRoom(room)){
    visible = false;
    exit;
}
visible = true;

var vx = view_xview;
var vy = view_yview;

colors = object_station.colors;
hoveredColors = object_station.hoveredColors;
disabledColors = object_station.greyedColors;

if (buttons[0] != noone){
    for (var i = 0; i &lt; array_length_1d(buttons); i++){
        draw_set_font(font_ui);
        var boxHeight = string_height(buttons[i])+hPadding*2;
        var box = array(vx+UI_LEFT_BAND+bandMargin + (spacing+widthOfAButton)*(i),
                        vy+UI_TOP_BAND+bandMargin,
                        vx+UI_LEFT_BAND+bandMargin + spacing*i+widthOfAButton*(i+1),
                        vy+UI_TOP_BAND+bandMargin + boxHeight);
                        
        if (mouseIn(box)  || (keyboard_check_pressed(keys[i]) &amp;&amp; !DEBUG)){
            if (global.i[I_SELECT] || keyboard_check_pressed(keys[i])){
                playSfx(sound_sfx_select);
                hoveredButton[i] = true;
                    executeHeadbandButton(buttons[i]);
            }
        }
        else{
            hoveredButton[i] = false;
        }
    }
}
var brscs = getBuildingMaterials();

/// Each building material
hoveredRsc = noone;
for (var i = 0; i &lt; array_length_1d(brscs); i++){
    var boxPos = array(
        vx+view_wview-UI_LEFT_BAND - bandMargin - (rscBoxWidth+spacing)*(i+1),
        vy+UI_TOP_BAND+bandMargin
    );
    var box = array(boxPos[0], boxPos[1], boxPos[0]+rscBoxWidth, boxPos[1]+rscBoxHeight);
    if (mouseIn(box)){
        hoveredRsc = brscs[i];
    }
}

var boxPos = array(
    vx+view_wview-UI_LEFT_BAND - bandMargin - (rscBoxWidth+spacing)*(i+1),
    vy+UI_TOP_BAND+bandMargin
);

var box = array(boxPos[0], boxPos[1], boxPos[0]+rscBoxWidth, boxPos[1]+rscBoxHeight);

if (mouseIn(box)){
    hoveredRsc = "fancy";
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXIT IF NOT INGAME
if (!object_game.inGame || notAGameRoom(room)){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var vx = view_xview;
var vy = view_yview;

/// Buttons
if (buttons[0] != noone){
    for (var i = 0; i &lt; array_length_1d(buttons); i++){
        draw_set_font(font_ui);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        var boxHeight = round(string_height(buttons[i])+hPadding*2);
        if (boxHeight/2 != round(boxHeight/2)){
            boxHeight+=1;
        }
        var hovered = hoveredButton[i];
        
        var block = array(vx+UI_LEFT_BAND+bandMargin + (spacing+widthOfAButton)*(i),
                        vy+UI_TOP_BAND+bandMargin,
                        vx+UI_LEFT_BAND+bandMargin + spacing*i+widthOfAButton*(i+1),
                        vy+UI_TOP_BAND+bandMargin + boxHeight);
        
        var myColors = colors;
        if (hovered){
            myColors = hoveredColors;
        }
        var buttonText = "["+key_to_string(keys[i])+"] "+ translate("HEADBAND_BUTTONS",  buttons[i]);
        drawBlock(block, myColors);
        drawShadowedText(vx+UI_LEFT_BAND+bandMargin + (spacing+widthOfAButton)*(i) + widthOfAButton/2, 
                vy+UI_TOP_BAND+bandMargin + boxHeight/2, buttonText, myColors);   
    }
}

var brscs = getBuildingMaterials();

/// Each building material
for (var i = 0; i &lt; array_length_1d(brscs); i++){
    var rsc = brscs[i];
    var boxPos = array(
        vx+view_wview-UI_LEFT_BAND - bandMargin - (rscBoxWidth+spacing)*(i+1),
        vy+UI_TOP_BAND+bandMargin
    );
    var bg = merge_colour(COLOR_BACKGROUND(), COLOR_SHADOW(), 0.5);
    var sprite = getRessource(rsc, "sprite");
    var stock = getStock(rsc);
    var sz = padWithZeroes(string(stock), 3);
    
    draw_set_color(COLOR_SHADOW());
    draw_rectangle(boxPos[0]+1, boxPos[1]+1, boxPos[0]+rscBoxWidth+1, boxPos[1]+rscBoxHeight+1, false);
    
    draw_set_color(bg);
    draw_rectangle(boxPos[0], boxPos[1], boxPos[0]+rscBoxWidth, boxPos[1]+rscBoxHeight, false);
    
    draw_set_color(COLOR_FOREGROUND());
    draw_rectangle(boxPos[0], boxPos[1], boxPos[0]+rscBoxWidth, boxPos[1]+rscBoxHeight, true);
    
    
    
    draw_sprite(sprite, 0, 
        boxPos[0]+sprite_get_width(sprite), 
        boxPos[1]+rscBoxHeight/2);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_right);
    draw_set_font(font_tiniest);
    
    draw_set_color(COLOR_SHADOW());
    draw_text(boxPos[0]+rscBoxWidth-2+1, boxPos[1]+rscBoxHeight/2+1, sz);
    
    draw_set_color(COLOR_FOREGROUND());
    draw_text(boxPos[0]+rscBoxWidth-2, boxPos[1]+rscBoxHeight/2, sz);
}

draw_set_valign(fa_middle);
draw_set_halign(fa_right);
draw_set_font(font_tiniest);


/// Fancy
var boxPos = array(
    vx+view_wview-UI_LEFT_BAND - bandMargin - (rscBoxWidth+spacing)*(i+1),
    vy+UI_TOP_BAND+bandMargin
);

var bg = merge_colour(COLOR_BACKGROUND(), COLOR_SHADOW(), 0.5);
var sprite = sprite_pickable_fancy;
var stock = 0;
var fancy = getFancyMaterials();
for (var j = 0; j &lt; array_length_1d(fancy); j++){
    stock += getStock(fancy[j]);
}
var sz = padWithZeroes(string(stock), 3);

draw_set_color(COLOR_SHADOW());
draw_rectangle(boxPos[0]+1, boxPos[1]+1, boxPos[0]+rscBoxWidth+1, boxPos[1]+rscBoxHeight+1, false);

draw_set_color(bg);
draw_rectangle(boxPos[0], boxPos[1], boxPos[0]+rscBoxWidth, boxPos[1]+rscBoxHeight, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(boxPos[0], boxPos[1], boxPos[0]+rscBoxWidth, boxPos[1]+rscBoxHeight, true);

draw_sprite(sprite, 0, 
    boxPos[0]+sprite_get_width(sprite), 
    boxPos[1]+rscBoxHeight/2);

draw_set_color(COLOR_SHADOW());
draw_text(boxPos[0]+rscBoxWidth-2+1, boxPos[1]+rscBoxHeight/2+1, sz);

draw_set_color(COLOR_FOREGROUND());
draw_text(boxPos[0]+rscBoxWidth-2, boxPos[1]+rscBoxHeight/2, sz);

/// Oxygen
var boxPos = array(
    vx+view_wview-UI_LEFT_BAND - bandMargin - (rscBoxWidth+spacing)*(i+3) - rscBoxWidth,
    vy+UI_TOP_BAND+bandMargin
);

var box = array(boxPos[0], boxPos[1], boxPos[0]+rscBoxWidth*2, boxPos[1]+rscBoxHeight);

var oxyColor = array(COLOR_FOREGROUND(), COLOR_BACKGROUND(), COLOR_SHADOW());
var sprite = sprite_ui_item_oxygen;
var stock = (object_oxygen.oxygen/object_oxygen.oxygenMax);
var sz = padWithZeroes(string(ceil(stock*100)), 1)+"%";

if (stock &lt; oxygenMinimum){
    oxyColor[0] = merge_colour(oxyColor[0], c_red, sin(get_timer()/200000));
}

drawBlock(box, oxyColor, 1);
drawBlock(
            array(box[0], box[1], box[0]+(rscBoxWidth*2)*stock, box[3]),
            array(oxyColor[1], COLOR_FOREGROUND(), COLOR_SHADOW()),
            1
);

var textColor = array(oxyColor[1], COLOR_FOREGROUND(), COLOR_SHADOW());
if (stock &lt; 0.5){
    textColor = oxyColor;
}
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_set_font(font_ui);
drawShadowedText(mean(box[0], box[2]), mean(box[1], box[3]), sz, textColor);



hoveredOxygen = false;
if (mouseIn(box)){
    hoveredOxygen = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
