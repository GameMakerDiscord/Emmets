<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_masterselector</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();
depth = HUD_DEPTH;
selectionType = noone;
selection = array(noone, noone);

//EMMET SELECTION
selectedEmmets = ds_list_create();
isSelectingRectangle = false;
selectAlpha = 1;
startX = 0;
startY = 0;
emmetSelectionRange = 3;

//WALL SELECTION
lastWall = array(0,0);

//GROUND SELECTION
lastGround = array(0,0);

//BUILDING SELECTION
selectedBuilding = noone;

///special
disableForThisFrame = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///exit if paused or not a game room
if (!object_game.inGame || object_game.paused || notAGameRoom(room)){
    isSelectingRectangle = false;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var selectedThisFrame = false;

if (isOnGameScreen(global.i[I_X], global.i[I_Y]) &amp;&amp; cursorModeGet() == CURSOR_MODE_DEFAULT){
        
    //////////////////////////////////////////////////
    ///                                           ///
    ///              EMMET SELECTION              ///
    ///                                           ///
    /////////////////////////////////////////////////


    ///     SINGLE      ///
    if (global.i[I_SELECT]){
        startX = global.i[I_X];
        startY = global.i[I_Y];
        
        if (!global.i[I_ADVANCED]){
            clearSelection(false);
        }
        var col = collision_circle(displayToSysX(global.i[I_X]-emmetSelectionRange/2, global.i[I_Y]), 
                                    displayToSysY(global.i[I_X]-emmetSelectionRange/2, global.i[I_Y]), 
                                    emmetSelectionRange,
                                    object_emmet, 
                                    false, 
                                    false);
        if (instance_exists(col)){
            selectEmmet(col);
            playSfx(sound_sfx_ingame_select);
            selectedThisFrame = true;
        }
    }

    ///     MULTIPLE    ///
    if (global.i[I_SELECT_HELD] &amp;&amp;
        (global.i[I_ADVANCED] || emmetSelectionSize() &lt;= 0) &amp;&amp;
        point_distance(startX, startY, global.i[I_X], global.i[I_Y]) &gt; 10){
        
        selectedThisFrame = true;
        isSelectingRectangle = true;
    }
    
    //   RECTANGLE MAN  ///
    if (global.i[I_SELECT_RELEASED] &amp;&amp; isSelectingRectangle){
        if (!global.i[I_ADVANCED]){
            clearSelection(false);
        }
        with (object_emmet){
            var transPos = sysToDisplay(array(x,y));
            if (object_debug.orthographic){
                transPos = displayToSys(transPos);
            }
            
            if (point_in_rectangle(transPos[0], transPos[1], other.startX, other.startY, global.i[I_X], global.i[I_Y]) ||
                point_in_rectangle(transPos[0], transPos[1], other.startX, global.i[I_Y], global.i[I_X], other.startY) ||
                point_in_rectangle(transPos[0], transPos[1], global.i[I_X], global.i[I_Y], other.startX, other.startY) ||
                point_in_rectangle(transPos[0], transPos[1], global.i[I_X], other.startY, other.startX, global.i[I_Y]) ){
                
                if (!audio_is_playing(sound_sfx_ingame_select)){
                    playSfx(sound_sfx_ingame_select);
                }
                selectEmmet(id);
            }
        }
        selectedThisFrame = true;
        isSelectingRectangle = false;
    }
        
    //////////////////////////////////////////////////
    ///                                           ///
    ///               WALL SELECTION              ///
    ///                                           ///
    /////////////////////////////////////////////////

    var size = getRule(RULE_SIZE);
    
    if (!selectedThisFrame &amp;&amp;
        instance_exists(object_gridman) &amp;&amp; 
        global.i[I_SELECT] &amp;&amp;
        isInGrid(object_gridman.cursorIsoIndex)){
        
        clearSelection(true);
        var cursor = object_gridman.cursorIsoIndex;
        
        if (
                global.terrain_walls[# cursor[0], cursor[1]] != TERRAIN_WALL_UNBREAKABLE
        ){
        /// WALL SELECTION
        /// Part of this is deferred to object_pad for commodity
        
            if (global.i[I_SELECT]){
            
                var possibleWalls = array(cursor, array(cursor[0]+1, cursor[1]+1)); /// List of possible selectable walls
                
                for (var i = 0; i &lt; array_length_1d(possibleWalls); i++){
                    var wall = possibleWalls[i];
                    
                    if (i == 1){
                        var rawCursor = array(displayToSysX(global.i[I_X], global.i[I_Y])/G_CELLSIZE, displayToSysY(global.i[I_X], global.i[I_Y])/G_CELLSIZE);
                        if (point_distance(wall[0], wall[1], rawCursor[0], rawCursor[1]) &gt; 0.66){ // so you can still select the groundcell behind the wall
                            continue;
                        }
                    }
                    if (global.terrain_walls[# wall[0], wall[1]] != TERRAIN_WALL_CLEAR &amp;&amp;
                            isSelectableWall(wall)){
                    /// WALL SELECTION
                        cursor = wall;
                        selectionType = WALL;    
                        if (lastWall[0] &gt;= 0 &amp;&amp; lastWall[1] &gt;= 0){
                            revertWallColor(lastWall);
                        }
                        playSfx(sound_sfx_ingame_select);
                        lastWall = selection;
                        selectedThisFrame = true;
                        selection = cursor; 
                    }
                }
            }
        }
    }
            
    //////////////////////////////////////////////////
    ///                                           ///
    ///             GROUND SELECTION              ///
    ///                                           ///
    /////////////////////////////////////////////////
    
    if (instance_exists(object_gridman) &amp;&amp;
        !selectedThisFrame &amp;&amp;
        global.i[I_SELECT] &amp;&amp;
        isSelectableGround(object_gridman.cursorIsoIndex)){
        
        clearSelection(true);
        playSfx(sound_sfx_ingame_select);
        selectionType = GRIDCELL;
        if (lastGround[0] &gt; 0 &amp;&amp; 
            lastGround[1] &gt; 0 &amp;&amp; 
            getGravel(lastGround) != noone){
            revertGroundColor(lastGround);
        }
        lastGround = selection;
        selectedThisFrame = true;
        selection = object_gridman.cursorIsoIndex;
        
        
    }
        
    //////////////////////////////////////////////////
    ///                                           ///
    ///            BUILDING SELECTION             ///
    ///                                           ///
    /////////////////////////////////////////////////

    
    if (instance_exists(object_gridman) &amp;&amp; 
        global.i[I_SELECT] &amp;&amp;
        isInGrid(object_gridman.cursorIsoIndex) &amp;&amp;
        onChunk(object_gridman.cursorIsoIndex, object_building_parent)){
        clearSelection(true);

        var col = onChunk(object_gridman.cursorIsoIndex, object_building_parent);
        
        if (instance_exists(col) &amp;&amp; col.initialized){
            selectedBuilding = col;
            playSfx(sound_sfx_ingame_select);
            selectionType = BUILDING;
            selectedThisFrame = true;
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//SELECTOR RECT
drawPos = array(startX, startY);
if (isSelectingRectangle){
    draw_set_alpha(selectAlpha);
    draw_set_color(c_white);
    draw_rectangle(drawPos[0], drawPos[1], global.i[I_X], global.i[I_Y], true);
    draw_set_alpha(1.0);
}

//GROUND CELL-ECTION
if (selectionType == GRIDCELL){
    var drawX = 0;
    var drawY = 0;
    drawX = selection[0]*G_CELLSIZE;
    drawY = selection[1]*G_CELLSIZE;
           
    var color = c_blue;
    draw_sprite_ext(sprite_isoground, 0, sysToDisplayX(drawX, drawY), sysToDisplayY(drawX, drawY),  1, 1, 0, selectionColor(), 0.3);
        
}

else if (selectionType == WALL){
    terrain_set_colour(global.terrain_walls, selection[0], selection[1], selectionColor(30)); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
