<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_leftmenu_priorities</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hostWindow = createWindow(translate("PRIORITIES", "title"), "", 
    array(noone), true);

depth = hostWindow.depth-1;

hostWindow.width = 320;
hostWindow.height = 240;
hostWindow.x = (SCREEN_WIDTH-hostWindow.width)/2;
hostWindow.y = (SCREEN_HEIGHT-hostWindow.height)/2;

x = hostWindow.x+UI_LEFT_BAND;
y = hostWindow.y+UI_TOP_BAND;

interiorPadding = 8;
textInteriorPadding = 5;

xButtonSize = UI_TOP_BAND-2;

hostWindow.controlButtonsSize = xButtonSize+interiorPadding;

width = hostWindow.width - UI_RIGHT_BAND - UI_LEFT_BAND;
height = hostWindow.height - UI_TOP_BAND - UI_LEFT_BAND;

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
                
hoveredX = false;

buttonMargin = 4;
buttonWSpacing = 12;
buttonWidth = 64;
buttonZoneHeight = 32;
buttonHeight = buttonZoneHeight-buttonMargin;


hoveredBack = false;
hoveredOK = false;

scrollValue = 0;
maxScroll = 0;

priorities = ds_list_create();
ds_list_copy(priorities, getSetting("priorities"));
columns = 3;
blockSize = 32;
blockVSpacing = 24;
rowWidth = width/2;
hoveredPriority = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(priorities);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;

var left = vx+x+interiorPadding;
var right = vx+x+width-interiorPadding-UI_RIGHT_BAND;
var top = vy+y+interiorPadding+UI_TOP_BAND;
var bottom = vy+y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());


/// 0. Close button
var pos = array(vx+x+width-xButtonSize, vy+hostWindow.y, vx+x+width+UI_RIGHT_BAND, vy+hostWindow.y+xButtonSize);
if (mouseIn(pos)){
    hoveredX = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
        exit;
    }
}
else{
    hoveredX = false;
}


/// Bottom buttons

var confirmBlock = array(right-buttonWidth, bottom-buttonZoneHeight, right, bottom);
if (mouseIn(confirmBlock)){
    hoveredOK = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        ds_list_copy(getSetting("priorities"), priorities);
        closeWindow(hostWindow);
        instance_destroy();
        exit;
    }
}
else{
    hoveredOK = false;
}

var backBlock = array(left, bottom-buttonZoneHeight, left+buttonWidth, bottom);
if (mouseIn(backBlock)){
    hoveredBack = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
        exit;
    }
}
else{
    hoveredBack = false;
}

/// Priority blocks
var hovering = false;
for (var i =0; i &lt; ds_list_size(priorities); i++){
    var thisPriority = priorities[| i];
    var row = floor(i/columns);
    var column = i%columns;
    var center = (right-left)/2;
    
    var blockPosition = array(left+center-rowWidth/2 + (rowWidth/(columns-1))*column, top+interiorPadding*2+blockSize/2+row*(blockSize+blockVSpacing));
    var block = array(blockPosition[0]-blockSize/2, blockPosition[1]-blockSize/2, blockPosition[0]+blockSize/2, blockPosition[1]+blockSize/2);
    
    if (mouseIn(block)){
        hoveredPriority = thisPriority;
        hovering = true;
        // If not first element, draw arrow
        if (i &gt; 0){
            if (global.i[I_SELECT]){
                playSfx(sound_sfx_select);
                var previous =  priorities[| i-1];
                 priorities[| i-1] = thisPriority;
                 priorities[| i] = previous;
            }
        } 
    }
}
if (!hovering){
    hoveredPriority = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;

var left = vx+x+interiorPadding;
var right = vx+x+width-interiorPadding-UI_RIGHT_BAND;
var top = vy+y+interiorPadding+UI_TOP_BAND;
var bottom = vy+y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;


/// 0. Close button
var pos = array(vx+x+width-xButtonSize, vy+y+hostWindow.y, vx+x+width+UI_RIGHT_BAND, vy+y+hostWindow.y+xButtonSize);

var colorsUsed = hostWindow.colors;
if (hoveredX){
    colorsUsed = hostWindow.hoveredColors;
}

drawBlock(pos, colorsUsed);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
drawShadowedText(pos[0]+(pos[2]-pos[0])/2, pos[1]+(pos[3]-pos[1])/2, "X", colorsUsed);

/// 1. Draw background
draw_set_color(COLOR_SHADOW());
draw_rectangle(vx+x, vy+y, vx+x+width-2,  vy+y+height-2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(vx+x, vy+y, vx+x+width+2,  vy+y+height+2, false);

draw_set_color(COLOR_BACKGROUND());
draw_rectangle(vx+x, vy+y, vx+x+width, vy+y+height, false);

draw_set_font(font_ui);

/// 1.5 Notice
draw_set_halign(fa_center);
draw_set_valign(fa_top);
drawShadowedText(floor(vx+x+width/2), vy+y-3, translate("PRIORITIES", "notice"), hostWindow.colors, right-left-interiorPadding*2);

/// 2. Interior

var textHeight = -scrollValue;
var th = string_height("A");

var surf = surface_create(right-left, bottom-top-buttonZoneHeight - 8);

if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear(COLOR_BACKGROUND());
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(font_ui);
    
    /// Priority blocks
    for (var i =0; i &lt; ds_list_size(priorities); i++){
        var thisPriority = priorities[| i];
        var row = floor(i/columns);
        var column = i%columns;
        var center = surface_get_width(surf)/2;
        
        var blockPosition = array(center-rowWidth/2 + (rowWidth/(columns-1))*column, interiorPadding*2+blockSize/2+row*(blockSize+blockVSpacing));
        var block = array(blockPosition[0]-blockSize/2, blockPosition[1]-blockSize/2, blockPosition[0]+blockSize/2, blockPosition[1]+blockSize/2);
        var colorsUsed = hostWindow.colors;
        if ( hoveredPriority == thisPriority){
            colorsUsed = hostWindow.hoveredColors;
        }

        drawBlock(block,colorsUsed);
        var correction = array(0,0);
        if (thisPriority != PRIORITY_REFINE){
            correction = array(-blockSize/2, -blockSize/2);
        }
        draw_sprite(getPrioritySprite(thisPriority), 0, blockPosition[0]+correction[0], blockPosition[1]+correction[1]); 
        drawShadowedText(floor(blockPosition[0]), floor(blockPosition[1]+blockSize/2+textInteriorPadding*2), translate("PRIORITIES", thisPriority), colorsUsed);
        // If not first element, draw arrow
        if (i &gt; 0 &amp;&amp; hoveredPriority == thisPriority){
            draw_set_color(COLOR_BACKGROUND());
            draw_arrow(blockPosition[0]+8, blockPosition[1], blockPosition[0]-8, blockPosition[1], blockSize);
        } 
    }
    
    /// To step    
    surface_reset_target();
    drawBorders(array(left, top, left+surface_get_width(surf), top+surface_get_height(surf)), colors);
    draw_surface(surf, left, top);
    surface_free(surf);
    
    var displayZoneHeight = (bottom-top-buttonZoneHeight)-8;
    var elevator = array(
                    right+1, 
                    top+clamp(((scrollValue-1)/maxScroll)*displayZoneHeight, 0, displayZoneHeight), 
                    right-1, 
                    top+clamp(((scrollValue+1)/maxScroll)*displayZoneHeight, 0, displayZoneHeight)
                );
    drawBlock(elevator, colors, 1);
}            
    
    
/// 3. Buttons
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_set_font(font_ui);
var myColors = colors;
if (hoveredBack){
    myColors = hoveredColors;
}
var backBlock = array(left, bottom-buttonZoneHeight, left+buttonWidth, bottom);
drawBlock(backBlock, myColors);
drawShadowedText(floormean(backBlock[0], backBlock[2]), floormean(backBlock[1], backBlock[3]), translate("GENERAL_UI", "cancel"));

var myColors = colors;
if (hoveredOK){
    myColors = hoveredColors;
}
var confirmBlock = array(right-buttonWidth, bottom-buttonZoneHeight, right, bottom);
drawBlock(confirmBlock, myColors);
drawShadowedText(floormean(confirmBlock[0], confirmBlock[2]), floormean(confirmBlock[1], confirmBlock[3]), translate("GENERAL_UI", "confirm"));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
