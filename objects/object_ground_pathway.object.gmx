<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object_ground</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -(x + y) + 12;

var pos = snapToGrid(array(x+G_CELLSIZE/2,y+G_CELLSIZE/2));
x = pos[0];
y = pos[1];

speedFactor = 1.75;

powered = false;
oldPowered = false;
poweringOff = false;
powerAnimation = 0;
surroundings = getSurroundingsIndex(getIsoIndex(array(x,y)), 1);

alpha = 1;

maxHp = 100;
hp = maxHp;
spriteToDraw = sprite_ground_pathway;
checkNRG = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///depth

offSightMask(G_CELLSIZE);
/*
depth = -x -y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (checkNRG){
    checkNRG = false;
    refreshNRG();

}
if (powerAnimation &lt; powered){
    powerAnimation += (1/60) * 2;
}
else if (powerAnimation &gt; 0){
    powerAnimation -= (1/60) * 2;
}

if (oldPowered &amp;&amp; !powered){
    poweringOff = true;
}
else if (!oldPowered &amp;&amp; !powered){
    poweringOff = false;
}

oldPowered = powered;
//debugMe(id, powered);
/*
powered = false;
for (var i = 0; i &lt; surroundings; i++){
    var cellIndex = surroundings[i];
    //var cellPos = array(cellIndex*G_CELLSIZE, cellIndex*G_CELLSIZE);
    var col = onChunk(cellIndex, object_ground_pathway);
    if (instance_exists(col)){
        if (col.powered){
            powered = true;
        }
    }
    else{
        var col = onChunk(cellIndex, object_building_powerplant);
        if (instance_exists(col)){
            if (col.powered){
                powered = true;
            }
        }
    }
}

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var drawPos = sysToDisplay(array(x,y));
var selected = isCellSelected(array(round(x/G_CELLSIZE), round(y/G_CELLSIZE)));
draw_set_color(c_maroon);

if (object_debug.orthographic){
    draw_rectangle(x, y, x+G_CELLSIZE, y+G_CELLSIZE, false);
}
else{
    var color = c_white;
    if (selected){
        color = c_aqua;
    }
    else if (poweringOff){
        //color = c_red;
    }
    draw_sprite_ext(spriteToDraw, 0, drawPos[0], drawPos[1], 1, 1, 0, color, 1);
    draw_sprite_ext(spriteToDraw, 1, drawPos[0], drawPos[1], 1, 1, 0, color, powerAnimation);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
