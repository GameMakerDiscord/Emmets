<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_debug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();
depth = CURSOR_DEPTH+2;
miniTimeArr = array(0);
miniTimeDisplayArr = array(0);

// Iso test
/*
debugRotation = 1;
var arr = displayToSys(sysToDisplay(array(10, 10)));
if (arr[0] != 10 || arr[1] != 10){
    show_debug_message("Invalid grid translation algorithm");
    show_debug_message("Expected "+string(array(10,10))+"");
    show_debug_message("Expected "+string(arr)+"");
    game_end();
}
*/

debugArr = array(0);
displayArr = array(0);

chunkDebugList = ds_list_create();

crossDebugList = ds_list_create();

debug = DEBUG;
debugCrew = false;
debugStock = false;
debugLoot = false;
debugMarket = false;
debugColors = false;
debugGeneration = false;
screenHack = DEBUG;
explorerDebugSpeed = 0;

orthographic = false;

//TESTS AND WEIRD SHIT
h = view_hview;
w = view_wview;
newSurface = surface_create(w,h);

//PARAMS
debugOptions = ds_map_logcreate();
ds_map_add(debugOptions, "unlockEverything", false); 
ds_map_add(debugOptions, "debugIAI", false); 
ds_map_add(debugOptions, "watchMaps", false);
ds_map_add(debugOptions, "demoMode", false); 
ds_map_add(debugOptions, "softDebug", false); 
ds_map_add(debugOptions, "disableCrypt", false); 
ds_map_add(debugOptions, "enableLogging", false); 

//DEBUG MENU
menuOpened = false;
menuTranslation = array("Vision &gt;", "Walls &gt;", "RSCs &gt;", "Emmets &gt;", "Game &gt;", "Buildings &gt;", "Ground &gt;", "FX &gt;", "Station &gt;", "Tools &gt;");
if (DEBUG){
   menuTranslation[array_length_1d(menuTranslation)] = "Hard &gt;";
}
menuList = array(0);
for (var i = 0; i &lt; array_length_1d(menuTranslation); i++){
    menuList[i] = noone;
}
subMenu = -1;
menuAction = "";
debugCursor = "";
parameters = ds_list_create();
for (var i = 0; i &lt; array_length_1d(menuList); i++){
    switch i{
        case DEBUG_CAMERA:
            menuList[i] = array("Zoom in", "Zoom out", "Show everything", "Clear vision grid", "[M] Spawn Vision Explorer", "[M] Spawn Visible Explorer...", "Center on UL", "Show/hide solids");
            break;
            
        case DEBUG_WALLS:
            menuList[i] = array("Update walls", "Remove all breakable walls", "[M] Add dirt wall", "[M] Add hard wall", "[M] Add unbreakable", "[M] Destroy wall", "[M] Remove wall", "Toggle Debug loot");
            break;
            
        case DEBUG_RSC:;
            menuList[i] = array("[M] Liberate 1 of each", "Add 1 of each to stock", "Empty stock", "[M] Spawn...", "[M] Remove RSC", "Add to stock...", "Remove from stock...", "[M] Liberate...", "Toggle Debug stock");
            break;
            
        case DEBUG_EMMETS:
            menuList[i] = array("[M] Spawn emmet", "Hurt everyone", "[M] Kill emmet", "[M] Spawn Dynamite", "Toggle Debug emmet IAI", "Toggle Debug crew");
            break;
            
        case DEBUG_GAME:
            menuList[i] = array("Reset", "Main menu", "Warp in cave + Genetialize", "Set current GAMELEVEL...", "Display debug grid", "Set explorer debug speed...", "Save game", "Load game", "Open detached main menu", "Toggle Debug generation", "Toggle Screen hack");
            break;
            
        case DEBUG_BUILDINGS:
            menuList[i] = array("[M] Spawn Yard...", "[M] Spawn building...", "[M] Teleport building...", "[M] Teleport back", "[M] Damage...", "[M] Power switch", "[M] Draw NRG Pathways", "[M] Spawn EM Explorer", "[M] Spawn NRG Explorer..." );
            break;
            
        case DEBUG_GROUND:
            menuList[i] = array("[M] Clear ground", "Clear all gravel", "Clear all pathways", "[M] Destroy pathway", "[M] Draw gravel" );
            break;
            
        case DEBUG_FX:
            menuList[i] = array("[M] Create explosion", "[M] Create floating number", "Warning", "Toggle Shader");
            break;
            
        case DEBUG_STATION:
            menuList[i] = array("Refork caves", "Give money", "Genetialize Company", "Connect Emmets United", "Merge stocks", "Go to station", "Set to STATION_HOME", "Set to STATION_CHOOSE_STOCK", "Toggle Debug market" );
            break;
            
        case DEBUG_TOOLS:
            menuList[i] = array("Data structures watcher", "Log bar", "Sound test");
             break;
             
        case DEBUG_HARD:
            menuList[i] = array("Toggle Offline mode", "Decrypt savegame");
            break;
    }
}

RFXSprites = array(RFX2dith_spr, RFX2x2dith_spr, RFX4x4dith_spr, RFXbayerdith_spr, RFXhordith_spr, RFXnoisydith_spr, RFXslashdith_spr, RFXslddith_spr, RFXvertdith_spr, RFXverthordith_spr); 
RFXIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Menu
if (!DEBUG &amp;&amp; !debugParamGet("softDebug")){
    exit;
}
if (keyboard_check(vk_space)){
    if (keyboard_check_pressed(vk_f3)){
        debug = !debug;
    }
    
    if (keyboard_check_pressed(vk_f2)){
        menuOpened = !menuOpened;
    }
    
    if (keyboard_check_pressed(vk_f4)){
        toggleVisualKeyboard();
    }
}

if (!debug){
    exit;
}

debugMe(instance_count, fps);
debugMe(room_speed, room_get_name(room));
debugMe("CURRENT LEVEL", +object_game.currentLevel);

/// Watcher
/*
if (instance_exists(object_selectcave)){
    var c = object_selectcave.availableCavesList[| ds_list_size(object_selectcave.availableCavesList)-1];
    if (!is_undefined(c)){
         if (!ds_exists(c, ds_type_map) || is_undefined(c[? CAVE_LEVEL])){
            log("BEEEEEEEEEEEEEEEEEEEP");
            
            
            while (true){
            
            }
            
        }
     }
}
*/
/// Endof


if (menuOpened){
    if (menuAction != ""){
        switch (menuAction){
                
            default:
                cursorModeSet(CURSOR_MODE_DEBUG);
                debugCursor = menuAction;
                subMenu = -1;
                break;
            
            case DEBUG_TOOLS:
                subMenu = DEBUG_TOOLS;
                break;
            case DEBUG_CAMERA:
                subMenu = DEBUG_CAMERA;
                break;
            case DEBUG_WALLS:
                subMenu = DEBUG_WALLS;
                break;
            case DEBUG_GROUND:
                subMenu = DEBUG_GROUND;
                break;
            case DEBUG_RSC:
                subMenu = DEBUG_RSC;
                break;
            case DEBUG_EMMETS:
                subMenu = DEBUG_EMMETS;
                break;
            case DEBUG_GAME:
                subMenu = DEBUG_GAME;
                break;
            case DEBUG_BUILDINGS:
                subMenu = DEBUG_BUILDINGS;
                break;
            case DEBUG_FX:
                subMenu = DEBUG_FX;
                break;
            case DEBUG_STATION:
                subMenu = DEBUG_STATION;
                break;
            case DEBUG_HARD:
                subMenu = DEBUG_HARD;
                break;
                
            case "Sound test":
                if (instance_exists(object_debug_soundtest)){
                    with(object_debug_soundtest){
                        instance_destroy();
                    }
                }
                else{
                    instance_create(0,0, object_debug_soundtest);
                }
                break;
                
            case "Log bar":
                log("=================================================");
                break;
                
            case "Refork caves":
                var memories = object_station.company[? "memories"];
                var caveList = memories[? "history"];
                var cave = caveList[| ds_list_size( caveList)-1];
                populateCaveSelector();
                saveMisc();
                
                break;
                
            case "Decrypt savegame":
                var file = file_text_open_write(working_directory+"/DUMP/"+"company.json");
                file_text_write_string(file, json_encode(object_station.company));
                file_text_close(file);
                var file = file_text_open_write(working_directory+"/DUMP/"+"crew.json");
                var crewMap = ds_map_logcreate();
                ds_map_add_list(crewMap, "default", object_station.crew);                
                file_text_write_string(file, json_encode(crewMap));
                crewMap[? "default"] = noone;
                ds_map_logdestroy(crewMap);
                file_text_close(file);
                var file = file_text_open_write(working_directory+"/DUMP/"+"stocks.json");
                file_text_write_string(file, json_encode(object_station.stocks));
                file_text_close(file);
                
                var misc = ds_map_logcreate();
                ds_map_add_list(misc, "caves", object_selectcave.availableCavesList);
                ds_map_add_list(misc, "marketQueue", object_market.marketQueue);
                ds_map_add_list(misc, "marketCrew", object_market.marketCrew);
                ds_map_add_map(misc, "statistics", object_game.statistics);
                var miscString = json_encode(misc);
                
                misc[? "caves"] = noone;
                misc[? "marketQueue"] = noone;
                misc[? "marketCrew"] = noone;
                misc[? "statistics"] = noone;
                
                var file = file_text_open_write(working_directory+"/DUMP/"+"misc.json");
                file_text_write_string(file, (miscString));
                file_text_close(file);
                ds_map_logdestroy(misc);
                
                break;
            
            case "Open detached main menu":
                var pauseMenu = createMenu(array(MAIN_RESUME, MAIN_HELP, MAIN_OPTIONS, MAIN_GIVEUP, MAIN_QUIT));
                break;
            
            case "Data structures watcher":
                if (instance_exists(object_debug_memoryprofiler)){
                    with(object_debug_memoryprofiler){
                        instance_destroy();
                    }
                }
                else{
                    instance_create(0,0, object_debug_memoryprofiler);
                }
                break;
            
            case "Toggle Screen hack":
                screenHack = !screenHack
                break;
            
            case "Remove all breakable walls":
                for (var i = 0; i &lt; ds_grid_width(object_drillman.wallsGrid); i++){
                    for (var j = 0; j &lt; ds_grid_height(object_drillman.wallsGrid); j++){
                        if (global.terrain_walls[#i, j] != TERRAIN_WALL_CLEAR &amp;&amp;
                            global.terrain_walls[#i, j] != TERRAIN_WALL_UNBREAKABLE &amp;&amp;
                            object_drillman.wallsGrid[#i, j] != noone){
                            
                            ds_map_logdestroy(object_drillman.wallsGrid[#i, j]);
                            object_drillman.wallsGrid[#i, j] = noone;              
                            global.terrain_walls[#i, j] = TERRAIN_WALL_CLEAR;   
                            
                            var col = onChunk(array(i, j), object_solid);
                            if (col){
                                with col{
                                    instance_destroy();
                                }
                            }                            
                        }
                    }
                }
                terrain_update_region(global.terrain_walls, 0, 0, ds_grid_width(global.terrain_walls), ds_grid_height(global.terrain_walls));
                
                break;
            
            case "Warp in cave + Genetialize":
                offlineSwitch(true)
                createStation("Mr. Scrooge", "HitsPaytime $$$", STARTING_FUNDS, genMotto(), DEFAULT_COLOR, 12);
                gotoCave(createRandomCave(1));
                offlineSwitch(false)
                break;
                
            case "Toggle Shader":
                object_game.colorShader = !object_game.colorShader;
                break;
            
            case "Warning":
                warnTip("This is a warning text");
                break;
                
            case "Give money":
                addFunds(500000);
                break;
            
            case "Toggle Debug generation":
                debugGeneration  = !debugGeneration;
                break;
            
            case "Hurt everyone":
                 with (object_emmet){
                    hurtEmmet(id, 20);
                 }
                break;
                
            case "Zoom out":
                view_hview[view_current] *= 2;
                view_wview[view_current] *= 2;
                break;
                
            case "Zoom in":
                view_hview[view_current] /= 2;
                view_wview[view_current] /= 2;
                break;
                
            case "Show everything":
                if (instance_exists(object_visionman)){
                    var vision = object_visionman.seenRooms;
                    ds_grid_clear(vision, true);
                }
                refreshVision();
                break;
                
            case "Clear vision grid":
                clearVision();
                break;
                
            case "[M] Spawn Visible Explorer...":
                if (!is_undefined(ds_list_find_value(parameters, 0))){
                    ds_list_replace(parameters, 0, real(ds_list_find_value(parameters, 0)));
                    cursorModeSet(CURSOR_MODE_DEBUG);
                    debugCursor = menuAction
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "Explorer speed [s]");
                } 
                break;
                
            case "Update walls":
                terrain_update_region(global.terrain_walls, 0, 0, ds_grid_width(global.terrain_walls), ds_grid_height(global.terrain_walls));
                break;
                
            case "Center on UL":
                centerCameraOn(object_game.firstBuilding);
                break;
                
            case "Add 1 of each to stock":
                var rsc = getRessources()
                for (var i = 0; i &lt; array_length_1d(rsc); i++){
                    addStock(rsc[i], 1);
                }    
                break;
                
            case "Empty stock":
                var rsc = getRessources()
                for (var i = 0; i &lt; array_length_1d(rsc); i++){
                    remStock(rsc[i], 99999);
                }    
                break;
                
            case "[M] Spawn...":
                if (!is_undefined(ds_list_find_value(parameters, 0)) &amp;&amp;
                     !is_undefined(ds_list_find_value(parameters, 1))){
                        ds_list_replace(parameters, 0, real(ds_list_find_value(parameters, 0)));
                        cursorModeSet(CURSOR_MODE_DEBUG);
                        debugCursor = menuAction;
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "How many ?");
                }   
                else if (is_undefined(ds_list_find_value(parameters, 1))){
                    debugMenu(menuAction, "Rsc ?");
                }
                break;
                
            case "Add to stock...":
                if (!is_undefined(ds_list_find_value(parameters, 0)) &amp;&amp;
                     !is_undefined(ds_list_find_value(parameters, 1))){
                        ds_list_replace(parameters, 0, real(ds_list_find_value(parameters, 0)));
                        addStock(ds_list_find_value(parameters, 1), ds_list_find_value(parameters, 0));
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "How much ?");
                }   
                else if (is_undefined(ds_list_find_value(parameters, 1))){
                    debugMenu(menuAction, "Rsc ?");
                }
                break;
                
            case "Remove from stock...":
                if (!is_undefined(ds_list_find_value(parameters, 0)) &amp;&amp;
                     !is_undefined(ds_list_find_value(parameters, 1))){
                        ds_list_replace(parameters, 1, real(ds_list_find_value(parameters, 1)));
                        addStock(ds_list_find_value(parameters, 0), (ds_list_find_value(parameters, 1)));
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "How much ?");
                }   
                else if (is_undefined(ds_list_find_value(parameters, 1))){
                    debugMenu(menuAction, "Rsc ?");
                }
                break;
                
            case "[M] Liberate...":
                if (!is_undefined(ds_list_find_value(parameters, 0)) &amp;&amp;
                     !is_undefined(ds_list_find_value(parameters, 1))){
                        ds_list_replace(parameters, 0, real(ds_list_find_value(parameters, 0)));
                        cursorModeSet(CURSOR_MODE_DEBUG);
                        debugCursor = menuAction;
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "How much ?");
                }   
                else if (is_undefined(ds_list_find_value(parameters, 1))){
                    debugMenu(menuAction, "Rsc ?");
                }
                break;
                
            case "Call emmet":
                callEmmet(getTeleportPoint(), object_emmet);
                break;
                
            case "Reset":
                reset();
                break;
                
            case "Set current GAMELEVEL...":
                if (!is_undefined(ds_list_find_value(parameters, 0))){
                    ds_list_replace(parameters, 0, real(ds_list_find_value(parameters, 0)));
                    object_game.currentLevel = ds_list_find_value(parameters, 0);
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "What floor ?");
                } 
                break;
                
            case "Display debug grid":
                orthographic = !orthographic;
                break;
                
            case "[M] Spawn Yard...":
                if (!is_undefined(ds_list_find_value(parameters, 0))){
                    var asset = ds_list_find_value(parameters, 0);
                    if (asset_get_type(asset) == asset_object){
                        asset = asset_get_index(asset);
                    }
                    ds_list_replace(parameters, 0, asset);
                    cursorModeSet(CURSOR_MODE_DEBUG);
                    debugCursor = menuAction;
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "What objective ?");
                } 
                break;
                
            case "[M] Spawn building...":
                if (!is_undefined(ds_list_find_value(parameters, 0))){
                    var asset = ds_list_find_value(parameters, 0);
                    if (asset_get_type(asset) == asset_object){
                        asset = asset_get_index(asset);
                    }
                    ds_list_replace(parameters, 0, asset);
                    cursorModeSet(CURSOR_MODE_DEBUG);
                    debugCursor = menuAction;
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "What building ?");
                } 
                break;
                
            case "[M] Teleport building...":
                if (!is_undefined(ds_list_find_value(parameters, 0))){
                    var asset = ds_list_find_value(parameters, 0);
                    if (asset_get_type(asset) == asset_object){
                        asset = asset_get_index(asset);
                    }
                    ds_list_replace(parameters, 0, asset);
                    cursorModeSet(CURSOR_MODE_DEBUG);
                    debugCursor = menuAction;
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "What building ?");
                } 
                break;
                
            case "[M] Damage...":
                if (!is_undefined(ds_list_find_value(parameters, 0))){
                    ds_list_replace(parameters, 0, real(ds_list_find_value(parameters, 0)));
                    cursorModeSet(CURSOR_MODE_DEBUG);
                    debugCursor = menuAction;
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "Damage how much ?");
                } 
                break;
                
            case "Show/hide solids":
                with (object_solid){
                    visible = !visible;
                }
                break;
                
            case "Unlock everything":
                debugParamSet("unlockEverything", 1-debugParamGet("unlockEverything"));
                break;
                
            case "[M] Spawn EM Explorer":
                cursorModeSet(CURSOR_MODE_DEBUG);
                debugCursor = menuAction;
                break;
                
            case "[M] Spawn NRG Explorer...":
                if (!is_undefined(ds_list_find_value(parameters, 0)) &amp;&amp;
                    !is_undefined(ds_list_find_value(parameters, 1))){
                    ds_list_replace(parameters, 0, real(ds_list_find_value(parameters, 0)));
                    cursorModeSet(CURSOR_MODE_DEBUG);
                    debugCursor = menuAction;
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "Explorer speed [s]");
                } 
                else if (is_undefined(ds_list_find_value(parameters, 1))){
                    debugMenu(menuAction, "Visible ?");
                }
                break;
                
            case "Clear all gravel":
                for (var i = 0; i &lt; ds_grid_width(object_gravelman.gravelGrid); i++){
                    for (var j = 0; j &lt; ds_grid_height(object_gravelman.gravelGrid); j++){
                        remGravel(array(i,j));
                    }
                }
                ds_grid_clear(object_gravelman.gravelGrid, false);
                break;
                
            case "Clear all pathways":
                with (object_ground_pathway){
                    instance_destroy();
                }
                break;
            
            case "Toggle Debug emmet IAI":
                ds_map_replace(debugOptions, "debugIAI", !ds_map_find_value(debugOptions, "debugIAI")); 
                break;    
            
            case "Main menu":
                room_goto(menu);
                break;
                
            case "Toggle Offline mode":
                offlineSwitch(!object_game.offlineMode);
                floatingNumbers(array(view_xview+view_wview/1.3, view_yview+view_hview/2), "Offline mode set to "+string_upper(string(object_game.offlineMode)), c_aqua, true)
                break;
                
            case "Toggle Debug crew":
                debugCrew = !debugCrew;
                break;
                
            case "Toggle Debug stock":
                debugStock = !debugStock;
                break;
                
            case "Toggle Debug loot":
                debugLoot = !debugLoot;
                break;
                
            case "Set explorer debug speed...":
                if (!is_undefined(ds_list_find_value(parameters, 0))){
                    ds_list_replace(parameters, 0, real(ds_list_find_value(parameters, 0)));
                    explorerDebugSpeed = parameters[| 0];
                }   
                else if (is_undefined(ds_list_find_value(parameters, 0))){
                    debugMenu(menuAction, "Explorer speed");
                } 
                break;
            
            case "[M] Create explosion":
            case "[M] Create floating number":
            case "[M] Spawn Dynamite":
                
                cursorModeSet(CURSOR_MODE_DEBUG);
                debugCursor = menuAction;
                break;
                
            case "Set to STATION_CHOOSE_STOCK":
                object_station.stationStep = STATION_CHOOSE_STOCK;
                break;
                
            case "Set to STATION_HOME":
                object_station.stationStep = STATION_HOME;
                break;
                
            case "Connect Emmets United":
                launchEmmetsUnited();
                break;
                
            case "Go to station":
                room_goto(station_main);
                break;
                
            case "Merge stocks":
                mergeStocks();
                break;
                
            case "Toggle Debug market":
                debugMarket = !debugMarket;
                break;
                
            case "Genetialize Company":
                createStation("Mr. Scrooge", "HitsPaytime $$$", STARTING_FUNDS*5, genMotto(), DEFAULT_COLOR, 12);
                break;
                
            case "Save game":
                saveGame();
                break;
                
            case "Load game":
                loadGame();
                break;
            
        }
        menuAction = "";
    }
}
else{
    menuAction = "";
    subMenu = -1;
}

/*

                     var amount = ds_list_find_value(parameters, 0);
                     var rsc = ds_list_find_value(parameters, 1);
                     repeat amount {
                        instance_create
                     }







/*
if (keyboard_check_pressed(vk_f2)){
    view_hview[view_current] *= 2;
    view_wview[view_current] *= 2;
}
if (keyboard_check_pressed(vk_f3)){
    view_hview[view_current] /= 2;
    view_wview[view_current] /= 2;
}
if (keyboard_check_pressed(vk_f4)){
    var temp = ds_map_logcreate();
    ds_map_add(temp, "ore", 4);
    ds_map_add(temp, "crystal", 0);
    liberateRsc(temp, object_building_toolstore);
}
if (keyboard_check_pressed(vk_f5)){
    addStock("ore", 5);
}
if (keyboard_check_pressed(vk_f6)){
    var cX = global.i[I_X];
    var cY = global.i[I_Y];
    
    var cDX = cX;
    var cDY = cY;
    
    if (!orthographic){
        cDX = displayToSysX(cX, cY);
        cDY = displayToSysY(cX, cY);
    }
    
    instance_create(cDX, cDY, object_emmet);
}
if(keyboard_check_pressed(vk_f7)){
    orthographic = 1-orthographic;
}
if(keyboard_check_pressed(vk_f8)){
    var cX = global.i[I_X];
    var cY = global.i[I_Y];
    
    var cDX = cX;
    var cDY = cY;
    
    if (!orthographic){
        cDX = displayToSysX(cX, cY);
        cDY = displayToSysY(cX, cY);
    }
    
    instance_create(cDX, cDY, object_vision_explorer);
}
if (keyboard_check(vk_f9)){
    refreshVision();
}
if (keyboard_check_pressed(vk_f10)){
    debug = 1-debug;
}
/*
if (keyboard_check_pressed(vk_space)){
    var pos = posToGrid(array(global.i[I_X], global.i[I_Y]));
    
    instance_create(pos[0], pos[1], object_emmet);
}
    
if (keyboard_check_pressed(vk_f9)){
    var pos = posToGrid(array(global.i[I_X], global.i[I_Y]));
    
    instance_create(pos[0], pos[1], object_solid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>debugArr = array(0);
displayArr = array(0);
miniTimeArr = array(0);
miniTimeDisplayArr = array(0);
ds_list_clear(chunkDebugList);
ds_list_clear(crossDebugList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///exit if not debugging
if (!debug){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG OVERLAYS

var vx = view_xview[view_current];
var vy = view_yview[view_current];

draw_set_color(c_green);
draw_set_font(font_debug);
draw_set_valign(fa_top);

//RIGHT

draw_set_halign(fa_right);
var counter = 0;
var width = 0;
for (var i = 0; i &lt; array_length_1d(displayArr); i ++){
    debugArr[i] = string(debugArr[i]);
    displayArr[i] = string(displayArr[i]);
    var thisWidth = string_width(string(displayArr[i]) + " : " + string(debugArr[i]));
    if (thisWidth &gt; width){
        width = thisWidth;
    }
}
for (var i = 0; i &lt; array_length_1d(displayArr); i ++){
    draw_set_color(c_black);
    draw_text(view_wview-10+vx+1, 14*i+vy+2+1, string(displayArr[i])+" : "+string(debugArr[i]));
    draw_set_color(c_fuchsia);
    draw_text(view_wview-10+vx, 14*i+vy+2, string(displayArr[i])+" : "+string(debugArr[i]));
    counter = i;
}

/// CREW DEBUGGING
if(debugCrew){
    for (var i = 0; i &lt; ds_list_size(object_station.crew); i ++){
        var thisCrewMember = ds_list_find_value(object_station.crew, i);
        var d1 = string(thisCrewMember[? "eid"]) + "." + string(thisCrewMember[? "name"]);
        var d2 = "["+string(thisCrewMember[? "deployed"])+"] ["+string(thisCrewMember[? "hp"])+"]";
        
        draw_set_valign(fa_bottom);
        draw_set_color(c_black);
        draw_text(view_wview-10+vx+1, -14*i+vy-1+view_hview, d1+" : "+d2);
        draw_set_color(c_lime);
        draw_text(view_wview-10+vx, -14*i+vy-2+view_hview, d1+" : "+d2);
    }
}

/// STOCKS DEBUGGING
if (debugStock){
    var rscs = getRessources();
    var frscs = getFancyMaterials();
    var buildings = getBuildings();
        
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    
    for (var i = 0; i &lt; array_length_1d(rscs); i++){
        var rsc = rscs[i];
        var stock = getStock(rsc);
        if (stock &lt;= 0){
            continue;
        }
        var d1 = rsc;
        var d2 = "["+string(stock)+"]";
        draw_set_color(c_black);
        draw_text(vx+10+1, vy+view_hview -14*i - 1+1, d1+" : "+d2);
        
        draw_set_color(c_yellow);
        draw_text(vx+10, vy+view_hview -14*i - 1, d1+" : "+d2);
    }
    
    for (var i = 0; i &lt; array_length_1d(buildings); i++){
        var rsc = buildings[i];
        var stock = getHardStock(rsc);
        if (stock &lt;= 0){
            continue;
        }
        var d1 = object_get_name(rsc);
        var d2 = "["+string(stock)+"]";
        draw_set_color(c_black);
        draw_text(vx+110+1, vy+view_hview -14*i - 1+1, d1+" : "+d2);
        
        draw_set_color(c_orange);
        draw_text(vx+110, vy+view_hview -14*i - 1, d1+" : "+d2);
    }
    
    for (var i = 0; i &lt; array_length_1d(frscs); i++){
        var rsc = frscs[i];
        var stock = getHardStock(rsc);
        if (stock &lt;= 0){
            continue;
        }
        var d1 = string(rsc);
        var d2 = "["+string(stock)+"]";
        draw_set_color(c_black);
        draw_text(vx+210+1, vy+view_hview -14*i - 1+1, d1+" : "+d2);
        
        draw_set_color(c_maroon);
        draw_text(vx+210, vy+view_hview -14*i - 1, d1+" : "+d2);
    }
    
    draw_set_color(c_black);
    draw_text(vx+10+1, vy+view_hview - 1+1 - 14*array_length_1d(rscs), "==== STOCKS ====");
    
    draw_set_color(c_yellow);
    draw_text(vx+10, vy+view_hview - 1 - 14*array_length_1d(rscs),  "==== STOCKS ====");
}

draw_set_halign(fa_left);
/// MINITIME
draw_set_color(c_aqua);
for (var i = 1; i &lt; array_length_1d(miniTimeArr); i ++){
    draw_text(10+vx, 9*i+9*counter+vy, string(miniTimeArr[i])+" : "+string(miniTimeDisplayArr[i]));
}

/// CELL
draw_set_color(c_fuchsia);
var size = ds_list_size(chunkDebugList);
for (var i = 0; i &lt; size; i++){
    var posArr = ds_list_find_value(chunkDebugList, i);
    var drawPos = array(posArr[0]*G_CELLSIZE,posArr[1]*G_CELLSIZE);
    if (!object_debug.orthographic){
        drawPos = sysToDisplay(array(posArr[0]*G_CELLSIZE,posArr[1]*G_CELLSIZE));
    }
    draw_sprite_ext(sprite_isoground, 0, drawPos[0], drawPos[1], 1, 1, 0, c_fuchsia, 0.5);
}

/// CROSS
var size = ds_list_size(crossDebugList);
for (var i = 0; i &lt; size; i++){
    var posArr = ds_list_find_value(crossDebugList, i);
    var drawPos = posArr;
    if (!object_debug.orthographic){
        drawPos = sysToDisplay(array(posArr[0],posArr[1]));
    }
    draw_sprite_ext(sprite_fx_cross, 0, drawPos[0], drawPos[1], 1, 1, 0, c_fuchsia, 0.5);
}

/// LOOT
if (debugLoot){
    for (var i = 0; i &lt; ds_grid_width(global.terrain_loot); i ++){
        for (var j = 0; j &lt; ds_grid_height(global.terrain_loot); j ++){
            var lootMap = ds_grid_get(global.terrain_loot, i, j);
            var thisLoot = "";
            if ( ds_exists(lootMap, ds_type_map) &amp;&amp; getWall(array(i,j)) &gt; 0){
                thisLoot = "X";
            }
            if (thisLoot == ""){
                continue;
            }
            draw_set_font(font_debug);
            draw_set_valign(fa_middle);
            draw_set_halign(fa_center);
            
            var textPos = sysToDisplay(array(i*G_CELLSIZE+G_CELLSIZE/2, j*G_CELLSIZE+G_CELLSIZE/2));
            
            draw_set_color(c_black);
            draw_text(textPos[0]+1, textPos[1]+1, string(thisLoot));  
            draw_set_color(c_orange);
            draw_text(textPos[0], textPos[1], string(thisLoot));    
            
            var gridCursor = getIsoIndex(displayToSys(array(global.i[I_X], global.i[I_Y])));
            if (getWall(gridCursor) &gt; 0){
                var map = getWallMap(gridCursor);
                var loot = map[? "loot"];
                if (!is_undefined(loot)){
                    var rscs = getRessources();
                    for (var k =0; k &lt; array_length_1d(rscs); k++){
                        var rsc = rscs[k];
                        if (is_undefined(loot[? rsc])){
                            continue;
                        }
                        var thisLoot = "x"+string(loot[? rsc])+" "+rsc;
                        var textPos = array(mouse_x+G_CELLSIZE, mouse_y+G_CELLSIZE);
                        draw_set_color(c_black);
                        draw_text(textPos[0]+1, textPos[1]+1 + k*11, string(thisLoot));  
                        draw_set_color(c_orange);
                        draw_text(textPos[0], textPos[1] + k*11, string(thisLoot));  
                    }
                }
            }
        }
    }
}
if (debugColors){
    draw_set_color(COLOR_SHADOW());
    draw_rectangle(vx, vy+25, vx+25, vy+75, false);
    draw_set_color(COLOR_BACKGROUND());
    draw_rectangle(vx+25, vy+25, vx+50, vy+75, false);
    draw_set_color(COLOR_FOREGROUND());
    draw_rectangle(vx+50, vy+25, vx+75, vy+75, false);
    draw_set_color(invertColor(COLOR_FOREGROUND()));
    draw_rectangle(vx+100, vy+25, vx+125, vy+75, false);
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugmenu
var bc = c_gray;
var hc = c_navy;
var tc = c_black;
var htc = c_white;
var vx = view_xview;
var vy = view_yview;
var h = view_hview;
var w = view_wview;

var rectHeight = 0;
var rectWidth = 0;
var margin = 2;
for (var i = 0; i &lt; array_length_1d(menuTranslation); i++){
    thisLine = menuTranslation[i];
    rectHeight = string_height(thisLine)+margin*2;
    thisWidth = string_width(thisLine)+margin*2;
    if (thisWidth &gt; rectWidth){
        rectWidth = thisWidth;
    }
}

/// title button
var titleText = "[SPACE + F2] Debug menu";
var titleMargin = 5;
draw_set_font(font_tiniest);

draw_set_color(c_dkgray);
draw_button(vx, vy, vx+string_width(titleText)+titleMargin*2, vy+string_height(titleText)+titleMargin*2, !menuOpened);
draw_set_color(c_white);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_text(vx+titleMargin, vy+titleMargin, titleText);

vy += string_height(titleText)+titleMargin*2;

var littleRectWidth = 130*(view_hview[view_current]/240);

var font = font_tiniest;

if (menuOpened){
    var oneSelected = false;
    
    for (var i = 0; i &lt; array_length_1d(menuList); i++){
    
        var textColor = tc;
        var borderColor = htc;
        var backgroundColor = bc;
    
        if (!oneSelected &amp;&amp; point_in_rectangle(global.i[I_X], global.i[I_Y], vx, vy+i*rectHeight, vx+rectWidth, vy+(i+1)*rectHeight)){
            backgroundColor = hc;
            textColor = htc;
            oneSelected = true;
            if (global.i[I_SELECT]){
                playSfx(sound_sfx_select);
                menuAction = i;
            }
        }
        
        draw_set_font(font);
        draw_set_color(backgroundColor);
        draw_button(vx, vy+i*rectHeight, vx+rectWidth, vy+(i+1)*rectHeight, true);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_left);
        draw_set_color(textColor);
        draw_text(vx+titleMargin, vy+(i+1)*rectHeight - rectHeight/2, menuTranslation[i]);
        
        if (subMenu == i){
            for (var j = i; j &lt; array_length_1d(menuList[i])+i; j++){
                var theseOptions = menuList[i];
                
                var textColor = tc;
                var borderColor = htc;
                var backgroundColor = bc;
                
                if (!oneSelected &amp;&amp; point_in_rectangle(global.i[I_X], global.i[I_Y], vx+rectWidth, vy+j*rectHeight, vx+rectWidth + littleRectWidth, vy+(j+1)*rectHeight)){
                    backgroundColor = hc;
                    textColor = htc;
                    oneSelected = true;
                    if (global.i[I_SELECT]){
                        menuAction = theseOptions[j-i];
                        playSfx(sound_sfx_select);
                        ds_list_clear(parameters);
                    }
                }
                
                draw_set_font(font);
                draw_set_color(backgroundColor);
                draw_button(vx+rectWidth, vy+j*rectHeight, vx+rectWidth + littleRectWidth, vy+(j+1)*rectHeight, true);
                
                draw_set_color(textColor);
                draw_set_valign(fa_middle);
                draw_set_halign(fa_left);
                draw_text(vx+titleMargin+rectWidth, vy+(j+1)*rectHeight - rectHeight/2, theseOptions[j-i]);
            }
        }
    }
        
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;

var radius = 96;
var totalAngle = 360;
var offset = get_timer()/20000;
var dots = 24;
var pulses = 16;
for (var h = 0; h &lt; pulses; h++){
    var distance = (0.5+sin((h/pulses)/2+get_timer()/500000)/2);
    
    for (var i = 0; i &lt; dots; i++){
        var angle = (i/dots)*totalAngle;
        var dot = array(
                    vx + mouse_x + radius * cos((-angle+offset+h)*pi/180) * distance,
                    vy + mouse_y + radius * sin((-angle+offset+h)*pi/180) * (distance/2)
                    );
        //draw_set_alpha(distance);
        draw_set_color(c_lime);
        draw_point(dot[0], dot[1]);
        draw_set_alpha(1.0);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
