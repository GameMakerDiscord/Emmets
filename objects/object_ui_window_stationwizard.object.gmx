<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_stationwizard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hostWindow = createWindow(translate("STATION_WIZARD", "wizard"), "",array(noone), true);
//array(translate("GENERAL_UI", "quit"), translate("GENERAL_UI", "manageCrew"), translate("STATION_MAIN", "nextMission")),
/*
hostWindow.width = SCREEN_WIDTH-UI_LEFT_BAND-UI_RIGHT_BAND;
hostWindow.height = SCREEN_HEIGHT-UI_TOP_BAND-UI_LEFT_BAND;
hostWindow.x = UI_LEFT_BAND;
hostWindow.y = UI_TOP_BAND;
*/

depth = hostWindow.depth-1;

x = hostWindow.x+UI_LEFT_BAND;
y = hostWindow.y+UI_TOP_BAND;

interiorPadding = 8;
textInteriorPadding = 5;

xButtonSize = UI_TOP_BAND-2;

hostWindow.controlButtonsSize = xButtonSize+interiorPadding;

width = hostWindow.width - UI_RIGHT_BAND - UI_LEFT_BAND;
height = hostWindow.height - UI_TOP_BAND - UI_LEFT_BAND;

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
step = 0;
hoveredX = false;

buttonMargin = 4;
buttonWSpacing = 12;
buttonWidth = 64;
buttonZoneHeight = 32;
buttonHeight = buttonZoneHeight-buttonMargin;
companyInfoHSpacing = 24;

titleSupposedHeight = 48;
title = array(
    translate("STATION_WIZARD", "welcome"),
    translate("STATION_WIZARD", "companyInformation"),
    translate("STATION_WIZARD", "companyColor"),
    translate("STATION_WIZARD", "resume")
);

enableNext = true;
enableBack = true;

saturation = 128;
value = 192;
tint = random(255);

hoveredNext = false;
hoveredBack = false;
hoveredName = false;

selectedInput = "name";
nameContent = "";
mottoContent = genMotto();
currentColor = make_colour_hsv(tint, saturation, value);

colorSliderThickness = 2;
colorHandleWidth = 6;
colorHandleHeight = buttonZoneHeight;
hoveredHandle = false;

deleteTime = 0;
deleteSpeed = 20;

/// The only object of the game not to use the sound system...because it's too complex
bgmSteps = array(sound_bgm_stationwizard_1, sound_bgm_stationwizard_2, sound_bgm_stationwizard_3);
bgmSounds = array(noone);
for (var i = 0; i &lt; array_length_1d(bgmSteps); i++){
    bgmSounds[i] = audio_play_sound(bgmSteps[i], 15+i, false);
    audio_sound_gain(bgmSounds[i], 0, 0);
}

firstTime = debugParamGet("demoMode") || !checkMarker("firstTime");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; array_length_1d(bgmSteps); i++){
    bgmSounds[i] = audio_stop_sound(bgmSteps[i]);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();

if (willExit){
    keyboard_string = "";
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var left = x+interiorPadding;
var right = x+width-interiorPadding-UI_RIGHT_BAND;
var top = y+interiorPadding+UI_TOP_BAND;
var bottom = y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

var previewWidth = sprite_get_width(sprite_ui_stationwizard);

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());

/// Music

for (var i = 0; i &lt; array_length_1d(bgmSteps); i++){
    if (!audio_is_playing(bgmSounds[i] )){
        bgmSounds[i] = audio_play_sound(bgmSteps[i], 15+i, false);
        audio_sound_gain(bgmSounds[i], getSetting("bgmVolume"), 0);
    }
}
                
                
/// 0. Close button
var pos = array(x+width-xButtonSize, hostWindow.y, x+width+UI_RIGHT_BAND, hostWindow.y+xButtonSize);
if (mouseIn(pos)){
    hoveredX = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        exitStationWizard();
    }
}
else{
    hoveredX = false;
}
var textLeft = left+previewWidth+interiorPadding+textInteriorPadding;
var textRight = right-interiorPadding-textInteriorPadding;

/// 3. Specifics

switch step{
    case 0:
        audio_sound_gain(bgmSounds[0], 1*getSetting("bgmVolume"), 1000);
        audio_sound_gain(bgmSounds[1], 0, 1000);
        audio_sound_gain(bgmSounds[2], 0, 1000);
        
        draw_set_font(font_ui);
        var cb = "[_]";
        if (firstTime){
            cb = "[X]";
        }
        var block = array(  textLeft, 
                            bottom-buttonZoneHeight-textInteriorPadding-interiorPadding-string_height(cb),
                            textLeft+string_width(cb),
                            bottom-buttonZoneHeight-textInteriorPadding-interiorPadding
                        );
        if (mouseIn(block)){
            if (global.i[I_SELECT]){
                firstTime = !firstTime;
            }
        }        
        break;

    case 1:
        /// Sound
        audio_sound_gain(bgmSounds[0], 0, 1000);
        audio_sound_gain(bgmSounds[1], 1*getSetting("bgmVolume"), 1000);
        audio_sound_gain(bgmSounds[2], 0, 1000);
        
        if (firstTime &amp;&amp; !checkMarker("welcome")){
            var window = createWindow(
                translate("GENERAL_UI", "notice"),
                translate("MARKERS", "welcome")
                );
            window.width=512;
            window.height=384;
            validateMarker("welcome");
        }
        
        draw_set_font(font_ui);
        var tHeight = string_height_ext(translate("STATION_WIZARD", "nameCompanyText"), -1, textRight-textLeft);
        var buttonTop = top+interiorPadding+textInteriorPadding+titleSupposedHeight+tHeight+companyInfoHSpacing;
        var pos = array(textLeft, buttonTop, textRight, buttonTop+buttonZoneHeight);
        if (mouseIn(pos) &amp;&amp; global.i[I_SELECT]){
            selectedInput = "name";
        }
        var pos = array(textLeft, buttonTop+buttonZoneHeight+companyInfoHSpacing, textRight, buttonTop+buttonZoneHeight*2+companyInfoHSpacing);
        if (mouseIn(pos) &amp;&amp; global.i[I_SELECT]){
            selectedInput = "motto";
        }
        if (string_length(keyboard_string) &gt; 0){
            switch selectedInput{
                case "name":
                    keyboard_string = string_filter(keyboard_string, '*^,;#&lt;&gt;`"');
                    if (string_length(nameContent) &lt; 20){
                        nameContent += keyboard_string;
                    }
                    break;
                case "motto":
                    if (string_length(mottoContent) &lt; 42){
                        mottoContent += keyboard_string;
                    }
                    break;
            }
            keyboard_string = "";
        }
        else if (keyboard_check(vk_backspace) || keyboard_check_pressed(vk_backspace)
        || gamepad_button_check(0, object_pad.xpad_map[I_ACTION]) || gamepad_button_check_pressed(0, object_pad.xpad_map[I_ACTION])
        ){
            deleteTime+= deleteSpeed/room_speed;
            if (keyboard_check_pressed(vk_backspace)
            || gamepad_button_check_pressed(0, object_pad.xpad_map[I_ACTION])
){
                switch selectedInput{
                    case "name":
                        nameContent = string_delete(nameContent, string_length(nameContent), 1);
                        break;
                    case "motto":
                        mottoContent = string_delete(mottoContent, string_length(mottoContent), 1);
                        break;
                }
                deleteTime = -4;
            }
            if (deleteTime &gt;= 1){
                switch selectedInput{
                    case "name":
                        nameContent = string_delete(nameContent, string_length(nameContent), 1);
                        break;
                    case "motto":
                        mottoContent = string_delete(mottoContent, string_length(mottoContent), 1);
                        break;
                }
                deleteTime = 0;
            }
        }
        else if (keyboard_check_pressed(vk_tab)){
            if (selectedInput=="name") selectedInput = "motto"
            else if (selectedInput=="motto") selectedInput = "name"
        }
        else{
            deleteTime = 0;
        }
        if (string_length(nameContent) &lt;= 0){
            enableNext = false;
        }
        else{
            enableNext = true;
        }
        break;
        
    case 2:
        /// Sound
        if (!instance_exists(object_ui_window_companycreation_loading)){
            audio_sound_gain(bgmSounds[0], 0, 1000);
            audio_sound_gain(bgmSounds[1], 0, 1000);
            audio_sound_gain(bgmSounds[2], 1*getSetting("bgmVolume"), 1000);
        }
        
        draw_set_font(font_ui);
        var tHeight = string_height_ext(translate("STATION_WIZARD", "nameCompanyText"), -1, textRight-textLeft);
        var buttonTop = top+interiorPadding+textInteriorPadding+titleSupposedHeight+tHeight+companyInfoHSpacing;
        
        var pos = array(textLeft, buttonTop, textRight, buttonTop+buttonZoneHeight);
        var sliderVal = (tint/255);
        var handle = array(
                            pos[0]+sliderVal*(pos[2]-pos[0])-colorHandleWidth/2, 
                            mean(pos[1], pos[3])-colorHandleHeight/2,
                            pos[0]+sliderVal*(pos[2]-pos[0])+colorHandleWidth/2, 
                            mean(pos[1], pos[3])+colorHandleHeight/2
        );
        if (mouseIn(pos)){
            if (mouseIn(handle)){
                hoveredHandle = true;
            }
            else{
                hoveredHandle = false;
            }
            if (global.i[I_SELECT_HELD]){
                tint = ((global.i[I_X]-pos[0])/(pos[2]-pos[0]))*255;
                if (!audio_is_playing(sound_sfx_slider_loop)){
                    audio_play_sound(sound_sfx_slider_loop, 10, true);
                }
                audio_sound_pitch(sound_sfx_slider_loop, ((global.i[I_X]-pos[0])/(pos[2]-pos[0]))+1);
                
                currentColor = make_colour_hsv(tint, saturation, value);    
                if (floor(tint) == 0){
                    currentColor = DEFAULT_COLOR;
                }
            }
            else{
                audio_stop_sound(sound_sfx_slider_loop);
            }
        }
        else{
            audio_stop_sound(sound_sfx_slider_loop);
        }
        object_station.color = currentColor;
        break;
}

/// 4. Next and back
if (enableNext &amp;&amp; step+1 &lt; array_length_1d(title)){
    var block = array(right-buttonWidth-interiorPadding-textInteriorPadding, bottom-buttonZoneHeight, right-interiorPadding-textInteriorPadding, bottom);
    if (mouseIn(block)){
        hoveredNext = true;
        if (global.i[I_SELECT]){
            if (step == 0){
                if (!firstTime){
                    disableNoobMarkers();
                }
                else{
                    enableNoobMarkers();
                }
            }
            playSfx(sound_sfx_select);
            step ++;
            keyboard_string = "";
            resetStationColor();
        }
    }
    else{
        hoveredNext = false;
    }
}
else if (step +1 == array_length_1d(title)){
    var block = array(right-buttonWidth-interiorPadding-textInteriorPadding, bottom-buttonZoneHeight, right-interiorPadding-textInteriorPadding, bottom);
    var myColors = colors;
    if (mouseIn(block)){
        hoveredNext = true;
        if (global.i[I_SELECT]){
            playSfx(sound_sfx_select);
            /// INITIALIZE COMPANY
            var loadingWindows = instance_create(0,0,object_ui_window_companycreation_loading);
            for (var i = 0; i &lt; array_length_1d(bgmSteps); i++){
                audio_sound_gain(bgmSounds[i], 0, 1000);
            }

        }
    }
    else{
        hoveredNext = false;
    }
}
if (enableBack &amp;&amp; step&gt;0){
    var block = array(left+previewWidth+interiorPadding+textInteriorPadding, bottom-buttonZoneHeight, left+interiorPadding+previewWidth+buttonWidth+textInteriorPadding, bottom);
    if (mouseIn(block)){
        hoveredBack = true;
        if (global.i[I_SELECT]){
            playSfx(sound_sfx_select);
            step --;
            keyboard_string = "";
            enableNext = true;
            resetStationColor();
        }
    }
    else{
        hoveredBack = false;
    }
}
else if (step == 0){
    var block = array(left+previewWidth+interiorPadding+textInteriorPadding, bottom-buttonZoneHeight, left+interiorPadding+previewWidth+buttonWidth*2+textInteriorPadding, bottom);
    if (mouseIn(block)){
        hoveredName = true;
        if (global.i[I_SELECT]){
            playSfx(sound_sfx_select);
            instance_create(0, 0, object_ui_window_rename_player);
        }
    }
    else{
        hoveredName = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var left = x+interiorPadding;
var right = x+width-interiorPadding-UI_RIGHT_BAND;
var top = y+interiorPadding+UI_TOP_BAND;
var bottom = y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

var previewWidth = sprite_get_width(sprite_ui_stationwizard);

/// 0. Close button
var pos = array(x+width-xButtonSize, hostWindow.y, x+width+UI_RIGHT_BAND, hostWindow.y+xButtonSize);

var colorsUsed = hostWindow.colors;
if (hoveredX){
    colorsUsed = hostWindow.hoveredColors;
}

drawBlock(pos, colorsUsed);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
drawShadowedText(pos[0]+(pos[2]-pos[0])/2, pos[1]+(pos[3]-pos[1])/2, "X", colorsUsed);

/// 1. Draw background
draw_set_color(COLOR_SHADOW());
draw_rectangle(x, y, x+width-2,  y+height-2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(x, y, x+width+2,  y+height+2, false);

draw_set_color(COLOR_BACKGROUND());
draw_rectangle(x, y, x+width, y+height, false);

/// 2. Draw left image
drawBorders(array(left, top-interiorPadding, left+previewWidth, bottom+interiorPadding), colors);
draw_sprite_part(sprite_ui_stationwizard, 0, 0, 0, previewWidth, bottom-top+interiorPadding*2, left, top-interiorPadding);

/// 2.5 Draw title
var textLeft = left+previewWidth+interiorPadding+textInteriorPadding;
var textRight = right-interiorPadding-textInteriorPadding;
draw_set_font(font_ui_big);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

drawShadowedText(textLeft, top+interiorPadding+textInteriorPadding, title[step], colors, textRight-textLeft);

/// 3. Specifics
switch step{
    
    /// "Welcome..."
    case 0:
        
        draw_set_font(font_ui);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        drawShadowedText(textLeft, top+interiorPadding+textInteriorPadding+titleSupposedHeight, 
                        translate("STATION_WIZARD", "welcomeText"),
                        colors,
                        textRight-textLeft);
                        
        var cb = "[_]";
        if (firstTime){
            cb = "[X]";
        }
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_left);
        drawShadowedText(textLeft, bottom-buttonZoneHeight-textInteriorPadding-interiorPadding, cb+" "+translate("STATION_WIZARD", "firstTime"));
                        
        break;
        
    case 1:
        draw_set_font(font_ui);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        drawShadowedText(textLeft, top+interiorPadding+textInteriorPadding+titleSupposedHeight, 
                        translate("STATION_WIZARD", "nameCompanyText"),
                        colors,
                        textRight-textLeft);
        
        var tHeight = string_height_ext(translate("STATION_WIZARD", "nameCompanyText"), -1, textRight-textLeft);
        var buttonTop = top+interiorPadding+textInteriorPadding+titleSupposedHeight+tHeight+companyInfoHSpacing;
        
        /// Name input
        var pos = array(textLeft, buttonTop, textRight, buttonTop+buttonZoneHeight);
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_left);
        draw_set_font(font_tiniest);
        drawShadowedText(pos[0], pos[1]-textInteriorPadding, stripAccents(translate("STATION_WIZARD", "companyName")), colors);  
             
        drawBorders(pos, array(COLOR_FOREGROUND(), c_black, COLOR_BACKGROUND()));
        
        var text = nameContent;
        if (selectedInput == "name"){
            text += "_";
        }
        
        draw_set_valign(fa_middle); 
        draw_set_font(font_ui);
        draw_set_color(c_white);
        draw_text(pos[0] + textInteriorPadding, mean(pos[1], pos[3]), text);
        
        /// Motto input
        var pos = array(textLeft, buttonTop+buttonZoneHeight+companyInfoHSpacing, textRight, buttonTop+buttonZoneHeight*2+companyInfoHSpacing);
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_left);
        draw_set_font(font_tiniest);
        drawShadowedText(pos[0], pos[1]-textInteriorPadding, stripAccents(translate("STATION_WIZARD", "motto")), colors);  
             
        drawBorders(pos, array(COLOR_FOREGROUND(), c_black, COLOR_BACKGROUND()));
        
        var text = mottoContent;
        if (selectedInput == "motto"){
            text += "_";
        }
        
        draw_set_valign(fa_middle); 
        draw_set_font(font_ui);
        draw_set_color(c_white);
        draw_text(pos[0] + textInteriorPadding, mean(pos[1], pos[3]), text);
                        
        break;
        
    case 2:
        draw_set_font(font_ui);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        drawShadowedText(textLeft, top+interiorPadding+textInteriorPadding+titleSupposedHeight, 
                        translate("STATION_WIZARD", "colorCompanytext"),
                        colors,
                        textRight-textLeft);
        
        var tHeight = string_height_ext(translate("STATION_WIZARD", "nameCompanyText"), -1, textRight-textLeft);
        var buttonTop = top+interiorPadding+textInteriorPadding+titleSupposedHeight+tHeight+companyInfoHSpacing;
        
        /// Color input
        var pos = array(textLeft, buttonTop, textRight, buttonTop+buttonZoneHeight);
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_left);
        draw_set_font(font_tiniest);
        drawShadowedText(pos[0], pos[1]-textInteriorPadding, stripAccents(translate("STATION_WIZARD", "color")), colors);  
        
        var slider = array(pos[0], mean(pos[1], pos[3])-colorSliderThickness, pos[2],  mean(pos[1], pos[3])+colorSliderThickness);
        drawBlock(slider, colors);
        var sliderVal = (tint/255);
        var handle = array(
                            pos[0]+sliderVal*(pos[2]-pos[0])-colorHandleWidth/2, 
                            mean(pos[1], pos[3])-colorHandleHeight/2,
                            pos[0]+sliderVal*(pos[2]-pos[0])+colorHandleWidth/2, 
                            mean(pos[1], pos[3])+colorHandleHeight/2
        );
        myColors = colors;
        if (hoveredHandle){
            myColors = hoveredColors;
        }
        drawBlock(handle, myColors);
        
        break;
        
    case 3:
        draw_set_font(font_ui);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        drawShadowedText(textLeft, top+interiorPadding+textInteriorPadding+titleSupposedHeight, 
                        translate("STATION_WIZARD", "resumeText"),
                        colors,
                        textRight-textLeft);
        var textTop = top+interiorPadding*2+textInteriorPadding+titleSupposedHeight+string_height_ext(translate("STATION_WIZARD", "resumeText"), -1, textRight-textLeft);
        var block = array(textLeft, textTop, textRight, bottom-buttonZoneHeight-interiorPadding);
        
        drawBorders(block, colors);
        var infos = array(
            translate("STATION_WIZARD", "companyName")+": "+nameContent,
            translate("STATION_WIZARD", "motto")+": "+mottoContent,
            translate("STATION_WIZARD", "founder")+": "+object_game.player[? "name"],
            translate("STATION_HOME", "capital")+": ₵"+numberFormat(STARTING_FUNDS),
            translate("STATION_HOME", "creationDate")+": "+date_date_string(date_current_datetime()),
            translate("STATION_HOME", "crewSize")+": "+string(STARTING_CREW_SIZE)
        );
        var interline = string_height(infos[0])+textInteriorPadding;
        for (var i = 0; i &lt; array_length_1d(infos); i++){
            var thisInfo = infos[i];
            drawShadowedText(textLeft+textInteriorPadding, textTop+textInteriorPadding+interline*i, thisInfo);
        }
        
        break;
}

/// 4. Next and back
draw_set_font(font_ui);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

if (enableNext &amp;&amp; step+1 &lt; array_length_1d(title)){
    var block = array(right-buttonWidth-interiorPadding-textInteriorPadding, bottom-buttonZoneHeight, right-interiorPadding-textInteriorPadding, bottom);
    var myColors = colors;
    if (hoveredNext){
        myColors = hoveredColors;
    }
    drawBlock(block, myColors);
    drawShadowedText(mean(block[0], block[2]), mean(block[1], block[3]), translate("GENERAL_UI", "next")+" &gt;", myColors);
}
else if (step +1 == array_length_1d(title)){
    var block = array(right-buttonWidth-interiorPadding-textInteriorPadding, bottom-buttonZoneHeight, right-interiorPadding-textInteriorPadding, bottom);
    var myColors = colors;
    if (hoveredNext){
        myColors = hoveredColors;
    }
    drawBlock(block, myColors);
    drawShadowedText(mean(block[0], block[2]), mean(block[1], block[3]), translate("GENERAL_UI", "ok"), myColors);
}
if (enableBack &amp;&amp; step&gt;0){
    var block = array(left+previewWidth+interiorPadding+textInteriorPadding, bottom-buttonZoneHeight, left+interiorPadding+previewWidth+buttonWidth+textInteriorPadding, bottom);
    var myColors = colors;
    if (hoveredBack){
        myColors = hoveredColors;
    }
    drawBlock(block, myColors);
    drawShadowedText(mean(block[0], block[2]), mean(block[1], block[3]), "&lt; "+translate("GENERAL_UI", "back"), myColors);
}
else if (step == 0){
    var block = array(left+previewWidth+interiorPadding+textInteriorPadding, bottom-buttonZoneHeight, left+interiorPadding+previewWidth+buttonWidth*2+textInteriorPadding, bottom);
    var myColors = colors;
    if (hoveredName){
        myColors = hoveredColors;
    }
    drawBlock(block, myColors);
    drawShadowedText(mean(block[0], block[2]), mean(block[1], block[3]), translate("STATION_WIZARD", "changeName"), myColors);
///object_ui_window_rename_player
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
