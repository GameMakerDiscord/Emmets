<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_wall_ghost</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spriteToDraw = sprite_index;
color = c_white;
depth = LAYER_HIGH-x-y;
drawPos = array(0,0);
imageIndex = 0;
alpha = 0;
size = 1;
drawPos = sysToDisplay(array(x,y));
parent = noone;

drawGauge = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spriteXPos = sprite_get_width(spriteToDraw)/2;
var spriteHeight = sprite_get_height(spriteToDraw);


draw_sprite_part_ext(spriteToDraw, 
                        imageIndex, 
                        0,
                        0, 
                        sprite_get_width(spriteToDraw), 
                        spriteHeight-(G_CELLSIZE/2)*size, 
                        drawPos[0]-spriteXPos, 
                        drawPos[1]-spriteHeight+(G_CELLSIZE)*size, 
                        1, 
                        1, 
                        color, 
                        alpha);

drawBuildingLights(parent);
                        
drawPos = sysToDisplay(array(x,y));

        
// Gauge (tp, refining...)
if (drawGauge){
    var colors = array(COLOR_BACKGROUND(), COLOR_BACKGROUND(), COLOR_SHADOW());
    var block = array(drawPos[0]-gaugeWidth/2, drawPos[1]-gaugeHeight-3, drawPos[0]+gaugeWidth/2,drawPos[1]-gaugeHeight);
    drawBlock(block,colors,1)
    colors = array(COLOR_FOREGROUND(), COLOR_FOREGROUND(), COLOR_SHADOW());
    var block = array(drawPos[0]-gaugeWidth/2, drawPos[1]-gaugeHeight-3, drawPos[0]+(gaugeWidth)*(gauge)-(gaugeWidth/2), drawPos[1]-gaugeHeight);
    drawBlock(block,colors,1)
}


/*
draw_set_color(c_aqua);
draw_point(
    drawPos[0]-spriteXPos, 
    drawPos[1]-G_CELLSIZE*size);
  */                                              

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
