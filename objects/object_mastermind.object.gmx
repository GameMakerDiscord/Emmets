<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_humorman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = HUD_DEPTH;

//EMMET IAI TRIGGER
thinker = 0;

//HUMOR DRAW
humorList = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var nb = instance_number(object_emmet);
if (nb &lt;= 0){
    exit;
}
var thinkerEmmet = instance_find(object_emmet, thinker);
if (instance_exists(thinkerEmmet)){
    thinkerEmmet.chosenToThink = true;
}
thinker = (thinker+1)%nb;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
draw_set_font(font_name);

if (instance_exists(object_masterselector) &amp;&amp; object_masterselector.selectionType == EMMET){
    var selection = object_masterselector.selectedEmmets;
    
    for (var i = 0; i &lt; ds_list_size(selection); i++){
        var thisEmmet = ds_list_find_value(selection,i);
        if (instance_exists(thisEmmet) &amp;&amp; !thisEmmet.dead){
            var xDraw = thisEmmet.x;
            var yDraw = thisEmmet.y;
            var spriteToDraw = thisEmmet.spriteToDraw;
            if (!object_debug.orthographic){
                var drawPos = sysToDisplay(array(thisEmmet.x,thisEmmet.y));
                xDraw = drawPos[0];
                yDraw = drawPos[1];
            }
            else{
                xDraw = thisEmmet.x;
                yDraw = thisEmmet.y;
            }
            var sw = sprite_get_width(spriteToDraw);
            var sh = sprite_get_height(spriteToDraw)+4;
            //draw_sprite(sprite_selector, 0, xDraw, yDraw - sprite_get_height(sprite_selector)/2);
        
            if (thisEmmet.name != ""){
                var topCorrection = 3;  /// évite que le nom soit dessiné sur son visage
                var margin = 2;
                var rx = xDraw-string_width(thisEmmet.name)/2-margin;
                var ry = yDraw-string_height(thisEmmet.name)-string_height(thisEmmet.name)/2-margin-topCorrection;
                var orx = xDraw+string_width(thisEmmet.name)/2+margin;
                var ory = yDraw-string_height(thisEmmet.name)/2-margin-topCorrection;
                
                /// Background draw
                draw_set_color(c_black);
                draw_set_alpha(0.6);
                draw_rectangle(rx, ry, orx, ory, false);
                
                /// Lifebar draw
                draw_set_alpha(0.4);
                draw_rectangle_color(rx, ry, orx, ory, c_red, c_red, c_red, c_red, false);
                draw_rectangle_color(rx, ry, rx + (string_width(thisEmmet.name)+margin*2)*(thisEmmet.actHp/thisEmmet.maxHp), ory, c_lime, c_lime, c_lime, c_lime, false);
                
                /// Name draw
                draw_set_alpha(1.0);
                drawShadowedText(floor(xDraw), floor(yDraw-string_height(thisEmmet.name)/2 -topCorrection), thisEmmet.name);
            }
            else{
                draw_set_color(c_red);
                draw_line(xDraw-sw/2, yDraw-sh,xDraw+sw/2,yDraw-sh);
                draw_set_color(c_lime);
                draw_line(xDraw-sw/2, yDraw-sh,xDraw+(sw)*(thisEmmet.actHp/thisEmmet.maxHp)-(sw/2),yDraw-sh);
            }
        
        }
        
    }
}
for (var i = 0; i &lt; instance_number(object_emmet); i++){
    var thisEmmet = instance_find(object_emmet, i);
    var xDraw = thisEmmet.x;
    var yDraw = thisEmmet.y;
    var spriteToDraw = thisEmmet.spriteToDraw;
    if (!object_debug.orthographic){
        var drawPos = sysToDisplay(array(thisEmmet.x,thisEmmet.y));
        xDraw = drawPos[0];
        yDraw = drawPos[1];
    }
    else{
        xDraw = thisEmmet.x;
        yDraw = thisEmmet.y;
    }
    if (ds_map_find_value(object_game.settings, "showHumor") == true){
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_right);
        draw_set_color(c_white);
        var scale = 1;
        var posX = round(xDraw);
        var posY = round(yDraw-10 - sprite_get_height(sprite_humors)/2);
        if (isSelectedEmmet(thisEmmet)){
            draw_set_font(font_name);
            posX-= string_width(thisEmmet.name)/2+2;
            posX -= sprite_get_width(sprite_humors)/2;
        }
        draw_set_color(c_black);
        draw_set_alpha(scale);
        draw_rectangle(posX - scale*sprite_get_width(sprite_humors)/2, posY + scale*sprite_get_height(sprite_humors)/2, posX + scale*sprite_get_width(sprite_humors)/2, posY - scale*sprite_get_height(sprite_humors)/2, false);
        draw_set_alpha(1.0);
        draw_sprite_ext(sprite_humors, thisEmmet.humor, posX, posY, scale, scale, 0, c_white, scale);
    }
    if (thisEmmet.actHp &lt; thisEmmet.maxHp){
        var sw = sprite_get_width(thisEmmet.spriteToDraw);
        var sh = sprite_get_height(thisEmmet.spriteToDraw)+4;
        draw_set_color(c_red);
        draw_line(xDraw-sw/2, yDraw-sh,xDraw+sw/2,yDraw-sh);
        draw_set_color(c_lime);
        draw_line(xDraw-sw/2, yDraw-sh,xDraw+(sw)*(thisEmmet.actHp/thisEmmet.maxHp)-(sw/2),yDraw-sh);
    }
}

for (var i = 0; i &lt; ds_list_size(humorList); i++){
    var args = ds_list_find_value(humorList,i);
    var pos = sysToDisplay(array(args[1].x, args[1].y));
    var humorBonus = array(10,-10);
    pos = array(pos[0]+humorBonus[0], pos[1]+humorBonus[1]);
    if ( args[4]){
        draw_sprite_ext(sprite_humorbg, 0, pos[0], pos[1], 1, 1, 0, args[2], args[3]);
    }
    draw_sprite_ext(sprite_humors, args[0], pos[0], pos[1], 1, 1, 0, args[2],  args[3]);
            
}

ds_list_clear(humorList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
