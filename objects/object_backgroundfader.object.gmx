<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_fader</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bgm = sound_bgm_void;
bgmPlaying = sound_bgm_void;    // will be a player index
bgmCurrentVolume = 0;
nextBgm = sound_bgm_void;

bgs = sound_bgs_void;
bgsPlaying = sound_bgs_void;    // will be a player index
bgsCurrentVolume = 0;
nextBgs = sound_bgs_void;
bgmFadeSpeed = 1;
fadeSpeed = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
bgsCurrentVolume = clamp(bgsCurrentVolume, 0, getSetting("bgsVolume"));
if (!audio_is_playing(bgs)){
    audio_stop_sound(bgsPlaying);
    bgsPlaying = audio_play_sound(bgs, 16, true);
}

if (bgs != nextBgs){
    if (bgsCurrentVolume &gt; 0){
        bgsCurrentVolume -= fadeSpeed/room_speed;
    }
    else{
        bgs = nextBgs;
    }
}
else if (isFading()){
    var state = fadingState();
    switch (state){
        case -1:
            nextBgs = sound_void;
            break;
    }
}
else{
    if (bgsCurrentVolume &lt; getSetting("bgsVolume")){
        bgsCurrentVolume += fadeSpeed/room_speed;
    }
}
audio_sound_gain(bgsPlaying, bgsCurrentVolume, 0);

/// BGM
bgmCurrentVolume = clamp(bgmCurrentVolume, 0, getSetting("bgmVolume"));
if (!audio_is_playing(bgm)){
    audio_stop_sound(bgmPlaying);
    bgmPlaying = audio_play_sound(bgm, 16, true);
}

if (bgm != nextBgm){
    if (bgmCurrentVolume &gt; 0){
        bgmCurrentVolume -= bgmFadeSpeed/room_speed;
    }
    else{
        bgm = nextBgm;
    }
}
else{
    if (bgmCurrentVolume &lt; getSetting("bgmVolume")){
        bgmCurrentVolume += bgmFadeSpeed/room_speed;
    }
}

audio_sound_gain(bgmPlaying, bgmCurrentVolume, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
