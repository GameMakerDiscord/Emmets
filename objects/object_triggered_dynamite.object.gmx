<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_pickable_dynamite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = array(noone, noone);
timerLeft = 5;
exploding = false;

floorTimer = timerLeft;

damage = 250;
range = G_CELLSIZE*2;

animSpeed = 15;
animIndex = 0;

depth = -x-y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF PAUSED

if (object_game.paused){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>floorTimer = floor (timerLeft);
timerLeft -= 1/room_speed;
if (timerLeft &gt; 0 &amp;&amp; floor(timerLeft) &lt; floorTimer){
    floatingNumbers(sysToDisplay(array(x,y)), ceil(timerLeft), COLOR_FOREGROUND());
}
if (timerLeft &lt;= 0 &amp;&amp; !exploding){
    
    playSfx(sound_sfx_dynamite_near, true, id, true);
    playSfx(sound_sfx_dynamite_far, true);

    if (wallExists(target)){
        destroyWall(target, 150);
        addToStat("wallsDynamited", 1);
    }
    
    // Hurt emmets
    for (var i = 0; i &lt; instance_number(object_emmet); i++){
        var e = instance_find(object_emmet, i);
        var dist = point_distance(e.x, e.y, x, y);
        if (e.dead || e.arriving || dist &gt; range){
            continue;
        }
        hurtEmmet(e, clamp((range-dist)/range, 0, 1)*damage);
    }
    
    // Hurt buildings
    for (var i = 0; i &lt; instance_number(object_building_parent); i++){
        var b = instance_find(object_building_parent, i);
        var dist = point_distance(b.x+G_CELLSIZE/2, b.y+G_CELLSIZE/2, x, y);
        if (b.dead || !b.initialized || dist &gt; range){
            continue;
        }
        damageBuilding(b, clamp((range-dist)/range, 0, 1)*damage);
    }
    
    /*
    audio_play_sound(sound_sfx_dynamite_near, 15, false);
    audio_play_sound(sound_sfx_dynamite_far, 15, false);
    */
    
    screenShake(1);
    exploding = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dp = sysToDisplay(array(x, y));

if (timerLeft &lt;= 0){
    sprite_index = sprite_explosion;
    image_index = floor(animIndex);
    animIndex = animIndex + animSpeed/room_speed;
    if (animIndex &gt;= sprite_get_number(sprite_index)){
        instance_destroy();
    }
}

draw_sprite(sprite_index, image_index, dp[0], dp[1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
