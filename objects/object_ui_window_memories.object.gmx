<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_emmetselector</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hostWindow = createWindow(translate("STATION_HOME", "stationHistory"), "", 
    array(noone), true);

depth = hostWindow.depth-1;

hostWindow.width = 480;
hostWindow.height = 320;
hostWindow.x = (SCREEN_WIDTH-hostWindow.width)/2;
hostWindow.y = (SCREEN_HEIGHT-hostWindow.height)/2;

x = hostWindow.x+UI_LEFT_BAND;
y = hostWindow.y+UI_TOP_BAND;

interiorPadding = 8;
textInteriorPadding = 5;

xButtonSize = UI_TOP_BAND-2;

hostWindow.controlButtonsSize = xButtonSize+interiorPadding;

width = hostWindow.width - UI_RIGHT_BAND - UI_LEFT_BAND;
height = hostWindow.height - UI_TOP_BAND - UI_LEFT_BAND;

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
                
hoveredX = false;

buttonMargin = 4;
buttonWSpacing = 12;
buttonWidth = 64;
buttonZoneHeight = 32;
buttonHeight = buttonZoneHeight-buttonMargin;


hoveredBack = false;
hoveredOK = false;

sliderWidth = 96;
sliderHandleSize = array(4, 8);

scrollValue = 0;
maxScroll = 0;

memories = object_station.company[? "memories"];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;

var left = vx+x+interiorPadding;
var right = vx+x+width-interiorPadding-UI_RIGHT_BAND;
var top = vy+y+interiorPadding+UI_TOP_BAND;
var bottom = vy+y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());


/// 0. Close button
var pos = array(vx+x+width-xButtonSize, vy+hostWindow.y, vx+x+width+UI_RIGHT_BAND, vy+hostWindow.y+xButtonSize);
if (mouseIn(pos)){
    hoveredX = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
    }
}
else{
    hoveredX = false;
}


/// Bottom buttons

var confirmBlock = array(mean(left, right)-buttonWidth/2, bottom-buttonZoneHeight, mean(left, right)+buttonWidth/2, bottom);
if (mouseIn(confirmBlock)){
    hoveredOK = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
    }
}
else{
    hoveredOK = false;
}

/// Scrolling

var fakeSurf = array(right-left, bottom-top-buttonZoneHeight - 8);
var textHeight = 16;

draw_set_halign(fa_left);
draw_set_font(font_ui_big);
var historyTitle = translate("MEMORIES", "history");
var history = memories[? "history"];
textHeight += string_height("A");

draw_set_font(font_ui);
var historyText = '';
for (var i = 0; i &lt; ds_list_size(history); i++){
    var cave = history[|i];
    if (cave[? CAVE_LEVEL] &lt;= 1){
        continue;
    }
    historyText += generateCaveName(cave)+" ("+string((cave[? CAVE_LEVEL]-1)*object_selectcave.depthUnit)+"km) - "+translate(CAVE_BONUS, cave[?CAVE_BONUS])+"/"+translate(CAVE_MALUS, cave[?CAVE_MALUS])+"#";
}
if (ds_list_size(history) &lt;= 1){
    historyText = translate("MEMORIES", "emptyHistory");
}
textHeight+= string_height(historyText);
        
draw_set_font(font_ui_big);
textHeight+= string_height("A");
var KIATitle = translate("MEMORIES", "KIA");
var KIA = memories[? "KIA"];
textHeight+= string_height("A");

draw_set_font(font_ui);
for (var i = 0; i &lt; ds_list_size(KIA); i++){
    var crewMember = KIA[|i];
    var bio = crewMember[? "biography"];
    textHeight+= string_height("A");
}

maxScroll = textHeight-fakeSurf[1] + string_height("A")*3;

if (textHeight &gt; fakeSurf[1]){
    if (mouseIn(array(left, top, right, top+fakeSurf[1]))){
        if (global.i[I_SCROLL_UP]){
            scrollValue -= 8;
            scrollValue = max(scrollValue, 0);
        }
        else if (global.i[I_SCROLL_DOWN]){
            scrollValue += 8;
            scrollValue = min(scrollValue, maxScroll);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;

var left = vx+x+interiorPadding;
var right = vx+x+width-interiorPadding-UI_RIGHT_BAND;
var top = vy+y+interiorPadding+UI_TOP_BAND;
var bottom = vy+y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;


/// 0. Close button
var pos = array(vx+x+width-xButtonSize, vy+y+hostWindow.y, vx+x+width+UI_RIGHT_BAND, vy+y+hostWindow.y+xButtonSize);

var colorsUsed = hostWindow.colors;
if (hoveredX){
    colorsUsed = hostWindow.hoveredColors;
}

drawBlock(pos, colorsUsed);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
drawShadowedText(pos[0]+(pos[2]-pos[0])/2, pos[1]+(pos[3]-pos[1])/2, "X", colorsUsed);

/// 1. Draw background
draw_set_color(COLOR_SHADOW());
draw_rectangle(vx+x, vy+y, vx+x+width-2,  vy+y+height-2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(vx+x, vy+y, vx+x+width+2,  vy+y+height+2, false);

draw_set_color(COLOR_BACKGROUND());
draw_rectangle(vx+x, vy+y, vx+x+width, vy+y+height, false);

draw_set_font(font_ui);

/// 2. Interior
draw_set_valign(fa_top);

var textHeight = -scrollValue;
var th = string_height("A");

var surf = surface_create(right-left, bottom-top-buttonZoneHeight - 8);

if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear(COLOR_BACKGROUND());
    
    draw_set_halign(fa_left);
    draw_set_font(font_ui_big);
    var historyTitle = translate("MEMORIES", "history");
    var history = memories[? "history"];
    drawShadowedText(textInteriorPadding, textHeight+textInteriorPadding, historyTitle);
    textHeight += string_height("A");
    
    draw_set_font(font_ui);
    var historyText = '';
    for (var i = 0; i &lt; ds_list_size(history); i++){
        var cave = history[|i];
        if (cave[? CAVE_LEVEL] &lt;= 1){
            continue;
        }
        historyText += generateCaveName(cave)+" ("+string((cave[? CAVE_LEVEL]-1)*object_selectcave.depthUnit)+"km) - "+translate(CAVE_BONUS, cave[?CAVE_BONUS])+"/"+translate(CAVE_MALUS, cave[?CAVE_MALUS])+"#";
    }
    if (ds_list_size(history) &lt;= 1){
        historyText = translate("MEMORIES", "emptyHistory");
    }
    drawShadowedText(textInteriorPadding, textInteriorPadding+textHeight, historyText);
    textHeight+= string_height(historyText);
            
    draw_set_font(font_ui_big);
    textHeight+= string_height("A");
    var KIATitle = translate("MEMORIES", "KIA");
    var KIA = memories[? "KIA"];
    drawShadowedText(textInteriorPadding, textInteriorPadding+textHeight, KIATitle);
    textHeight+= string_height("A");
    
    draw_set_font(font_ui);
    for (var i = 0; i &lt; ds_list_size(KIA); i++){
        var crewMember = KIA[|i];
        var bio = crewMember[? "biography"];
        draw_sprite_ext(sprite_emmet_idle_back, 0, textInteriorPadding, textInteriorPadding+textHeight+sprite_get_height(sprite_emmet_idle_back)*1.5, 1, 1, 0, getEmmetColor(crewMember), 1);
        drawShadowedText(textInteriorPadding+sprite_get_width(sprite_emmet_idle_back), textInteriorPadding+textHeight, crewMember[?"name"]+" ("+translate("MEMORIES", "was")+" "+string(bio[? "age"])+" "+translate("MEMORIES", "yearsOld")+")");
        textHeight+= string_height("A");
    }
    if (ds_list_size(KIA) &lt;= 0){
        drawShadowedText(textInteriorPadding, textInteriorPadding+textHeight, translate("MEMORIES", "noLostEmmets"));
    }
    
    
    /// To step    
    surface_reset_target();
    drawBorders(array(left, top, left+surface_get_width(surf), top+surface_get_height(surf)), colors);
    draw_surface(surf, left, top);
    surface_free(surf);
    
    var displayZoneHeight = (bottom-top-buttonZoneHeight)-8;
    var elevator = array(
                    right+1, 
                    top+clamp(((scrollValue-1)/maxScroll)*displayZoneHeight, 0, displayZoneHeight), 
                    right-1, 
                    top+clamp(((scrollValue+1)/maxScroll)*displayZoneHeight, 0, displayZoneHeight)
                );
    drawBlock(elevator, colors, 1);
}            
    
    
/// 3. Buttons
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

var myColors = colors;
if (hoveredOK){
    myColors = hoveredColors;
}
var confirmBlock = array(mean(left, right)-buttonWidth/2, bottom-buttonZoneHeight, mean(left, right)+buttonWidth/2, bottom);
drawBlock(confirmBlock, myColors);
drawShadowedText(floormean(confirmBlock[0], confirmBlock[2]), floormean(confirmBlock[1], confirmBlock[3]), translate("GENERAL_UI", "ok"));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
