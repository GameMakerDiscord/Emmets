<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_window</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = HUD_DEPTH-4;

object_game.menuing = true;

width = 480;
height = 320;
x = (SCREEN_WIDTH-width)/2;
y = (SCREEN_HEIGHT-height)/2;
text = "Default text";
title = "Default title";
font = font_ui;
closeButton = true;
windowBarWMargin = 5;
textWMargin = 10;
textInteriorPadding=5;
interiorPadding = 8;
customInterior = false;

controlButtonsSize = 0;
buttonZoneHeight = 32;
buttonMargin = 4;
buttonWSpacing = 16;
buttonWidth = 64;
buttonHeight = buttonZoneHeight-buttonMargin;

buttons = array(translate("GENERAL_UI", "ok"));
buttonsFunctions = array(closeWindow);
buttonsParameters = array(id);

hovered = noone;
 
colors = array(COLOR_FOREGROUND(),
                    COLOR_BACKGROUND(), 
                    COLOR_SHADOW());


hoveredColors = array(COLOR_BACKGROUND(),
                    COLOR_FOREGROUND(), 
                    COLOR_SHADOW());
                    
disabledColors = array(COLOR_BACKGROUND(),
                    COLOR_BACKGROUND(), 
                    COLOR_SHADOW());

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;


x = vx + (SCREEN_WIDTH-width)/2;
y = vy + (SCREEN_HEIGHT-height)/2;


colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
                
if (!customInterior){
    
    var startPoint = x+width/2;
    var totalWidth = width-interiorPadding*2-buttonWidth*2;
    var hoveredSomething = false;
    for (var i =0; i &lt; array_length_1d(buttons); i++){
        var buttonCenterX = startPoint;
        if (array_length_1d(buttons) &gt; 1){
            buttonCenterX = startPoint - totalWidth/2 + (totalWidth/(array_length_1d(buttons)-1))*i;
        }
        var buttonCenterY = y+height-buttonMargin/2 - buttonZoneHeight/2;
        
       
        if (point_in_rectangle(global.i[I_X], global.i[I_Y],
        buttonCenterX-buttonWidth/2, buttonCenterY-buttonHeight/2, buttonCenterX+buttonWidth/2, buttonCenterY+buttonHeight/2)){
        
            hovered = i;
            hoveredSomething = true;
            
            if (global.i[I_SELECT]){
                script_execute(buttonsFunctions[i], buttonsParameters[i]);
                playSfx(sound_sfx_select);
            }
        }  
    }
    if (!hoveredSomething){
        hovered = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font);

var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;

var tw = string_width(title);

/// 0. Draw checker behind the window
if (room == loading || (room == global.gameRoom &amp;&amp; object_game.inGame = false)){
    draw_set_color(COLOR_BACKGROUND());
    draw_rectangle(vx, vy, vx+w, vy+h, false);
}
draw_sprite(sprite_ui_checkerboard, 0, vx, vy);

/// 1. Draw shadow and mainframe
draw_set_color(COLOR_SHADOW());
draw_rectangle(x+2, y+2, x+width+2, y+height+2, false);

draw_set_color(COLOR_BACKGROUND());
draw_rectangle(x, y, x+width, y+height, false);

/// 2. Draw titlebar
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

draw_set_color(COLOR_SHADOW());
draw_rectangle(x+windowBarWMargin+2, y+windowBarWMargin+2, x+width/2-tw/2+2-textWMargin, y+windowBarWMargin+1+2, false);
draw_rectangle(x+windowBarWMargin+2, y-windowBarWMargin+17+2, x+width/2-tw/2+2-textWMargin, y-windowBarWMargin+17+1+2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(x+windowBarWMargin, y+windowBarWMargin, x+width/2-tw/2-textWMargin, y+windowBarWMargin+1, false);
draw_rectangle(x+windowBarWMargin, y-windowBarWMargin+17, x+width/2-tw/2-textWMargin, y-windowBarWMargin+17+1, false);

draw_set_color(COLOR_SHADOW());
draw_rectangle(x+width/2+tw/2+2+textWMargin, y+windowBarWMargin+2, x+width-windowBarWMargin+2-controlButtonsSize, y+windowBarWMargin+1+2, false);
draw_rectangle(x+width/2+tw/2+2+textWMargin, y-windowBarWMargin+17+2, x+width-windowBarWMargin+2-controlButtonsSize, y-windowBarWMargin+17+1+2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(x+width/2+tw/2+textWMargin, y+windowBarWMargin, x+width-windowBarWMargin-controlButtonsSize, y+windowBarWMargin+1, false);
draw_rectangle(x+width/2+tw/2+textWMargin, y-windowBarWMargin+17, x+width-windowBarWMargin-controlButtonsSize, y-windowBarWMargin+17+1, false);

draw_set_color(COLOR_SHADOW());
draw_text(floor(x+width/2 +2), floor(y+windowBarWMargin+2 +2), title);
draw_set_color(COLOR_FOREGROUND());
draw_text(floor(x+width/2), floor(y+windowBarWMargin+2), title);

if (!customInterior){
    /// 3. Window interior
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
    var interior = array(x+interiorPadding, y+UI_TOP_BAND+interiorPadding, x+width-interiorPadding, y+height-interiorPadding-buttonZoneHeight);
        
    draw_set_color(COLOR_BACKGROUND());
    draw_rectangle(interior[0], interior[1], interior[2], interior[3], false);
    
    drawBorders(interior, colors);
    
    drawShadowedText(x+interiorPadding+textInteriorPadding, y+UI_TOP_BAND+interiorPadding+textInteriorPadding, text, array(COLOR_FOREGROUND(), COLOR_BACKGROUND(), COLOR_SHADOW()), width-2*(interiorPadding+textInteriorPadding));

    /// 4. Buttons
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    
    var startPoint = x+width/2;
    var totalWidth = width-interiorPadding*2-buttonWidth*2;
    
    for (var i =0; i &lt; array_length_1d(buttons); i++){
        var buttonCenterX = startPoint;
        if (array_length_1d(buttons) &gt; 1){
            buttonCenterX = startPoint - totalWidth/2 + (totalWidth/(array_length_1d(buttons)-1))*i;
        }
        var buttonCenterY = y+height-buttonMargin/2 - buttonZoneHeight/2;
        var buttonText = buttons[i];
        
        draw_set_color(COLOR_SHADOW());
        draw_rectangle(buttonCenterX-buttonWidth/2 +1, buttonCenterY-buttonHeight/2 +1, buttonCenterX+buttonWidth/2 +1, buttonCenterY+buttonHeight/2 +1, false);
        
        draw_set_color(COLOR_BACKGROUND());
        if (hovered == i){
            draw_set_color(COLOR_FOREGROUND());
        }
        draw_rectangle(buttonCenterX-buttonWidth/2, buttonCenterY-buttonHeight/2, buttonCenterX+buttonWidth/2, buttonCenterY+buttonHeight/2, false);
        
        draw_set_color(COLOR_FOREGROUND());
        if (hovered == i){
            draw_set_color(COLOR_BACKGROUND());
        }
        draw_rectangle(buttonCenterX-buttonWidth/2, buttonCenterY-buttonHeight/2, buttonCenterX+buttonWidth/2, buttonCenterY+buttonHeight/2, true);
        
        var colorsUsed = colors;
        if (hovered == i){
            colorsUsed = hoveredColors;
        }
        
        drawShadowedText(buttonCenterX, buttonCenterY, buttonText, colorsUsed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
