<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_leftmenu_options</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hostWindow = createWindow(translate("OPTIONS", "title"), "", 
    array(noone), true);

depth = hostWindow.depth-1;

hostWindow.width = 480;
hostWindow.height = 320;
hostWindow.x = (SCREEN_WIDTH-hostWindow.width)/2;
hostWindow.y = (SCREEN_HEIGHT-hostWindow.height)/2;

x = hostWindow.x+UI_LEFT_BAND;
y = hostWindow.y+UI_TOP_BAND;

interiorPadding = 8;
textInteriorPadding = 5;

xButtonSize = UI_TOP_BAND-2;

hostWindow.controlButtonsSize = xButtonSize+interiorPadding;

width = hostWindow.width - UI_RIGHT_BAND - UI_LEFT_BAND;
height = hostWindow.height - UI_TOP_BAND - UI_LEFT_BAND;

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
                
optionsList = array(
                "playerRename",
                "lang", 
                "fullScreen",
                "borderScroll", 
         //       "fastCursor",
                "mouseSensitivity",
                "cursorScale",
                "sfxVolume",
                "bgsVolume",
                "bgmVolume",
                "enableHotkeys", 
                "displayHotkeys", 
                "showHumor", 
                "priorities",
                "disableGeoping",
                "colorShader"
              );
                
hoveredX = false;

buttonMargin = 4;
buttonWSpacing = 12;
buttonWidth = 64;
buttonZoneHeight = 32;
buttonHeight = buttonZoneHeight-buttonMargin;

leftText = array(noone);
rightValue = array(noone);
rightType = array(noone);
buttonScripts = array(noone);
buttonHover = array(false);

cave = noone;

calculated = false;
totalCost = 0;

hoveredBack = false;
hoveredOK = false;
hoveredValue = '';
hoveredName = true;

sliderWidth = 96;
sliderHandleSize = array(4, 8);

scrollValue = 0;
maxScroll = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;

var left = vx+x+interiorPadding;
var right = vx+x+width-interiorPadding-UI_RIGHT_BAND;
var top = vy+y+interiorPadding+UI_TOP_BAND;
var bottom = vy+y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

if (!calculated){

    for (var i = 0; i &lt; array_length_1d(optionsList); i++){
        
        var key = optionsList[i];
        var value = object_game.settings[? key];
        
        leftText[i] = translate("OPTIONS", key);    
        rightValue[i] = value;  
        
        switch(key){
            default:
                rightType[i] = "checkbox";
                break;
                
            case "sfxVolume":
            case "bgsVolume":
            case "bgmVolume":
            case "mouseSensitivity":
                rightType[i] = "slider";
                break;
                
            case "lang":
                rightType[i] = object_disk.langs
                break;
                
            case "cursorScale":
                rightType[i] = array(0, 0.5, 1, 2); 
                break;
                
            case "priorities":
            case "playerRename":
                rightType[i] = "button";
                buttonScripts[i] = getOptionWindowScript(key);
                buttonHover[i] = false;
                break;
        }  
    }
    calculated = true;
}

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());


/// 0. Close button
var pos = array(vx+x+width-xButtonSize, vy+y-UI_TOP_BAND, vx+x+width+UI_RIGHT_BAND, vy+y-UI_TOP_BAND+xButtonSize);
if (mouseIn(pos)){
    hoveredX = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
    }
}
else{
    hoveredX = false;
}

/// OptionsZone

draw_set_valign(fa_top);

    
draw_set_font(font_ui);
var lh = string_height("A")*2;
var textStart = -scrollValue;

maxScroll = lh*array_length_1d(leftText) - (bottom-top-buttonZoneHeight);

var fakeSurf = array(right-left, bottom-top-buttonZoneHeight - 8);

var displayZone = array(left, top, left+fakeSurf[0], top+fakeSurf[1]);

if (mouseIn(displayZone)){
    if (global.i[I_SCROLL_DOWN]){
        scrollValue = -max(-maxScroll, -scrollValue-8);
    }
    else if(global.i[I_SCROLL_UP]){
        scrollValue = -min(0, -scrollValue+8);
    }

    for (var i = 0; i &lt; array_length_1d(leftText); i++){
        var text = leftText[i];
        var value = rightValue[i];
        var type = rightType[i];
        
        var rightStr = '';
        
        switch (type){
            default:
                if (is_array(type)){
                    rightStr = string(value);
                    
                } 
                var checkBlock = array(
                                        right-textInteriorPadding - string_width(rightStr), 
                                        top+textInteriorPadding+textStart+lh*i, 
                                        right-textInteriorPadding, 
                                        top+textInteriorPadding+textStart+lh*i + string_height(rightStr)
                                        );
                
                if (mouseIn(checkBlock) &amp;&amp; global.i[I_SELECT]){
                    var lang;
                    for (var j =0; j&lt; array_length_1d(type); j++){
                        lang = type[j];
                        if (lang == value){
                            lang = type[(j+1)%array_length_1d(type)];
                            break;
                        }
                    }
                    rightValue[i] = lang;
                }
                break;
        
            case "checkbox":
                if (value){
                    rightStr = '[X]';
                }
                else{
                    rightStr = '[_]';
                }
                
                var checkBlock = array(
                                        right-textInteriorPadding - string_width(rightStr), 
                                        top+textInteriorPadding+textStart+lh*i, 
                                        right-textInteriorPadding, 
                                        top+textInteriorPadding+textStart+lh*i + string_height(rightStr)
                                        );
                
                if (mouseIn(checkBlock) &amp;&amp; global.i[I_SELECT]){
                    rightValue[i] = !value;
                }
                                        
                break;
                
            case "slider":
                
                var handlePosition = right-sliderWidth+sliderWidth*value;
                var handleBlock = array(handlePosition-sliderHandleSize[0]-left, textInteriorPadding+top+textStart+lh*i-sliderHandleSize[1], handlePosition+sliderHandleSize[0]-left-textInteriorPadding, textInteriorPadding+top+textStart+lh*i+sliderHandleSize[1]);
               
                var sliderZone = array(right-sliderWidth-textInteriorPadding, handleBlock[1], right-textInteriorPadding, handleBlock[3]);
                
                if (mouseIn(sliderZone)){
                    if (global.i[I_SELECT_HELD]){
                        rightValue[i] = clamp(1 + (global.i[I_X]+sliderHandleSize[0]/2-right)/sliderWidth, 0, 1);
                    }
                
                }
                
                break;
                
            case "button":
                var block = array(right-textInteriorPadding-sliderWidth, top+textStart+lh*i-1+textInteriorPadding, right-textInteriorPadding, top+textStart+lh*i+1 + textInteriorPadding+buttonZoneHeight/2);
               
                if (mouseIn(block)){
                    buttonHover[i] = true;
                    if (global.i[I_SELECT]){
                        script_execute(buttonScripts[i]);
                    }
                }
                else{
                    buttonHover[i] = false;
                }
                
                break;
        }
    }
}

/// Bottom buttons

var confirmBlock = array(right-buttonWidth, bottom-buttonZoneHeight, right, bottom);
if (mouseIn(confirmBlock)){
    hoveredOK = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        for (var i = 0; i &lt; array_length_1d(optionsList); i++){
            object_game.settings[? optionsList[i]] = rightValue[i];
        }
        saveOptions();
        loadLines();
        closeWindow(hostWindow);
        instance_destroy();
    }
}
else{
    hoveredOK = false;
}

var backBlock = array(left, bottom-buttonZoneHeight, left+buttonWidth, bottom);
if (mouseIn(backBlock)){
    hoveredBack = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
    }
}
else{
    hoveredBack = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;

var left = vx+x+interiorPadding;
var right = vx+x+width-interiorPadding-UI_RIGHT_BAND;
var top = vy+y+interiorPadding+UI_TOP_BAND;
var bottom = vy+y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;


/// 0. Close button
var pos = array(vx+x+width-xButtonSize, vy+y-UI_TOP_BAND, vx+x+width+UI_RIGHT_BAND, vy+y-UI_TOP_BAND+xButtonSize);
var colorsUsed = hostWindow.colors;
if (hoveredX){
    colorsUsed = hostWindow.hoveredColors;
}

drawBlock(pos, colorsUsed);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
drawShadowedText(pos[0]+(pos[2]-pos[0])/2, pos[1]+(pos[3]-pos[1])/2, "X", colorsUsed);

/// 1. Draw background
draw_set_color(COLOR_SHADOW());
draw_rectangle(vx+x, vy+y, vx+x+width-2,  vy+y+height-2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(vx+x, vy+y, vx+x+width+2,  vy+y+height+2, false);

draw_set_color(COLOR_BACKGROUND());
draw_rectangle(vx+x, vy+y, vx+x+width, vy+y+height, false);

draw_set_font(font_ui);

if (!calculated){
    exit;
}

/// 2. Interior
draw_set_valign(fa_top);

var lh = string_height("A")*2;
var textStart = -scrollValue;

var surf = surface_create(right-left, bottom-top-buttonZoneHeight - 8);

if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear(COLOR_BACKGROUND());
    
    for (var i = 0; i &lt; array_length_1d(leftText); i++){
        var text = leftText[i];
        var value = rightValue[i];
        var type = rightType[i];
        
        draw_set_halign(fa_left);
        drawShadowedText(textInteriorPadding, textInteriorPadding+textStart+lh*i, text);
        
        draw_set_halign(fa_right);
        var rightStr = '';
        
        switch (type){
            default:
                rightStr = value;
                break;
                
            case "button":
                var myColors = colors;
                if (buttonHover[i]){
                    myColors = hoveredColors;
                }
                draw_set_valign(fa_middle);
                draw_set_halign(fa_center);
                var block = array(right-textInteriorPadding-sliderWidth-left, textStart+lh*i-1+textInteriorPadding, right-left-textInteriorPadding, textStart+lh*i+1 + textInteriorPadding+buttonZoneHeight/2);
                drawBlock(block, myColors);
                drawShadowedText(floormean(block[0], block[2]), floormean(block[1], block[3]), translate("OPTIONS", "edit"));
                draw_set_halign(fa_right);
                draw_set_valign(fa_top);
                break;
        
            case "checkbox":
                if (value){
                    rightStr = '[X]';
                }
                else{
                    rightStr = '[_]';
                }
                break;
                
            case "slider":
                drawBlock(array(right-sliderWidth-left-textInteriorPadding, textStart+lh*i-1+textInteriorPadding, right-left-textInteriorPadding-textInteriorPadding, textStart+lh*i+1 + textInteriorPadding), colors);
                var handlePosition = right-sliderWidth+sliderWidth*value-textInteriorPadding;
                var handleBlock = array(handlePosition-sliderHandleSize[0]-left, textStart+lh*i-sliderHandleSize[1]+textInteriorPadding, handlePosition+sliderHandleSize[0]-left, textStart+lh*i+sliderHandleSize[1]+textInteriorPadding);
                drawBlock(handleBlock, colors);
                break;
        }
        
        drawShadowedText(right-left-textInteriorPadding, textInteriorPadding+textStart+lh*i, rightStr);
    }                   
    
    /// To step    
    surface_reset_target();
    drawBorders(array(left, top, left+surface_get_width(surf), top+surface_get_height(surf)), colors);
    draw_surface(surf, left, top);
    surface_free(surf);
    
    var displayZoneHeight = (bottom-top-buttonZoneHeight)-8;
    var elevator = array(
                    right+1, 
                    top+clamp(((scrollValue-1)/maxScroll)*displayZoneHeight, 0, displayZoneHeight), 
                    right-1, 
                    top+clamp(((scrollValue+1)/maxScroll)*displayZoneHeight, 0, displayZoneHeight)
                );
    drawBlock(elevator, colors, 1);
}            
    
    
/// 3. Buttons
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
var myColors = colors;
if (hoveredBack){
    myColors = hoveredColors;
}
var backBlock = array(left, bottom-buttonZoneHeight, left+buttonWidth, bottom);
drawBlock(backBlock, myColors);
drawShadowedText(floormean(backBlock[0], backBlock[2]), floormean(backBlock[1], backBlock[3]), translate("GENERAL_UI", "cancel"));

var myColors = colors;
if (hoveredOK){
    myColors = hoveredColors;
}
var confirmBlock = array(right-buttonWidth, bottom-buttonZoneHeight, right, bottom);
drawBlock(confirmBlock, myColors);
drawShadowedText(floormean(confirmBlock[0], confirmBlock[2]), floormean(confirmBlock[1], confirmBlock[3]), translate("GENERAL_UI", "confirm"));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
