<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_drillman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();
drillObjectives = ds_list_create();
dynamiteObjectives = ds_list_create();

wallsGrid = ds_grid_create(object_game.gridSize[0], object_game.gridSize[1]);
blink = 0;
wallToBlink = array(noone, noone);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!object_game.inGame){
    exit;
}

for (var i = 0; i &lt; ds_list_size(drillObjectives); i++){
    var wall = ds_list_find_value(drillObjectives,i);
    wall = ds_grid_get(wallsGrid, wall[0], wall[1]);
    if (wall == noone || is_undefined(wall) || wall == TERRAIN_WALL_CLEAR){
        ds_list_delete(drillObjectives, i);
        continue;
    }
}for (var i = 0; i &lt; ds_list_size(dynamiteObjectives); i++){
    var wall = ds_list_find_value(dynamiteObjectives,i);
    wall = ds_grid_get(wallsGrid, wall[0], wall[1]);
    if (wall == noone || is_undefined(wall) || wall == TERRAIN_WALL_CLEAR){
        ds_list_delete(dynamiteObjectives, i);
        continue;
    }
}
if (blink &gt; 0 &amp;&amp; getWall(wallToBlink) &gt;= 0){
    terrain_set_colour(global.terrain_walls, wallToBlink[0], wallToBlink[1], c_white);
    blink-= 1/room_speed;
    if (round((blink/0.3)%1) == 0){
        terrain_set_colour(global.terrain_walls, wallToBlink[0], wallToBlink[1], c_gray);
    }
}
else{
    blink = 0;
    if (getWall(wallToBlink) &gt;= 0){
        revertWallColor(wallToBlink);
    }
    wallToBlink = array(noone, noone);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do not draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
