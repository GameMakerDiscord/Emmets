<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_wall</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = HUD_DEPTH+1;

var pos = snapToGrid(array(x+G_CELLSIZE/2,y+G_CELLSIZE/2));
x = pos[0];
y = pos[1];

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

/*

var iI = object_gridman.cursorIsoIndex;
var tI = snapToGrid(array(x,y));

debugMe(tI[0]/G_CELLSIZE, tI[1]/(G_CELLSIZE));

if (iI[0] == tI[0]/G_CELLSIZE &amp;&amp; iI[1] == tI[1]/(G_CELLSIZE)){
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_set_font(font_debug);
    draw_text(sysToDisplayX(x, y), sysToDisplayY(x, y), string(id));
}

*/

var pos = array(x,y);

draw_set_color(c_lime);

if (object_debug.orthographic){
    draw_rectangle(pos[0], pos[1], pos[0]+G_CELLSIZE, pos[1]+G_CELLSIZE, true);
}
else{
    pos = sysToDisplay(pos);
    var top = pos;
    var left = array(pos[0]-G_CELLSIZE, pos[1] + G_CELLSIZE/2);
    var right = array(pos[0]+G_CELLSIZE, pos[1] + G_CELLSIZE/2);
    var bottom = array(pos[0], pos[1] + G_CELLSIZE);
    
    draw_line(top[0], top[1], left[0], left[1]);
    draw_line(left[0], left[1], bottom[0], bottom[1]);
    draw_line(bottom[0], bottom[1], right[0], right[1]);
    draw_line(top[0], top[1], right[0], right[1]);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
