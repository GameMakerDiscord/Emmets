<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_ui_exitcave</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CONSTS
endFlag = ENDING_TELEPORT;

//VARS
step = 1;
emmetI = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME OVER THEN DESTROY

//STEP 0 : PARALYZAH
paralyze();
clearSelection();

if (step == 1){
    with (object_building_yard){
        instance_destroy();
        exit;
    }
    with (object_geopulse){
        instance_destroy();
        exit;
    }
    object_game.inGame = false;
    /*
    if (instance_exists(instance_find(object_building_parent, buildingI)) &amp;&amp; instance_find(object_building_parent, buildingI).dead == false){
        teleportBack(instance_find(object_building_parent, buildingI));
        buildingI++;
    }
    */
    if (instance_exists(instance_find(object_emmet, emmetI)) &amp;&amp; instance_find(object_emmet, emmetI).dead == false){
        teleportBack(instance_find(object_emmet, emmetI));
        emmetI++;
    }
    else if (instance_exists(object_emmet)){
        with (object_emmet){
            teleportBack(id);
        }
    }
    else{
        step = 2;
    }
} 
else if (!isFading()){

    validateMarker("exploreBlink");    

    fadeToRoom(station_main);
    
    addToStat("buildingsLost", instance_number(object_building_parent));
    
    var mem = object_station.company[? "memories"];
    var history = mem[? "history"];
    
    object_game.lastCave = global.currentCave;
    global.currentCave = noone;
    object_station.stationStep = STATION_CHOOSE_STOCK;
    object_station.connectEUAfterStock = true;
    
    var caveCopy =  json_decode(json_encode(object_game.lastCave));
    ds_list_add(mem[? "history"], caveCopy);
    ds_list_mark_as_map(mem[? "history"], ds_list_size(mem[? "history"])-1);
    log("Added cave "+json_encode(caveCopy)+" to history. Memories are now ("+string(mem)+")"+json_encode(mem));
    bgmFade(sound_bgm_void);
    
    destroyMap();
    populateCaveSelector();
    mergeStocks();
    randomize();
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
