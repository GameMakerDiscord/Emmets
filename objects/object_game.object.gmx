<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_game</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();
releaseType = "Alpha";
versionNumber = VERSION;

//SYSTEM
window_set_caption("EMMETS");
window_set_rectangle(0, 0, SCREEN_WIDTH*2, SCREEN_HEIGHT*2);
application_surface_draw_enable(false);
surface_resize(application_surface, SCREEN_WIDTH, SCREEN_HEIGHT);
randomize(); 
deleteLog()
log("Game start");

//GAME
offlineMode = DEBUG;
depth = HUD_DEPTH-1;
demoTimer = 0;

paralyzed = false;
menuing = false;
pausing = false;


/// Player
player = ds_map_logcreate();
player[? "name"] = environment_get_variable("USERNAME");
player[? "token"] = player[? "name"];

/// Settings
settings = ds_map_logcreate();
ds_map_add(settings, "fastCursor", false);
ds_map_add(settings, "showHumor", true);
ds_map_add(settings, "fastIAI", false);
ds_map_add(settings, "mouseSensitivity", 0.3);
ds_map_add(settings, "borderScroll", false);
ds_map_add(settings, "lang", "ENGLISH");
ds_map_add(settings, "enableHotkeys", true);
ds_map_add(settings, "displayHotkeys", true);
ds_map_add(settings, "sfxVolume", 0.75);
ds_map_add(settings, "bgsVolume", 0.75);
ds_map_add(settings, "bgmVolume", 0.75);
ds_map_add(settings, "fullScreen", true);
ds_map_add(settings, "colorShader", false);
ds_map_add(settings, "disableGeoping", false);
ds_map_add(settings, "cursorScale", 0);
ds_map_add(settings, "priorities", createDefaultPriorities());
ds_map_add(settings, "playerRename", player[? "name"]);

initializeStatistics();

markers = ds_map_logcreate();

//getLangTranslation(TRANSLATE_STRING, "sample");
triedLoading = false;
firstFrame = true;
timer = 0;
paused = false;
firstBuilding = object_building_predeployed_battery;
electroMagneticalMissions = ds_map_logcreate();

accountLoaded = loadPersonal();

banned = false;
newVer = noone;
notified = false;
communityRules = noone;

/// Emmets united
euNews = ds_list_create();
euNewsMax = 8;

/// Shader
colorShader = false;
colors = 5;

RFX_init(
        sprite_get_texture(RFX2x2dith_spr, 0),
        95
        );

//CAVE

enum CAVE_BONUSES{
    LARGE_CAVE,
    RESSOURCES_RICH,
    NO_HARDROCK,
    CRYSTALLINE,
    SEALING,
    WATER_PRESENCE
};

enum CAVE_MALUSES{
    POOR_SEALING,
    LAVA_PRESENCE,
    SMALL_CAVE,
    MORE_HARDROCK,
    RESIDUALS,
    RESSOURCES_POOR,
    ELECTRIC_VARIATION
};

currentLevel = 1;
lastCave = noone;
gridSize = array(noone, noone);

inGame = false;
initialized = false;

global.gameRoom = room;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tryload
if (!triedLoading){
    loadOptions();
    loadLines();
    loadMarkers();
    var load = loadGame();
    triedLoading = true;
    if (!offlineMode &amp;&amp; !checkMarker("readTheRules")){
        onlineGetCommunityRules();
    }
}
if (firstFrame){
    window_center();
    firstFrame = false;
}


if (file_exists("DEMO")){
    file_delete("DEMO");
    switchToDemo();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PÃ„USE
if (room == menu){
    menuing = true;
    clearSelection();
}
if (!window_has_focus() || menuing || pausing){
    paused = true;
}
else{
    paused = false;
}

/*
if (keyboard_check_pressed(vk_space)){
    ds_map_replace(settings, "showHumor", 1-ds_map_find_value(settings, "showHumor"));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If in game set room speed
if (room == global.gameRoom){
    room_speed = 60;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Force fullscreen
colorShader = getSetting("colorShader");

if (window_get_fullscreen() != getSetting("fullScreen")){
    window_set_fullscreen(getSetting("fullScreen"));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn obsolete and / or  banned windows
if (room == menu &amp;&amp; !notified){
    notified = true;
    if (banned){
        createWindow(
                translate("GENERAL_UI", "serverInfo"),
                translate("GENERAL_UI", "banned")
            );
    }
    else if (newVer != noone){
        var version = object_game.releaseType+"."+string(object_game.versionNumber);
        createWindow(
            translate("GENERAL_UI", "serverInfo"),
            string_replace(string_replace(translate("GENERAL_UI", "obsoleteVersion"), "%s", newVer), "%s",version)
        );
    }
    else if (communityRules != noone){
        createWindow(
            translate("GENERAL_UI", "serverInfo"),
            communityRules
        );
        
    }
    else{
        notified = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO reset on inactivity

if (debugParamGet("demoMode")){
    if (keyboard_check(vk_f12)){
        demoReset();
    }
    else if (mouse_check_button(mb_any) || keyboard_check_pressed(vk_anykey)){
        demoTimer = 0;
    }
    else {
        demoTimer += 1/room_speed;
        
        if (demoTimer &gt; DEMO_TIMEOUT){
            demoReset();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Redrawing application surface
var vx = view_xview[view_current];
var vy = view_yview[view_current];
var h = view_hview[view_current];
var w = view_wview[view_current];

draw_clear(c_black);
var ww = window_get_width();
var wh = window_get_height();
if (!surface_exists(application_surface)){
    exit;
}
var aw = surface_get_width(application_surface);
var ah = surface_get_height(application_surface);

var reference = ww;
var ratio = SCREEN_WIDTH/SCREEN_HEIGHT; 
if (wh &gt; ww){
    reference = wh;
    ratio = SCREEN_HEIGHT/SCREEN_WIDTH; 
    wh = ww*ratio;
}
else{
    ww = wh*ratio;
}

/*
var wr = floor(ww/aw);
var hr = floor(wh/ah);
*/
var vr,hr
if (object_debug.screenHack){
    wr = (ww/aw);
    hr = (wh/ah);
}
else{
    wr = floor(ww/aw);
    hr = floor(wh/ah);
}

var fw = aw*wr;
var fh = ah*hr;

var xpos = floor((window_get_width()-fw)/2);
var ypos = floor((window_get_height()-fh)/2);

if (colorShader){
/*
    shader_set(shader_redux);
    
    var sVar =  shader_get_uniform(shader_redux, "colorAmount");
    shader_set_uniform_f(sVar, colors);
*/
    RFX_set_coldepth(8);
    shader_set_rfx();  
}

draw_surface_stretched(application_surface, xpos, ypos, fw, fh);

if (colorShader){
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview[view_current];
var vy = view_yview[view_current];
var h = view_hview[view_current];
var w = view_wview[view_current];
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
