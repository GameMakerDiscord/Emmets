<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_menu_poweraward</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//INIT
background_colour = c_black;
draw_set_font(font_msdos);

//VARS
step = 0;
typewriter = 0;
lastTw = 0;

//Boot anim
bootTimer = 0;
checkedRam = 0;
ramCheckSpeed = 160;
setuped = false;
bootSpeed = 1;
randomString = string_upper(string_delete(md5_string_utf8(string(random(1000))), 6, 32)) + "-"+ string_delete(md5_string_utf8(string(random(1000))), 3, 32)+ "-" + string(round(random(5)));

/// Maybe in the future allow for saves importation
directories = array(
                object_disk,
                object_disk.savePath,
                object_disk.softPath,
                object_disk.settingsPath
            );
directoriesNames = array(
                "disk",
                "save path",
                "soft path",
                "settings"
                    );
directoriesMessages = array(noone);
text = '';

skipping = false;
enteringSetup = false;

/// Audio systems loading
toLoad = array(audiogroup_sfx, audiogroup_bgm, audiogroup_bgs);

firstFrame = true;
loaded = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (firstFrame){
    firstFrame = false;
    playSfx(sound_sfx_dos_boot);
    for (var i = 0; i &lt; array_length_1d(toLoad); i++){
        audio_group_load(toLoad[i]);
    }

}

loaded = true;
for (var i = 0; i &lt; array_length_1d(toLoad); i++){
    if (!audio_group_is_loaded(toLoad[i])){
        loaded = false;
    }
}
bootTimer += (1/room_speed)* bootSpeed; //seconds

/// Step 0
switch (step){
    case 0: /// Blinkin cursor
        if (bootTimer &gt; 1.0){
            step++; 
            bootTimer = 0;
        }
        break;
        
    case 1: /// Racknet logo
        if (bootTimer &gt; 0.7){
            step++;
            bootTimer = 0;
        }
        break;
        
    case 2: /// Memory test
        if (typewriter &gt;= string_length(text)) {
            var ramOk = false;
            checkedRam += ramCheckSpeed/room_speed;
            if (checkedRam &gt; 255){
                checkedRam = 256;
                ramOk = true;
            }
            if (ramOk){
                step++;
                bootTimer = 0;
            }
        }
        break;
        
    case 3: /// Memory OK, wait while initializing audio systems
        if (bootTimer &gt; 1.5 &amp;&amp; typewriter &gt;= string_length(text)){
            step++;
            bootTimer = 0;
        }
        break;
        
    case 4:
        if (loaded &amp;&amp; bootTimer &gt; 1.2 &amp;&amp; typewriter &gt;= string_length(text)){
            bootSpeed = 100;
            step++;
            bootTimer = 0;
        }
        break;
       
    case 5:
        if (bootTimer &gt; 1.3 &amp;&amp; typewriter &gt;= string_length(text)){
            for (var i = 0; i &lt; array_length_1d(directories); i++){
                var name = directoriesNames[i];
                var dir = directories[i];
                if (name == "disk"){
                    if (instance_exists(dir)){
                        directoriesMessages[i] = "OK!";
                    }
                    else{
                        directoriesMessages[i] = "ERR";
                    }
                }
                else{
                    if (directory_exists(dir)){
                        directoriesMessages[i] = "OK!";
                    }
                    else{
                        directoriesMessages[i] = "ERR";
                    }
                }
            }
            bootSpeed = 1
            step++
            bootTimer = 0;
        }
        break;
        
    case 6:
        if (bootTimer &gt; 0.1 &amp;&amp; typewriter &gt;= string_length(text)){
            step++;
            bootTimer = 0;
        }
        break;
        
    case 7:
        if (bootTimer &gt; 2.5 &amp;&amp; typewriter &gt;= string_length(text)){
        
            audio_stop_sound(sound_sfx_dos_boot)
            if (enteringSetup) {
                room_goto(bios);
            }
            else{
            var fader = fadeToRoom(menu);
                fader.alpha = 1;
                fader.ending = true;
                room_goto(menu);
            }
            step++
            bootTimer = 0;
        }
        break;
}

if (typewriter &lt; string_length(text)){
    typewriter += (40/room_speed)*bootSpeed;
    if (floor(typewriter) != lastTw &amp;&amp; string_char_at(text, floor(typewriter)+1) != " "){
        playSfx(sound_sfx_typewriter);
        lastTw = floor(typewriter);
    }
}

if (step &gt; 0 &amp;&amp; !skipping &amp;&amp; !enteringSetup){
    if (keyboard_check_pressed(vk_delete)){
        enteringSetup = true;
    }
    else if (keyboard_check_pressed(vk_f2)){
        skipping = true;
    }
}


if (loaded &amp;&amp; skipping){
    audio_stop_sound(sound_sfx_dos_boot)
    var fader = fadeToRoom(menu, 2);
    fader.alpha = 1;
    fader.ending = true;
    room_goto(menu);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;
var h = view_hview;
var w = view_wview;
//PARAMS
var verticalSpacing = 8;
var interline = 

//BOOT DRAW

draw_set_color(c_gray);
draw_set_halign(fa_left);
draw_set_font(font_msdos);

text = '';

/// Main titles
if (step &gt; 0){
    text = "    RackNet Gaming System v1.00PG, An EmmetsUnited Ally#    Copyright (C) 2014-19 RackNet Games, Inc.";
    
    draw_sprite(sprite_menu_poweraward, 0, vx, vy);
    draw_sprite_ext(sprite_menu_energystar, 0, vx+w, vy+10, 1, 1, 0, c_white, 1);

    // Bottom text
    var bottomText = '';
    if (skipping){
        bottomText += "Skipping...";
    }
    else if (enteringSetup){
        bottomText += "Entering setup...";
    }
    else{
        bottomText += "Press [DEL] to enter setup, [F2] to skip this screen";
    }
    
    var time = date_current_datetime();
    bottomText += "#"+date_date_string(date_inc_year(time, 1000));
    
    bottomText += "-"+string(game_id)+"-"+string_upper(object_game.releaseType)+"-"+string(object_game.versionNumber);
    
    draw_set_valign(fa_bottom);
    draw_text(vx, vy+h-string_height(bottomText), bottomText);
}

/// Memory test
if (step &gt; 1){  
    text += "##";
    text += "#Operating System  : "+string("???");
    text += "#Memory Testing : "+padWithZeroes(string((floor(checkedRam))),4, " ")+" MB";
}

// Ram ok initializing audio
if (step &gt; 2){
    text+= " OK!";
    text+= "#AC status : "+string("OK");
    text += "##Initializing Audio Systems...";
}

/// Audiogroups have been loaded
if (step &gt; 3){
    text+= " OK!";
}

/// Checking paths
if (step &gt; 4){
    text+= "##";
    for (var i = 0; i &lt; array_length_1d(directories); i++){
        var name = directoriesNames[i];
        while(string_length(name) &lt; 20){
            name+= " ";
        }
        
        text+= "    Checking "+name+"   ...   ";
        
        if (step != 5){
            text+= "["+directoriesMessages[i]+"]";
        }
        
        text += "#";
    }
}
///Booting
if (step &gt; 5){
    text += "##Welcome to Emmets!#Launching game...";
}

/// Blinking underscore
if (bootTimer%0.5 &lt; 0.25){
    text += "_";
}

draw_set_valign(fa_top);

draw_text(vx, vy, string_delete(text, floor(typewriter)+1, string_length(text)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
