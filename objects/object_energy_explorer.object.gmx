<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_wall_ghost</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = HUD_DEPTH

var pos = snapToGrid(array(x+G_CELLSIZE/2,y+G_CELLSIZE/2));
x = pos[0];
y = pos[1];

debugSpeed = object_debug.explorerDebugSpeed;

//debug
timer = 0;

missionID = random(1000);
//powerObjective = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (debugSpeed &gt; 0){
    timer += 1/60;
}

if ((debugSpeed&gt; 0 &amp;&amp; timer &gt;= debugSpeed) || debugSpeed &lt;= 0){

    timer = 0;
    
    var bx = round(x/G_CELLSIZE);
    var by = round(y/G_CELLSIZE);
    var thisChunk = onChunk(array(bx,by), object_ground_pathway);
    
    var missionMap = ds_map_find_value(object_powerman.missions, missionID);
    
    if (missionMap == undefined){
        missionMap = ds_map_logcreate();
        ds_map_add_list(missionMap, "doneList", ds_list_create());
        ds_map_add_list(missionMap, "cost", ds_list_create());
        ds_map_add(missionMap, "source", false);
        ds_map_add_list(missionMap, "batteries", ds_list_create());
        ds_map_add_list(missionMap, "fuelSource", false);
        ds_map_add_map(object_powerman.missions, missionID, missionMap);
    }
    
    var doneList = ds_map_find_value(missionMap, "doneList");
    var totalCost = ds_map_find_value(missionMap, "cost");
    var source = ds_map_find_value(missionMap, "source");
    var batteries = ds_map_find_value(missionMap, "batteries");
    var fuelSource = ds_map_find_value(missionMap, "fuelSource");
    
    var coords = ds_list_create();
    
    //POWERING BUILDING
    var thisBuild = onChunk(array(bx,by), object_building_parent);
    
    if (instance_exists(thisBuild)){
        //show_debug_message(string(id)+" found building "+object_get_name(thisBuild.object_index)+" needing "+string(powerNeeded(thisBuild))+" power");
        if (
        
            (isPowerSource(thisBuild.object_index) &amp;&amp; isOperational(thisBuild))
                         || 
            isOperationalBattery(thisBuild)
            
            ){
            source = true;
            if (!isBattery(thisBuild.object_index)){
                fuelSource = true;
            }
            if (ds_list_find_index(batteries, thisBuild) &lt; 0 &amp;&amp; isOperationalBattery(thisBuild)){
                ds_list_add(batteries, thisBuild);
            }
        }
        if (ds_list_find_index(totalCost, thisBuild) &lt; 0 &amp;&amp; powerNeeded(thisBuild.object_index) &gt; 0 &amp;&amp; thisBuild.powerSwitch){
            ds_list_add(totalCost, thisBuild);
        }
    }
    
    //ENDOF
    
    ds_list_add(coords, array(bx, by+1), 
                        array(bx, by-1), 
                        array(bx-1, by), 
                        array(bx+1, by));
    
                        
    for (var j = 0; j &lt; 4; j++){
        var thisCoord = ds_list_find_value(coords, j);
        var col = onChunk(thisCoord, object_ground_pathway);
        
        if (instance_exists(col) &amp;&amp;
            ds_list_find_index(doneList, col) &lt; 0){
            
            var explorer = instance_create(thisCoord[0]*G_CELLSIZE, thisCoord[1]*G_CELLSIZE, object_energy_explorer);
            explorer.debugSpeed= debugSpeed;
            explorer.missionID = missionID;
            explorer.visible = visible;
            ds_list_add(doneList, col);
                
        }
    }
    var col = onChunk(array(bx, by), object_ground_pathway);
    if (ds_list_find_index(doneList, col) &lt; 0){
        ds_list_add(doneList, col);
    }
    
    ds_list_destroy(coords);
        
    ds_map_replace(missionMap, "doneList",doneList);
    ds_map_replace(missionMap, "cost", totalCost);
    ds_map_replace(missionMap, "source", source);
    ds_map_replace(missionMap, "batteries", batteries);
    ds_map_replace(missionMap, "fuelSource", fuelSource);
    
    //End of mission
    
    //If I am the last of my mission...
    count = 0;
    with (object_energy_explorer){
        if (missionID == other.missionID){
            other.count++;
        }
    }
    
    if (count &lt;= 1){
        var need = ds_list_size(totalCost);
        var pw = getStock("fuel")*fuelSource + ds_list_size(batteries)*BATTERY_POWER;
        var turnOff = ds_list_size(totalCost) &gt; pw || !source || pw &lt; 1;
        
        for (var i = 0; i &lt; ds_list_size(doneList); i++){
            var thisItem = ds_list_find_value(doneList,i);
            if (instance_exists(thisItem)){
                var ii = getIsoIndex(array(thisItem.x, thisItem.y));
                var col = onChunk(ii, object_building_parent);
                
                if (turnOff){
                        thisItem.powered = false;
                        if (instance_exists(col)){
                            col.powered = false;
                            if (!audio_is_playing(sound_sfx_energy_off)){
                                playSfx(sound_sfx_energy_off, false, col);
                            }
                        }
                    }
                else{
                    thisItem.powered = true;
                    if (instance_exists(col)){
                        if (col.powerSwitch){
                            col.powered = true;
                            if (!audio_is_playing(sound_sfx_energy_on)){
                                playSfx(sound_sfx_energy_on, false, col);
                            }
                        }
                    }
                }
            }
        }
        
        if (turnOff &amp;&amp; source){
            warnTip(translate("WARNING", "insufficientPower"));
        }
        
        var missionName = string(missionID);
        if (instance_exists(missionID)){
            missionName = object_get_name(missionID.object_index);
        }
        log("Report : Finished mission "+missionName+". Cost : "+string(ds_list_size(missionMap[? "cost"]))+" | Source : "+string(missionMap[? "source"])+" | Fuelsource : "+string(missionMap[? "fuelSource"])+" | Batteries : "+string(ds_list_size(missionMap[? "batteries"])) , "NRG_EXPLORER");
        
        ds_list_destroy(totalCost);
        ds_list_destroy(batteries);
        ds_list_destroy(doneList);
        ds_map_logdestroy(missionMap);
        ds_map_delete(object_powerman.missions, missionID);
    }
    
    instance_destroy();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debugSpeed &lt;= 0){
    exit;
}
var pos = array(x,y);

draw_set_color(make_color_hsv(missionID%255, 255, 255));

    pos = sysToDisplay(pos);
    var top = pos;
    var left = array(pos[0]-G_CELLSIZE, pos[1] + G_CELLSIZE/2);
    var right = array(pos[0]+G_CELLSIZE, pos[1] + G_CELLSIZE/2);
    var bottom = array(pos[0], pos[1] + G_CELLSIZE);
    
    draw_line(top[0], top[1], left[0], left[1]);
    draw_line(left[0], left[1], bottom[0], bottom[1]);
    draw_line(bottom[0], bottom[1], right[0], right[1]);
    draw_line(top[0], top[1], right[0], right[1]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
