<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_main_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();

/// Menu buttons
buttons = array(MAIN_PLAY);
if (!debugParamGet("demoMode"))  buttons[array_length_1d(buttons)] = MAIN_OPTIONS;
buttons[array_length_1d(buttons)] = MAIN_CREDITS;
if (!debugParamGet("demoMode"))   buttons[array_length_1d(buttons)] = MAIN_QUIT;

/// Layout
blockPadding = 6;
buttonZoneWidth = 96;
buttonHeight = 24;
buttonHSpacing = 12;

blockWidth = buttonZoneWidth+blockPadding*2;
blockHeight = buttonHeight*array_length_1d(buttons) 
                + buttonHSpacing*(array_length_1d(buttons)-1)
                + blockPadding*2;
                
blockPosition = array(
                    SCREEN_WIDTH/2-blockWidth/2,   
                    SCREEN_HEIGHT/2-blockHeight/2,
                    SCREEN_WIDTH/2+blockWidth/2,  
                    SCREEN_HEIGHT/2+blockHeight/2       
);

hoveredButton = noone;
gridColor = c_white;
wasMenuing = object_game.menuing;

if (room == menu){
    bgmFade(sound_bgm_menu, 500);
}
else{
    object_game.menuing = true;
    depth = HUD_DEPTH-2;
}

// XPad window 
if (gamepad_is_connected(0)){
    var window = createWindow(
        translate("GENERAL_UI", "notice"),
        translate("GENERAL_UI", "xPad")
    );
    window.width = 300;
    window.height = 300;
    window.x = (SCREEN_WIDTH-window.width)/2;
    window.y = (SCREEN_HEIGHT-window.height)/2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != menu &amp;&amp; instance_exists(object_game)){
    object_game.menuing = wasMenuing;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;

var hoveredSomething = false;

for (var i = 0; i &lt; array_length_1d(buttons); i++){
    var buttonPos = array(
        vx+SCREEN_WIDTH/2 - buttonZoneWidth/2 + blockPadding,
        vy+SCREEN_HEIGHT/2 + i*(buttonHeight+buttonHSpacing) - (array_length_1d(buttons)*(buttonHeight+buttonHSpacing))/2 + blockPadding,
        vx+SCREEN_WIDTH/2 + buttonZoneWidth/2 - blockPadding,
        vy+SCREEN_HEIGHT/2 + i*(buttonHSpacing) + (i+1)*buttonHeight + blockPadding  - (array_length_1d(buttons)*(buttonHeight+buttonHSpacing))/2
    ); 
                   
    if (point_in_rectangle(global.i[I_X], global.i[I_Y], buttonPos[0], buttonPos[1], buttonPos[2], buttonPos[3])){
        hoveredButton = buttons[i];
        hoveredSomething = true;
        if (global.i[I_SELECT]){
            playSfx(sound_sfx_select);
            switch(buttons[i]){
                case MAIN_PLAY:
                    fadeToRoom(station_main, 1);
                    bgmFade();
                    if (!object_game.offlineMode &amp;&amp; object_station.companyLoaded){
                        onlineGetRanking(object_station.company[? "cid"]);
                    }
                    break;
                    
                case MAIN_CREDITS:
                    instance_create(0,0,object_credits);
                    break;
                    
                case MAIN_OPTIONS:
                    instance_create(0,0, object_ui_window_options);
                    break;
                    
                case MAIN_QUIT:
                    if (room == menu){
                        game_end();
                    }
                    else{
                        createWindow(
                            translate('GENERAL_UI', 'notice'),
                            translate('INGAME', 'unsavedData'),
                            array(
                                array(translate("MAIN_MENU", MAIN_RESUME), translate("MAIN_MENU", MAIN_QUIT)),
                                array(closeWindow, endGame),
                                array(noone, noone)
                            )
                        );
                    }
                    break;
                    
                case MAIN_RESUME:
                    closeWindow();
                    break;
                
                case MAIN_HELP:
                    showHelp();
                    break;
                    
                case MAIN_GIVEUP:
                    createWindow(translate('GENERAL_UI', 'notice'), 
                        translate('INGAME', 'exitCave'),
                        array(
                            array("Cancel", "Confirm"),
                            array(closeWindow, gameOver),
                            array(noone, ENDING_TELEPORT)
                        )
                    );
                    break;
            }
        }
    }
}

if (!hoveredSomething){
    hoveredButton = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;
background_colour = c_black;

if (room == menu){
/// Step 0 - Draw checkerboard in background

    // lasergrid
    draw_sprite_part_ext(sprite_bg_lasergrid, 0, 
        (get_timer()/50000)%(sprite_get_width(sprite_bg_lasergrid)-SCREEN_WIDTH), 
        (get_timer()/50000)%(sprite_get_height(sprite_bg_lasergrid)-SCREEN_HEIGHT), 
        SCREEN_WIDTH, SCREEN_HEIGHT, vx, vy, 1, 1, gridColor, 1);
}                      
else{
    draw_sprite(sprite_ui_checkerboard, 0, vx, vy);
}  
draw_set_font(font_ui);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

/// Step 1 - Draw block and borders and shadow
drawBlock(
        array(vx+blockPosition[0],
                vy+blockPosition[1],
                vx+blockPosition[2],
                vy+blockPosition[3]
                ), 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW()), 
        3
);

/// Step 2 - Draw buttons
for (var i = 0; i &lt; array_length_1d(buttons); i++){
    var buttonPos = array(
        vx+SCREEN_WIDTH/2 - buttonZoneWidth/2 + blockPadding,
        vy+SCREEN_HEIGHT/2 + i*(buttonHeight+buttonHSpacing) - (array_length_1d(buttons)*(buttonHeight+buttonHSpacing))/2 + blockPadding,
        vx+SCREEN_WIDTH/2 + buttonZoneWidth/2 - blockPadding,
        vy+SCREEN_HEIGHT/2 + i*(buttonHSpacing) + (i+1)*buttonHeight + blockPadding  - (array_length_1d(buttons)*(buttonHeight+buttonHSpacing))/2
    ); 
    
    var colors = array(COLOR_FOREGROUND(),
                        COLOR_BACKGROUND(), 
                        COLOR_SHADOW());
    
    if (hoveredButton == buttons[i]){
        colors = array(COLOR_BACKGROUND(),
                        COLOR_FOREGROUND(), 
                        COLOR_SHADOW());
    }
                        
    drawBlock(buttonPos, colors, 3);
    drawShadowedText(floor(mean(buttonPos[0], buttonPos[2])), floor(mean(buttonPos[1], buttonPos[3])), translate("MAIN_MENU", buttons[i]), colors);
}

/// Step 3 - Demo watermark

/// DEMO watermark
if (debugParamGet("demoMode")){
    draw_set_font(font_ui);
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    var str = "[DEMO]";
    if (object_game.demoTimer &gt; DEMO_TIMEOUT*0.9) {
        str += " [RESET IN "+string(DEMO_TIMEOUT-ceil(object_game.demoTimer));
    }
    drawShadowedText(vx+UI_LEFT_BAND, vy+h-UI_LEFT_BAND, str, array(COLOR_FOREGROUND(), COLOR_BACKGROUND(), COLOR_SHADOW()));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
