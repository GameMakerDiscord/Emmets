<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_window</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object_ui_window_simple</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = HUD_DEPTH-4;
width = 480;
height = 320;
x = (SCREEN_WIDTH-width)/2;
y = (SCREEN_HEIGHT-height)/2;
text = string_replace(translate("GENERAL_UI", "help")+"###", "%s", object_game.releaseType+"."+string(object_game.versionNumber));
title = translate("HEADBAND_BUTTONS", "help");
font = font_ui;
closeButton = true;
windowBarWMargin = 5;
textWMargin = 10;
textInteriorPadding=5;
interiorPadding = 8;
customInterior = false;
             
controlButtonsSize = 0;
buttonZoneHeight = 32;
buttonMargin = 4;
buttonWSpacing = 16;
buttonWidth = 64;
buttonHeight = buttonZoneHeight-buttonMargin;

buttons = array(translate("GENERAL_UI", "ok"));
buttonsFunctions = array(closeWindow);
buttonsParameters = array(id);

scrollValue = 0;
hovered = noone;
 
colors = array(COLOR_FOREGROUND(),
                    COLOR_BACKGROUND(), 
                    COLOR_SHADOW());


hoveredColors = array(COLOR_BACKGROUND(),
                    COLOR_FOREGROUND(), 
                    COLOR_SHADOW());
                    
disabledColors = array(COLOR_BACKGROUND(),
                    COLOR_BACKGROUND(), 
                    COLOR_SHADOW());

maxScroll = 1;

wasMenuing = object_game.menuing;
object_game.menuing = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( instance_exists(object_game)){
    object_game.menuing = wasMenuing;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;

var left = x+UI_LEFT_BAND+interiorPadding;
var right = x+width-interiorPadding-UI_RIGHT_BAND;
var top = y+UI_TOP_BAND+interiorPadding;
var bottom = y+height-UI_LEFT_BAND;


x = vx + (SCREEN_WIDTH-width)/2;
y = vy + (SCREEN_HEIGHT-height)/2;


colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
                
    
var startPoint = x+width/2;
var totalWidth = width-interiorPadding*2-buttonWidth*2;
var hoveredSomething = false;
for (var i =0; i &lt; array_length_1d(buttons); i++){
    var buttonCenterX = startPoint;
    if (array_length_1d(buttons) &gt; 1){
        buttonCenterX = startPoint - totalWidth/2 + (totalWidth/(array_length_1d(buttons)-1))*i;
    }
    var buttonCenterY = y+height-buttonMargin/2 - buttonZoneHeight/2;
    
   
    if (point_in_rectangle(global.i[I_X], global.i[I_Y],
    buttonCenterX-buttonWidth/2, buttonCenterY-buttonHeight/2, buttonCenterX+buttonWidth/2, buttonCenterY+buttonHeight/2)){
    
        hovered = i;
        hoveredSomething = true;
        
        if (global.i[I_SELECT]){
            playSfx(sound_sfx_select);
            script_execute(buttonsFunctions[i], buttonsParameters[i]);
        }
    }  
}
if (!hoveredSomething){
    hovered = noone;
}
var interior = array(textInteriorPadding, textInteriorPadding, right-left-textInteriorPadding, bottom-top-buttonMargin - buttonZoneHeight- textInteriorPadding);

            
draw_set_font(font);
var th = string_height_ext(text, -1, interior[2] - interior[0]-textInteriorPadding*2);
maxScroll = th-(bottom-top-textInteriorPadding*2-buttonMargin-buttonZoneHeight);
    
if (mouseIn(array(
                interior[0]+left,
                interior[1]+top,
                interior[2]+left,
                interior[3]+top
                ))){
    
    if (global.i[I_SCROLL_UP]){
        scrollValue -= 8;
        scrollValue = max(scrollValue, 0);
    }
    else if (global.i[I_SCROLL_DOWN]){
        scrollValue += 8;
        scrollValue = min(scrollValue, maxScroll);
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_name);

var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;

var left = x+UI_LEFT_BAND+interiorPadding;
var right = x+width-interiorPadding-UI_RIGHT_BAND;
var top = y+UI_TOP_BAND+interiorPadding;
var bottom = y+height-UI_LEFT_BAND;

var tw = string_width(title);

/// 0. Draw checker behind the window
if (room == loading || (room == global.gameRoom &amp;&amp; object_game.inGame = false)){
    draw_set_color(COLOR_BACKGROUND());
    draw_rectangle(vx, vy, vx+w, vy+h, false);
}
draw_sprite(sprite_ui_checkerboard, 0, vx, vy);

/// 1. Draw shadow and mainframe
draw_set_color(COLOR_SHADOW());
draw_rectangle(x+2, y+2, x+width+2, y+height+2, false);

draw_set_color(COLOR_BACKGROUND());
draw_rectangle(x, y, x+width, y+height, false);

/// 2. Draw titlebar
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

draw_set_color(COLOR_SHADOW());
draw_rectangle(x+windowBarWMargin+2, y+windowBarWMargin+2, x+width/2-tw/2+2-textWMargin, y+windowBarWMargin+1+2, false);
draw_rectangle(x+windowBarWMargin+2, y-windowBarWMargin+17+2, x+width/2-tw/2+2-textWMargin, y-windowBarWMargin+17+1+2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(x+windowBarWMargin, y+windowBarWMargin, x+width/2-tw/2-textWMargin, y+windowBarWMargin+1, false);
draw_rectangle(x+windowBarWMargin, y-windowBarWMargin+17, x+width/2-tw/2-textWMargin, y-windowBarWMargin+17+1, false);

draw_set_color(COLOR_SHADOW());
draw_rectangle(x+width/2+tw/2+2+textWMargin, y+windowBarWMargin+2, x+width-windowBarWMargin+2-controlButtonsSize, y+windowBarWMargin+1+2, false);
draw_rectangle(x+width/2+tw/2+2+textWMargin, y-windowBarWMargin+17+2, x+width-windowBarWMargin+2-controlButtonsSize, y-windowBarWMargin+17+1+2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(x+width/2+tw/2+textWMargin, y+windowBarWMargin, x+width-windowBarWMargin-controlButtonsSize, y+windowBarWMargin+1, false);
draw_rectangle(x+width/2+tw/2+textWMargin, y-windowBarWMargin+17, x+width-windowBarWMargin-controlButtonsSize, y-windowBarWMargin+17+1, false);

draw_set_color(COLOR_SHADOW());
draw_text(floor(x+width/2 +2), floor(y+windowBarWMargin+2 +2), title);
draw_set_color(COLOR_FOREGROUND());
draw_text(floor(x+width/2), floor(y+windowBarWMargin+2), title);

/// 3. Window interior
draw_set_font(font_tiniest);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
drawShadowedText(floormean(left, right), top, stripAccents(translate("GENERAL_UI", "scrollHelp")));
draw_set_font(font_ui);
var interior = array(textInteriorPadding, textInteriorPadding, right-left-textInteriorPadding, bottom-top-buttonMargin - buttonZoneHeight- textInteriorPadding);
var th = string_height_ext(text, -1, interior[2] - interior[0]-textInteriorPadding*2);
var surf = surface_create(right-left, th+textInteriorPadding*2);
drawBorders(array(
                interior[0]+left,
                interior[1]+top,
                interior[2]+left,
                interior[3]+top
                ), colors);
                
if (surface_exists(surf)){
    surface_set_target(surf);
    
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
    drawShadowedText(interior[0]+textInteriorPadding, interior[1]+textInteriorPadding, text, colors, interior[2] - interior[0]-textInteriorPadding*2);

    surface_reset_target();
    
    draw_surface_part(surf, 0, scrollValue, surface_get_width(surf), bottom-top-buttonMargin - buttonZoneHeight-textInteriorPadding*2, left, top+textInteriorPadding);
    surface_free(surf);
}

/// 3.5 elevator
var scrollPercent = scrollValue/maxScroll;

var block = array(
                interior[2]+left,
                clamp(top+scrollPercent*(bottom-top-textInteriorPadding*2-buttonZoneHeight-buttonMargin)-3, top, bottom),
                interior[2]+left+3,
                clamp(top+scrollPercent*(bottom-top-textInteriorPadding*2-buttonZoneHeight-buttonMargin)+3, top, bottom)
            );
drawBlock(block, colors, 1);

/// 4. Buttons
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

var startPoint = x+width/2;
var totalWidth = width-interiorPadding*2-buttonWidth*2;

for (var i =0; i &lt; array_length_1d(buttons); i++){
    var buttonCenterX = startPoint;
    if (array_length_1d(buttons) &gt; 1){
        buttonCenterX = startPoint - totalWidth/2 + (totalWidth/(array_length_1d(buttons)-1))*i;
    }
    var buttonCenterY = y+height-buttonMargin/2 - buttonZoneHeight/2;
    var buttonText = buttons[i];
    
    draw_set_color(COLOR_SHADOW());
    draw_rectangle(buttonCenterX-buttonWidth/2 +1, buttonCenterY-buttonHeight/2 +1, buttonCenterX+buttonWidth/2 +1, buttonCenterY+buttonHeight/2 +1, false);
    
    draw_set_color(COLOR_BACKGROUND());
    if (hovered == i){
        draw_set_color(COLOR_FOREGROUND());
    }
    draw_rectangle(buttonCenterX-buttonWidth/2, buttonCenterY-buttonHeight/2, buttonCenterX+buttonWidth/2, buttonCenterY+buttonHeight/2, false);
    
    draw_set_color(COLOR_FOREGROUND());
    if (hovered == i){
        draw_set_color(COLOR_BACKGROUND());
    }
    draw_rectangle(buttonCenterX-buttonWidth/2, buttonCenterY-buttonHeight/2, buttonCenterX+buttonWidth/2, buttonCenterY+buttonHeight/2, true);
    
    var colorsUsed = colors;
    if (hovered == i){
        colorsUsed = hoveredColors;
    }
    
    drawShadowedText(buttonCenterX, buttonCenterY, buttonText, colorsUsed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
