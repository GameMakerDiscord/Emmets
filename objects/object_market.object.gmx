<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_market</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>object_market</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();

marketQueue = ds_list_create();
marketCrew = ds_list_create();
marketHistory = 20;

lastSales = ds_map_logcreate();

initializeMarket(marketHistory);

//LA QUEUE S UPDATE A CHAQUE FOIS QU' UN JOUEUR SUBMIT OU VEND DES RESSOURCES
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(marketQueue);
ds_list_destroy(marketCrew);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = object_debug.debugMarket;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUGGING
depth = CURSOR_DEPTH+100;
var vx = view_xview;
var vy = view_yview;
var h = view_hview;
var w = view_wview;

var bounds =  getMarketBounds();
var maxValue = bounds[0];
var minValue = bounds[1];

var maxHeight = h/1.2;
var maxWidth = w/1.2;
var wm = (w-maxWidth)/2;
var hm = (h-maxHeight)/2;

draw_set_color(c_black);
draw_rectangle(vx+wm, vy+hm, vx+w-wm, vy+h-hm, false);
draw_set_color(c_white);
draw_rectangle(vx+wm, vy+hm, vx+w-wm, vy+h-hm, true);


var rscs = getFancyMaterials();

for (var j = 0; j &lt; array_length_1d(rscs); j++){

    var rsc = rscs[j];
    var color = colorSum(rsc);
    
    draw_set_color(color);
    draw_set_font(font_tiniest);
    draw_set_valign(fa_bottom);
    
    for (var i = 0; i &lt; marketHistory; i++){
        var step = marketQueue[| i];
        var value = step[? rsc];
        
        var pos = array(
            vx + wm + (i/((marketHistory)))*(maxWidth), 
            vy + hm +  maxHeight- reverseLerp(minValue, maxValue, value)*(maxHeight-hm));
        
        if (i == marketHistory-1){
            draw_set_halign(fa_left);
            draw_text(pos[0]+8, pos[1], string(value)+"#"+string(getRessource(rsc, "price"))+"#"+string(value*getRessource(rsc, "price"))+"#"+string(getCurrentPrice(rsc)));
        }
         
        if (i &gt; 0){
            var backStep = marketQueue[| i-1];
            var lastValue = backStep[? rsc];
            var oldPos = array(
                vx + wm + ((i-1)/((marketHistory)))*(maxWidth), 
                vy + hm + maxHeight- reverseLerp(minValue, maxValue, lastValue)*(maxHeight-hm));
        
            draw_set_halign(fa_center);
            draw_text(pos[0], pos[1]-16, value);
            draw_line(pos[0], pos[1],
                    oldPos[0], oldPos[1]);
        }
        else{
            draw_set_halign(fa_right);
            draw_text(pos[0]-16, pos[1], rsc);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
