<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_station</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>object_station</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();
depth = HUD_DEPTH;

//stats
emmetRiskPrime = 1200;  // Emmet risk prime - salary
coringPricePerLevel = 1600; // Initial price per level of every mission

///company holds data about the company - name, quote, etc
company = ds_map_logcreate();

/// HARD STOCK
stocks = ds_map_logcreate();

var ressourcesArr = getFancyMaterials();

for (var i = 0; i &lt; array_length_1d(ressourcesArr); i++){
    ds_map_add(stocks, ressourcesArr[i], 0);
}

//Crew is the emmets composition
crew = ds_list_create();

companyLoaded = false;
color = DEFAULT_COLOR;

margin = 2;

ranking = "-/-";
stationStep = STATION_HOME;

/// UI
interiorPadding = 8;
textInteriorPadding = 5;
stationBarSafety = 16;

buttonHSpacing = 6;
buttonMargin = 4;
buttonWSpacing = 12;
buttonWidth = 64;
buttonZoneHeight = 32;
buttonHeight = buttonZoneHeight-buttonMargin;

hoveringOK = false;

colors = array(COLOR_FOREGROUND(),
                    COLOR_BACKGROUND(), 
                    COLOR_SHADOW());


hoveredColors = array(COLOR_BACKGROUND(),
                    COLOR_FOREGROUND(), 
                    COLOR_SHADOW());


greyedColors = array(COLOR_BACKGROUND(),
                    COLOR_BACKGROUND(), 
                    COLOR_SHADOW());
                    
/// CHOOSE STOCK
removeButtons = array(-1, -5, -10);
hoveredRemButton = noone;
bottomRemstockDistance = 144;
lineSpacing = 3;
heightBeforeGauge = 32;
gaugeHeight = 8;
selectedMaterial = noone;
listWidthPercent = 0.5;
listWidth = (SCREEN_WIDTH-interiorPadding*2)*listWidthPercent;
listDetailSpacing = 12;
connectEUAfterStock = false;
scrapBonus = 0;
loreTypewriter = 0;
lastTypewriter = 0;
typewriterSpeed = 20;

/// HOME
homeCompanyLeftPadding = 0;
homeTopTextMargin = 32;
homeHeight = 102;
homeButtonWidth = 240;
homeButtonZoneHeight = 32;
homeButtonRightMargin = 32;

homeLeftBoxPadding = 24;
homeLeftBoxHeight = 240;
homeLeftBoxRight = floor(SCREEN_WIDTH/3);
homeCompanyInfos = array(
        "stationLevel",
        "crewSize",
        "creationDate",
        "leaderboardPosition",
        "capital"
);
homeButtons = array(
                "connectEmmetsUnited",
                "manageCrew",
                "manageStocks",
                "stationHistory",
                "stationRanking",
                "dropStation"
            );
hoveredHomeCreateCompany = false;
hoveredHomeExplore = false;
hoveredHomeBack = false;
greyedHomeExplore = false;
hoveredHomeButton = noone;

/// CREW MANAGER
crewManagerSelectedEmmet = noone;
crewControlButtons = array("moveUp", "moveDown", "heal", "rename", "fire");
crewControlBottomDistance = 240;
hoveredCrewControlButton = noone;
greyedCrewControlButtons = "";
scrollCapacity = 22;
scrollStep = 0;
scrollHandleHeight = 18;
hoveredBottomHandle = false;
hoveredTopHandle = false;
keyMoved = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF NOT STATION MAIN
if (room != station_main){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF WINDOWS ONTOP
willExit = anotherWindowOnTop();
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;
if (stationStep == STATION_NONE){
    stationStep = STATION_HOME;
    exit;
}
colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
                
if (stationStep != STATION_CHOOSE_STOCK){
    selectedMaterial = noone;
}
background_colour =  COLOR_BACKGROUND();

switch (stationStep){
    
    case STATION_MANAGE_CREW:
        
        var left = vx+UI_LEFT_BAND+interiorPadding;
        var right = vx+listWidth;
        var top = vy+UI_TOP_BAND+interiorPadding;
        var bottom = vy+h-UI_LEFT_BAND-interiorPadding-stationBarSafety;
        
        /// LEFT LIST
        var block = array(left,
                        top,
                        right,
                        vy+h-UI_LEFT_BAND-interiorPadding-stationBarSafety);
                
        draw_set_font(font_ui);
        var lineHeight = string_height("A")+lineSpacing;
        var firstLineMargin = lineHeight/2;
        var spriteMaxSize = 4;
        
        var skips = 0;
        
        /// Handles
        var upperHandle = array(left, top+textInteriorPadding+lineHeight, right, top+textInteriorPadding+lineHeight+scrollHandleHeight);
        if (mouseIn(upperHandle) &amp;&amp; scrollStep &gt; 0){
            hoveredTopHandle = true;
            if (global.i[I_SELECT]){
                playSfx(sound_sfx_select);
                scrollStep--;
            }
        }
        else{
            hoveredTopHandle = false;
        }
    
        var bottomHandle = array(left, bottom-scrollHandleHeight, right, bottom);
        if (mouseIn(bottomHandle)  &amp;&amp; scrollStep &lt; ds_list_size(crew)-scrollCapacity){
            hoveredBottomHandle = true;
            if (global.i[I_SELECT] ){
                playSfx(sound_sfx_select);
                scrollStep++;
            }
        }
        else{
            hoveredBottomHandle = false;
        }
        
        
        for (var i = -1 + scrollStep; i&lt; min(ds_list_size(crew), scrollCapacity) + scrollStep; i++){
            if (i == scrollStep-1){
                continue;
            }            
            lineHeight = string_height("A")+lineSpacing;
            
            var crewMember = crew[| i];
            var pos = array(left, 
                    top+textInteriorPadding+lineHeight*(i+1-skips-scrollStep)+firstLineMargin+scrollHandleHeight, 
                    right, 
                    top+lineHeight*(i+2-skips-scrollStep)+lineHeight/2+firstLineMargin+scrollHandleHeight);
            
            if (mouseIn(pos)){
                if (global.i[I_SELECT]){
                    playSfx(sound_sfx_select);
                    crewManagerSelectedEmmet = i;
                }
            }
            
        }
        
        /// RIGHT DETAILS AND CONTROLLER
        var left = vx+listWidth+listDetailSpacing;
        var right = vx+w-interiorPadding-UI_RIGHT_BAND;
        
        if (crewManagerSelectedEmmet &gt;= 0){
        
            var crewMember = crew[| crewManagerSelectedEmmet];
            
            var canvasSize = 48;
            
            draw_set_font(font_ui_big);
            var height = string_height("A");
            
            draw_set_font(font_ui);
            var littleHeight = string_height("A");
            
            var infoBoxDimensions = array(left, top+canvasSize+lineSpacing*2, right, top+height+littleHeight+lineSpacing*2+(lineHeight)*7);
            
            /// CONTROL BUTTONS
            draw_set_valign(fa_middle);
            draw_set_halign(fa_center);
            draw_set_font(font_ui);
            
            var top = infoBoxDimensions[3]+lineHeight;;
            var hoveredSomething = false;
            
            for (var i = 0; i &lt; array_length_1d(crewControlButtons); i++){
                var box = array(
                        left,
                        top+(buttonZoneHeight*i)+buttonMargin,
                        right,
                        top+(buttonZoneHeight*(i+1)) 
                    );
                if (crewControlButtons[i] == "moveUp"){
                    if (crewManagerSelectedEmmet &gt; 0){
                        greyedCrewControlButtons = string_replace_all(greyedCrewControlButtons, crewControlButtons[i], '');
                    }
                    else if (!string_pos(crewControlButtons[i], greyedCrewControlButtons) &gt; 0){
                        greyedCrewControlButtons += crewControlButtons[i];
                    }
                }
                else 
                if (crewControlButtons[i] == "moveDown"){
                    if (crewManagerSelectedEmmet &lt; ds_list_size(crew)-1){
                        greyedCrewControlButtons = string_replace_all(greyedCrewControlButtons, crewControlButtons[i], '');
                    }
                    else if (!string_pos(crewControlButtons[i], greyedCrewControlButtons) &gt; 0){
                        greyedCrewControlButtons += crewControlButtons[i];
                    }
                }
                
                else 
                if (crewControlButtons[i] == "heal"){
                    if (crewMember[? "hp"] &lt; 100){
                        greyedCrewControlButtons = string_replace_all(greyedCrewControlButtons, crewControlButtons[i], '');
                    }
                    else if (object_station.company[? "funds"] &lt; 0 || !string_pos(crewControlButtons[i], greyedCrewControlButtons) &gt; 0){
                        greyedCrewControlButtons += crewControlButtons[i];
                    }
                }
                else 
                if (crewControlButtons[i] == "fire"){
                    if (object_station.company[? "funds"] &gt;= getPayOff(crewMember)){
                        greyedCrewControlButtons = string_replace_all(greyedCrewControlButtons, crewControlButtons[i], '');
                    }
                    else if (!string_pos(crewControlButtons[i], greyedCrewControlButtons) &gt; 0){
                        greyedCrewControlButtons += crewControlButtons[i];
                    }
                }
                else 
                if (crewControlButtons[i] == "rename"){
                    if (object_station.company[? "funds"] &gt;= EMMET_MARKET_PRICE*0.1){
                        greyedCrewControlButtons = string_replace_all(greyedCrewControlButtons, crewControlButtons[i], '');
                    }
                    else if (!string_pos(crewControlButtons[i], greyedCrewControlButtons) &gt; 0){
                        greyedCrewControlButtons += crewControlButtons[i];
                    }
                }
                                                
                var greyed = string_pos(crewControlButtons[i], greyedCrewControlButtons) &gt; 0 ;
                
                if (mouseIn(box) &amp;&amp; !greyed){
                    hoveredCrewControlButton = crewControlButtons[i];
                    hoveredSomething = true;
                    if (global.i[I_SELECT]){
                        playSfx(sound_sfx_select);
                        switch (crewControlButtons[i]){
                        
                            case "heal":
                                healCrewMember(crewMember, object_station.company[? "funds"]);
                                break;
                                
                            case "fire":
                                fireCrewMember(crewMember);
                                crewManagerSelectedEmmet = noone;
                                break;
                                
                            case "rename":
                                var rename = instance_create(0,0,object_ui_window_rename);
                                rename.nameContent = crewMember[? "name"];
                                rename.crewMember = crewMember;
                                price = EMMET_MARKET_PRICE*0.1;
                                remFunds(price);
                                addToStat("moneySpentOnNaming", price);
                                break;
                        }
                        
                    /// up and down
                        if (crewControlButtons[i] == "moveUp"){
                            var tempCM = crew[| crewManagerSelectedEmmet-1];
                            crew[| crewManagerSelectedEmmet-1] = crewMember;
                            ds_list_mark_as_map( crew, crewManagerSelectedEmmet-1);
                            crew[| crewManagerSelectedEmmet] = tempCM;
                            ds_list_mark_as_map( crew, crewManagerSelectedEmmet);
                            crewManagerSelectedEmmet--;
                        }
                        else if(crewControlButtons[i] == "moveDown"){
                            var tempCM = crew[| crewManagerSelectedEmmet+1];
                            crew[| crewManagerSelectedEmmet+1] = crewMember;
                            ds_list_mark_as_map( crew, crewManagerSelectedEmmet+1);
                            crew[| crewManagerSelectedEmmet] = tempCM;
                            ds_list_mark_as_map( crew, crewManagerSelectedEmmet);
                            crewManagerSelectedEmmet++;
                        }
                    }
                }            
            }            
            if (!hoveredSomething){
               hoveredCrewControlButton = noone; 
            }
            
            /// Up and down keys
            if (global.i[I_UP] &amp;&amp; crewManagerSelectedEmmet &gt; 0){
                if (!keyMoved){
                    var tempCM = crew[| crewManagerSelectedEmmet-1];
                    crew[| crewManagerSelectedEmmet-1] = crewMember;
                    ds_list_mark_as_map( crew, crewManagerSelectedEmmet-1);
                    crew[| crewManagerSelectedEmmet] = tempCM;
                    ds_list_mark_as_map( crew, crewManagerSelectedEmmet);
                    crewManagerSelectedEmmet--;
                    keyMoved = true;
                }
            }
            else if(global.i[I_DOWN] &amp;&amp; crewManagerSelectedEmmet &lt; ds_list_size(crew)-1){
                if (!keyMoved){
                    var tempCM = crew[| crewManagerSelectedEmmet+1];
                    crew[| crewManagerSelectedEmmet+1] = crewMember;
                    ds_list_mark_as_map( crew, crewManagerSelectedEmmet+1);
                    crew[| crewManagerSelectedEmmet] = tempCM;
                    ds_list_mark_as_map( crew, crewManagerSelectedEmmet);
                    crewManagerSelectedEmmet++;
                    keyMoved = true;
                }
            }
            else{
                keyMoved = false;
            }
        }
        
            
        draw_set_font(font_ui);
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        
        var top = vy + h - UI_LEFT_BAND-bottomRemstockDistance + buttonZoneHeight;
                        
        var okBox = array(left, vy+h-interiorPadding-buttonZoneHeight-UI_LEFT_BAND-stationBarSafety, right, vy+h-interiorPadding-UI_LEFT_BAND-stationBarSafety);
       
        if (mouseIn(okBox)){
            hoveringOK = true;
            if (global.i[I_SELECT]){
                stationStep = STATION_HOME;
                playSfx(sound_sfx_select);
                saveCrew();
            }
        }
        else{
            hoveringOK = false;
        }
        
        break;

    /// CHOOSE STOCK - What to drop and what to keep
    case STATION_CHOOSE_STOCK:
    
        if (scrapBonus &gt; 0 &amp;&amp; checkMarker("stock")){
            createWindow(translate("GENERAL_UI", "notice"), string_replace(translate("CHOOSE_STOCK", "scrapBonusText"), "%s", "₵"+numberFormat(scrapBonus)));
            addFunds(scrapBonus);
            playSfx(sound_sfx_notice);
            scrapBonus = 0;
        }
        else if (!checkMarker("stock")){
            createWindow(
                translate("GENERAL_UI", "notice"),
                translate("MARKERS", "stock")
                );
            validateMarker("stock");
        }
    
        var left = vx+UI_LEFT_BAND+interiorPadding;
        var right = vx+listWidth;
        var top = vy+UI_TOP_BAND+interiorPadding;
        var bottom = vy+h-UI_LEFT_BAND-interiorPadding-stationBarSafety;
        
        var rscs = getFancyMaterials();
        var buildings = getBuildings();
        draw_set_font(font_ui);
        var lineHeight = string_height("A")+lineSpacing;
        var firstLineMargin = lineHeight/2;
        var skips = 0;
    
        for (var i = 0; i&lt; array_length_1d(rscs)+array_length_1d(buildings); i++){
        
           
            var sprite, rsc, text, stockText,stock;
            var building=false;
            
            if (i &lt; array_length_1d(rscs)){
                rsc = rscs[i];
                sprite =  getRessource(rsc, "sprite");
                text = translate("RSC", rsc);
                stock = getHardStock(rsc);
                stockText = string(stock)+"0 kg";
            }
            else{
                rsc = buildings[i-array_length_1d(rscs)]
                sprite = getBuilding(rsc, "sprite");
                text = translate(BUILDING, object_get_name(rsc));
                stock = getHardStock(rsc);
                stockText = "x"+string(stock)+"";
                building = true;
            }
            
            if (stock &lt;= 0){
                skips++;
                continue;
            }
            
            if (global.i[I_SELECT]){
                if (point_in_rectangle(global.i[I_X], global.i[I_Y], 
                                        left+1, 
                                        top+textInteriorPadding+lineHeight*(i+1-skips)+firstLineMargin, 
                                        right-1, 
                                        top+lineHeight*(i+2-skips)+lineHeight/2+firstLineMargin)){
                    selectedMaterial = i;
                    loreTypewriter = 0;
                    lastTypewriter = -1;
                    playSfx(sound_sfx_select);
                    break;
                }
            } 
        }
        
        var left = vx+listWidth+listDetailSpacing;
        var right = vx+w-interiorPadding-UI_RIGHT_BAND;
        var text = translate("CHOOSE_STOCK", "removeFromStock");
        var textWidth = string_width(text)+textInteriorPadding*2;
        var buttonZoneWidth = right-left-textWidth;
        var hoveringSomething = false;
        var totalWeight = getHardWeight();
        
        if (selectedMaterial &gt;= 0){
            var canvasSize = 48;
            var loreKey,loreText;
            if (selectedMaterial &lt; array_length_1d(rscs)){
                rsc = rscs[selectedMaterial];
                loreKey = rsc;
                loreText = translate("LORE", loreKey);
            }
            else{
                rsc = buildings[selectedMaterial-array_length_1d(rscs)]
                loreKey = object_get_name(rsc);
                loreText = translate("BUILDING_TIP", loreKey)+"##"+translate("LORE", loreKey);
            }
            var infoBoxDimensions = array(left, top+canvasSize+lineSpacing*2, right, bottom-buttonZoneHeight*4);
        
            if (mouseIn(infoBoxDimensions)){
                if (global.i[I_SELECT]){
                    var loreText = translate("LORE", loreKey);
                    loreTypewriter = string_length(loreText)*100;
                }
            }
            
            /// Rem stock buttons
            var top = vy + h - UI_LEFT_BAND-bottomRemstockDistance;
            
            var removers = removeButtons;
            if (selectedMaterial &gt;= array_length_1d(rscs)){
                removers = array(-1);
            }
           for (var i = 0; i &lt; array_length_1d(removers); i++){
                var box = array(
                        left+textWidth+(buttonZoneWidth/array_length_1d(removers))*(i),
                        top+buttonMargin,
                        left+textWidth+(buttonZoneWidth/array_length_1d(removers))*(i+1)-buttonWSpacing,
                        top+buttonZoneHeight-buttonMargin    
                );
                
                if (mouseIn(box)){
                    hoveredRemButton = removers[i];
                    hoveringSomething = true;
                    
                    if (global.i[I_SELECT]){
                        playSfx(sound_sfx_select);
                        if (selectedMaterial &lt; array_length_1d(rscs)){
                            rsc = rscs[selectedMaterial];
                        }
                        else{
                            rsc = buildings[selectedMaterial-array_length_1d(rscs)];
                        }
                        remHardStock(rsc, -hoveredRemButton);
                        if (getHardStock(rsc) &lt;= 0){
                            selectedMaterial = noone;
                        }
                    }
                }
            }
        }
        if (!hoveringSomething){
            hoveredRemButton = noone;
        }
        
        var okBox = array(left, vy+h-interiorPadding-buttonZoneHeight-UI_LEFT_BAND-stationBarSafety, right, vy+h-interiorPadding-UI_LEFT_BAND-stationBarSafety);
        
        if (point_in_rectangle(global.i[I_X], global.i[I_Y],
                okBox[0],
                okBox[1],
                okBox[2],
                okBox[3]
            )){
            if (getStationCapacity() &gt;= totalWeight){
                hoveringOK = true;
                if (global.i[I_SELECT]){
                    saveStocks();
                    playSfx(sound_sfx_select);
                    object_station.stationStep = STATION_HOME;
                    if (connectEUAfterStock){
                        connectEUAfterStock = false;
                        launchEmmetsUnited();
                    }
                }
            }
        }
        else{
            hoveringOK = false;
        }
        break;
        
    case STATION_HOME:
    
        var left = vx+UI_LEFT_BAND+interiorPadding;
        var right = vx+w-interiorPadding-UI_RIGHT_BAND;
        var top = vy+UI_TOP_BAND+interiorPadding;
        var height = vy+h-UI_LEFT_BAND;
        
        var homeTop = top+homeHeight;
            
        /// Left box
        var leftBlock = array(left, top-2, left+homeLeftBoxRight, top+h+2);
        
        if (companyLoaded){
                        
            /// Right box
            var hoveredSomething = false;
            for (var i = 0; i &lt; array_length_1d(homeButtons); i++){
                
                if (homeButtons[i] == "stationRanking" &amp;&amp; object_game.offlineMode){
                    continue;
                }
            
                var button = homeButtons[i];
                
                var pos = array(right-homeButtonWidth-interiorPadding-homeButtonRightMargin, 
                                homeTop+homeButtonZoneHeight*i, 
                                right-interiorPadding-homeButtonRightMargin, 
                                homeTop+homeButtonZoneHeight*(i+1)-buttonHSpacing);
                
                if (mouseIn(pos)){
                    hoveredHomeButton = i;
                    hoveredSomething = true;
                    if (global.i[I_SELECT]){
                        playSfx(sound_sfx_select);
                        /// Execute button action
                        switch(homeButtons[i]){
                            case "connectEmmetsUnited":
                                launchEmmetsUnited();
                                break;
                            case "manageCrew":
                                /// Manage crew
                                stationStep = STATION_MANAGE_CREW;
                                break;
                            case "stationRanking":
                                instance_create(0,0, object_ui_window_leaderboards);
                                break;
                            case "stationHistory":
                                instance_create(0,0, object_ui_window_memories);
                                break;
                            case "manageStocks":
                                stationStep = STATION_CHOOSE_STOCK;
                                break;
                            case "dropStation":
                                createWindow(
                                    translate("STATION_HOME", "dropCompanyTitle"),
                                    translate("STATION_HOME", "dropCompanyText"),
                                    array(
                                       array( translate("GENERAL_UI", "cancel"), translate("GENERAL_UI", "ok")),
                                       array( closeWindow, destroyCompany),
                                       array(noone, noone)
                                    )   
                                );
                                break;
                        }
                    }
                }
            }
            if (!hoveredSomething){
                hoveredHomeButton = noone;
            }
            
            /// EXPLORE buttons
            var explore = array(right-buttonWidth*2, top+height-interiorPadding*4-buttonZoneHeight, right, top+height-interiorPadding*4);
            var text = translate("STATION_HOME", "explore")+" &gt;&gt;";
            
            greyedHomeExplore = false;
            if (
                ds_list_size(object_station.crew) &lt; 1 ||
                object_station.company[? "funds"] &lt;= 0
                ){
                greyedHomeExplore = true;
            }
            else if (mouseIn(explore)){
                hoveredHomeExplore = true;
                if (global.i[I_SELECT]){
                    playSfx(sound_sfx_select);
                    fadeToRoom(station_selectcave);
                }
            }
            else{
                hoveredHomeExplore = false;
            }
        }
        else{
            /// Left box text
            draw_set_font(font_ui_big);
            var th = string_height("A");
            draw_set_font(font_tiniest);
            th += string_height("A")*2;
            
            
            var createComp = array(left+interiorPadding, top+height/2, left+homeLeftBoxRight-interiorPadding,  top+height/2+buttonZoneHeight);
                      
            if (mouseIn(createComp)){
                hoveredHomeCreateCompany = true;
                if (global.i[I_SELECT]){
                    playSfx(sound_sfx_select);
                    launchStationWizard();
                }
            }
            else{
                hoveredHomeCreateCompany = false;
            }
            
        }
            
        /// BACK TO MENU button
        var explore = array(left+interiorPadding, top+height-interiorPadding*4-buttonZoneHeight, left+buttonWidth*2, top+height-interiorPadding*4);

         if (mouseIn(explore)){
            hoveredHomeBack = true;
            if (global.i[I_SELECT]){
                playSfx(sound_sfx_select);
                fadeToRoom(menu);
            }
        }
        else{
            hoveredHomeBack = false;
        }
        
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BGS IF STATION ROOM
if (room == station_main){
    bgsFade(sound_bgs_station);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT IF NOT STATION MAIN
if (room != station_main){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;
var w = view_wview;
var h = view_hview;
    
var left = vx+UI_LEFT_BAND+interiorPadding;
var right = vx+w-interiorPadding-UI_RIGHT_BAND;
var top = vy+UI_TOP_BAND+interiorPadding;
var height = vy+h-UI_LEFT_BAND;


switch (stationStep){
    case STATION_MANAGE_CREW:
        draw_set_color(COLOR_BACKGROUND());
        draw_rectangle(vx, vy, vx+w, vy+h, false);
        
        var left = vx+UI_LEFT_BAND+interiorPadding;
        var right = vx+listWidth;
        var top = vy+UI_TOP_BAND+interiorPadding;
        var bottom = vy+h-UI_LEFT_BAND-interiorPadding-stationBarSafety;
        
        /// LEFT LIST
        var block = array(left,
                        top,
                        right,
                        bottom);
                        
        drawBlock(block, colors);
        
        draw_set_font(font_ui);
        var lineHeight = string_height("A")+lineSpacing;
        var firstLineMargin = lineHeight/2;
        var spriteMaxSize = 4;
        
        var skips = 0;
        
            
        // Handles
        
        var myColors = colors;
        if (hoveredTopHandle){
            myColors = hoveredColors;
        }
        var upperHandle = array(left, top+textInteriorPadding+lineHeight, right, top+textInteriorPadding+lineHeight+scrollHandleHeight);
        drawBlock(upperHandle, myColors, 1);
        draw_arrow(mean(upperHandle[0], upperHandle[2]), upperHandle[3]-scrollHandleHeight/4, mean(upperHandle[0], upperHandle[2]), upperHandle[1]+scrollHandleHeight/4, scrollHandleHeight/2);
    
        var myColors = colors;
        if (hoveredBottomHandle){
            myColors = hoveredColors;
        }
        var bottomHandle = array(left, bottom-scrollHandleHeight, right, bottom);
        drawBlock(bottomHandle, myColors, 1);
        draw_arrow(mean(bottomHandle[0], bottomHandle[2]), bottomHandle[1]+scrollHandleHeight/4, mean(bottomHandle[0], bottomHandle[2]), bottomHandle[3]-scrollHandleHeight/4, scrollHandleHeight/2);
        
            
        for (var i = -1 + scrollStep; i&lt; min(ds_list_size(crew), scrollCapacity) + scrollStep; i++){
            if (i == scrollStep-1){ // First line
                draw_set_color(merge_colour(COLOR_BACKGROUND(), c_black, 0.3));
                draw_rectangle(left, top, right, top+lineHeight + lineHeight/2, false);
                draw_set_color(COLOR_FOREGROUND()); 
                draw_rectangle(left, top, right, top+lineHeight + lineHeight/2, true);
                
                draw_set_valign(fa_middle);
                
                draw_set_halign(fa_left);
                draw_text(left+textInteriorPadding, top +textInteriorPadding+ lineHeight/2, translate("MANAGE_CREW", "name"));
                draw_set_halign(fa_right);
                draw_text(right-textInteriorPadding, top +textInteriorPadding+ lineHeight/2, translate("MANAGE_CREW", "health"));
                
                continue;
            }
        
            
            lineHeight = string_height("A")+lineSpacing;
            
            var crewMember = crew[| i];
            /// Sometimes the script throws an out of range undefined error because of the scrolling step..
            /// Better check if the crewMember is undefined before further display operations
            if (!is_undefined(crewMember)){
                var status = crewMember[? "hp"];
                var pos = array(left, 
                        top+textInteriorPadding+lineHeight*(i+1-skips-scrollStep)+firstLineMargin+scrollHandleHeight, 
                        right, 
                        top+lineHeight*(i+2-skips-scrollStep)+lineHeight/2+firstLineMargin+scrollHandleHeight);
                
                if (i == crewManagerSelectedEmmet){
                   drawBlock(pos, hoveredColors);
                }
                
                /// Spritezone
                var checkBlock = array( pos[0] + interiorPadding+textInteriorPadding+spriteMaxSize, 
                                pos[1] + spriteMaxSize + lineHeight/2,
                                pos[0] + interiorPadding+textInteriorPadding-spriteMaxSize, 
                                pos[1] - spriteMaxSize + lineHeight/2);
                                
                
                drawBlock(checkBlock, colors);
                
                draw_sprite_part_ext(sprite_emmet_idle_back, 0, 2, 0, spriteMaxSize, spriteMaxSize, 
                                left+interiorPadding+textInteriorPadding-(sprite_get_width(sprite_emmet_idle_back)/2 - spriteMaxSize), 
                                top +textInteriorPadding+ lineHeight*(i+1-scrollStep-skips) + lineHeight/2+firstLineMargin+scrollHandleHeight,
                                1, 1, getEmmetColor(crewMember), 1);
                                
                        
                var finalPadding = textInteriorPadding*3;
                var colorsUsed = colors;
                
                if ( i == crewManagerSelectedEmmet){
                    colorsUsed = hoveredColors;
                }
                
                draw_set_font(font_ui);
                
                draw_set_halign(fa_left);
                drawShadowedText(floor(pos[0]+finalPadding+interiorPadding), floor(mean(pos[1], pos[3])), crewMember[? "name"], colorsUsed);
                
                draw_set_halign(fa_right);
                drawShadowedText(floor(pos[2]-textInteriorPadding), floor(mean(pos[1], pos[3])), string(floor(crewMember[? "hp"]))+"%", colorsUsed);
            }
        }
        
        /// RIGHT DETAILS AND CONTROLLER
        var left = vx+listWidth+listDetailSpacing;
        var right = vx+w-interiorPadding-UI_RIGHT_BAND;
        
        if (crewManagerSelectedEmmet &gt;= 0){
            var crewMember = crew[| crewManagerSelectedEmmet];
            
            var canvasSize = 48;
            
            draw_set_color(COLOR_SHADOW());
            draw_rectangle(left+1, top+1, left+canvasSize+1, top+canvasSize+1, false);
            draw_sprite_part(sprite_bg_lasergrid, 0, 
                (get_timer()/50000)%(sprite_get_width(sprite_bg_lasergrid)-canvasSize), 
                (get_timer()/50000)%(sprite_get_height(sprite_bg_lasergrid)-canvasSize), 
                canvasSize, canvasSize, left, top);
            draw_set_color(COLOR_FOREGROUND());
            draw_rectangle(left, top, left+canvasSize, top+canvasSize, true);
            
            draw_sprite_ext(sprite_emmet_walking_side, floor((get_timer()/150000)%2), left+canvasSize/2, top+canvasSize/2+sprite_get_height(sprite_emmet_walking_side)/2, 1, 1, 0, getEmmetColor(crewMember), 1);
            
            draw_set_valign(fa_top);
            draw_set_halign(fa_left);
            
            draw_set_font(font_ui_big);
            draw_set_color(COLOR_FOREGROUND());
            drawShadowedText(left+canvasSize+textInteriorPadding, top+textInteriorPadding, crewMember[? "name"]);
            var height = string_height("A");
            
            draw_set_font(font_ui);
            
            var underText = translate("EMMET_ORIGIN", crewMember[? "origin"]);
            underText = string_replace(underText, "%s", date_date_string(crewMember[? "creationTime"]));
            
            drawShadowedText(left+canvasSize+textInteriorPadding, 
                             top+textInteriorPadding+height+lineSpacing, 
                                underText);
            var littleHeight = string_height("A");
            
            var infoBoxDimensions = array(left, top+canvasSize+lineSpacing*2, right, top+height+littleHeight+lineSpacing*2+(lineHeight)*7);
            
            var myColors = array(COLOR_FOREGROUND(), merge_colour(COLOR_BACKGROUND(), c_black, 0.3), COLOR_SHADOW());
            
            drawBlock(infoBoxDimensions, myColors);
            
            var translated = formatBiography(crewMember);
            
            draw_set_color(COLOR_SHADOW());
            draw_text_ext(infoBoxDimensions[0]+textInteriorPadding+1, infoBoxDimensions[1]+textInteriorPadding+1, translated, lineHeight, infoBoxDimensions[2]-infoBoxDimensions[0]-2*textInteriorPadding);
            
            draw_set_color(c_lime);
            draw_text_ext(infoBoxDimensions[0]+textInteriorPadding, infoBoxDimensions[1]+textInteriorPadding, translated, lineHeight, infoBoxDimensions[2]-infoBoxDimensions[0]-2*textInteriorPadding);
            
            
            /// CONTROL BUTTONS
            draw_set_valign(fa_middle);
            draw_set_halign(fa_center);
            draw_set_font(font_ui);
            
            var top = infoBoxDimensions[3]+lineHeight;;
            
            
            for (var i = 0; i &lt; array_length_1d(crewControlButtons); i++){
                var box = array(
                        left,
                        top+(buttonZoneHeight*i)+buttonMargin,
                        right,
                        top+(buttonZoneHeight*(i+1)) 
                    );
                var greyed = string_pos(crewControlButtons[i], greyedCrewControlButtons) &gt; 0 ;
                
                var boxText = translate("MANAGE_CREW", crewControlButtons[i]);
                if (crewControlButtons[i] == "moveUp" &amp;&amp; !string_pos(crewControlButtons[i], greyedCrewControlButtons)){
                    boxText = boxText;
                }
                else if (crewControlButtons[i] == "moveDown" &amp;&amp; !string_pos(crewControlButtons[i], greyedCrewControlButtons)){
                    boxText = boxText;
                }
                else if (crewControlButtons[i] == "heal" &amp;&amp; !string_pos(crewControlButtons[i], greyedCrewControlButtons)){
                    boxText += "#( - ₵"+numberFormat(getHealPrice(crewMember))+")";
                }
                else if (crewControlButtons[i] == "fire"){
                    boxText += "#( - ₵"+numberFormat(getPayOff(crewMember))+")";
                }
                else if (crewControlButtons[i] == "rename"){
                    boxText += "#( - ₵"+numberFormat(EMMET_MARKET_PRICE*0.1)+")";
                }
                draw_set_halign(fa_center);
                                
                var colorsUsed = colors;
                if (greyed){
                    colorsUsed = array(COLOR_SHADOW(), COLOR_BACKGROUND(), COLOR_SHADOW());
                }
                else if (hoveredCrewControlButton == crewControlButtons[i]){
                    colorsUsed = hoveredColors;
                }
                
                drawBlock(box, colorsUsed);             
                drawShadowedText(floor(box[0]+(box[2]-box[0])/2), floor(box[1]+(box[3]-box[1])/2), boxText, colorsUsed);
            }            
            
        }
        
        /// Crew limit
            
        draw_set_font(font_ui);
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        
        var top = vy + h - UI_LEFT_BAND-bottomRemstockDistance + buttonZoneHeight;
                
        var crewSize = ds_list_size(object_station.crew);
        var crewGauge = array(left,
                                top+heightBeforeGauge,
                                 right,
                                 top+heightBeforeGauge+gaugeHeight);
        
        draw_set_color(COLOR_SHADOW());
        draw_rectangle(crewGauge[0]+1, crewGauge[1]+1, crewGauge[2]+1, crewGauge[3]+1, false);
        draw_set_color(COLOR_BACKGROUND());
        draw_rectangle(crewGauge[0], crewGauge[1], crewGauge[2], crewGauge[3], false);
        
        draw_set_color(c_lime)
        if (getStationCrewCapacity() &lt;= crewSize){
            draw_set_color(c_red);
        }
        draw_rectangle(crewGauge[0], crewGauge[1], crewGauge[0] + (crewGauge[2]-crewGauge[0])*clamp(crewSize/getStationCrewCapacity(),0,1), crewGauge[3], false);;
        
        draw_set_color(COLOR_FOREGROUND());
        draw_rectangle(crewGauge[0], crewGauge[1], crewGauge[2], crewGauge[3], true)
        
        drawShadowedText(left+textInteriorPadding, crewGauge[1]-buttonMargin, translate("MANAGE_CREW", "currentCrewsize"));
        draw_set_halign(fa_right);
        drawShadowedText(right-textInteriorPadding, crewGauge[1]-buttonMargin, string(crewSize)+"/"+string(getStationCrewCapacity())+" members");
        
                        
        var okBox = array(left, vy+h-interiorPadding-buttonZoneHeight-UI_LEFT_BAND-stationBarSafety, right, vy+h-interiorPadding-UI_LEFT_BAND-stationBarSafety);
       
        var colorsUsed = colors;
        if (hoveringOK){
            colorsUsed = hoveredColors;
        }
                
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var text = translate("GENERAL_UI", "ok");
        
        drawBlock(okBox, colorsUsed);
        drawShadowedText(okBox[0]+(okBox[2]-okBox[0])/2, okBox[1]+(okBox[3]-okBox[1])/2, text, colorsUsed);
        
        break;
        
    case STATION_CHOOSE_STOCK:
        draw_set_color(COLOR_BACKGROUND());
        draw_rectangle(vx, vy, vx+w, vy+h, false);
        
        
        /// LEFT LIST
        var leftBox = array(vx+UI_LEFT_BAND+interiorPadding,
                        vy+UI_TOP_BAND+interiorPadding,
                        vx+listWidth,
                        vy+h-UI_LEFT_BAND-interiorPadding-stationBarSafety
                        );
                        
        drawBlock(leftBox, colors);
        
        var left = vx+UI_LEFT_BAND+interiorPadding;
        var right = vx+listWidth;
        var top = vy+UI_TOP_BAND+interiorPadding;
        var bottom = vy+h-UI_LEFT_BAND-interiorPadding-stationBarSafety;
        
        var rscs = getFancyMaterials();
        var buildings = getBuildings();
        draw_set_font(font_ui);
        var lineHeight = string_height("A")+lineSpacing;
        var firstLineMargin = lineHeight/2;
        var spriteMaxSize = 5;
        
        var skips = 0;
        
        for (var i = -1; i&lt; array_length_1d(rscs)+array_length_1d(buildings); i++){
            if (i &lt; 0){
                draw_set_color(merge_colour(COLOR_BACKGROUND(), c_black, 0.3));
                draw_rectangle(left, top, right, top+lineHeight + lineHeight/2, false);
                draw_set_color(COLOR_FOREGROUND()); 
                draw_rectangle(left, top, right, top+lineHeight + lineHeight/2, true);
                
                draw_set_valign(fa_middle);
                
                draw_set_halign(fa_left);
                draw_text(left+textInteriorPadding, top +textInteriorPadding+ lineHeight/2, translate("CHOOSE_STOCK", "resource"));
                draw_set_halign(fa_right);
                draw_text(right-textInteriorPadding, top +textInteriorPadding+ lineHeight/2, translate("CHOOSE_STOCK", "amount"));
                
                continue;
            }
            var sprite, rsc, text, stockText,stock;
            var building=false;
            
            if (i &lt; array_length_1d(rscs)){
                rsc = rscs[i];
                sprite =  getRessource(rsc, "sprite");
                text = translate("RSC", rsc);
                stock = getHardStock(rsc);
                stockText = string(stock)+"0 kg";
            }
            else{
                rsc = buildings[i-array_length_1d(rscs)]
                sprite = getBuilding(rsc, "sprite");
                text = translate(BUILDING, object_get_name(rsc));
                stock = getHardStock(rsc);
                stockText = "x"+string(stock)+"";
                building = true;
            }
            
            if (stock &lt;= 0){
                skips++;
                continue;
            }
            
            if (i == selectedMaterial){
                draw_set_color(COLOR_FOREGROUND());
                draw_rectangle(left+1, top+textInteriorPadding+lineHeight*(i+1-skips)+firstLineMargin, right-1, top+lineHeight*(i+2-skips)+lineHeight/2+firstLineMargin, false);
            }
            draw_set_valign(fa_middle);
            
            var spriteBox = array(left+textInteriorPadding+spriteMaxSize, 
                            top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin+spriteMaxSize,
                            left+textInteriorPadding-spriteMaxSize, 
                            top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin-spriteMaxSize);
            
            drawBlock(spriteBox, colors);
            
            if (building){
                draw_sprite_part(sprite, 0, sprite_get_width(sprite)/2, sprite_get_height(sprite)/2, spriteMaxSize+3, spriteMaxSize+3, left+textInteriorPadding-spriteMaxSize/2-1, top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin-spriteMaxSize/2-1);
            }
            else{
                draw_sprite_part(sprite, 0, 0,0, spriteMaxSize, spriteMaxSize, left+textInteriorPadding+spriteMaxSize/2, top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin+spriteMaxSize/2);
            }
            
            var finalPadding = textInteriorPadding+spriteMaxSize+textInteriorPadding;
            var colorsUsed = colors;
            if ( i == selectedMaterial){
                colorsUsed = hoveredColors;
            }
        
            draw_set_halign(fa_left);
            drawShadowedText(left+finalPadding, top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin, text, colorsUsed);
            
            draw_set_halign(fa_right);
            drawShadowedText(right-textInteriorPadding, top +textInteriorPadding+ lineHeight*(i+1-skips) + lineHeight/2+firstLineMargin, stockText, colorsUsed);
            
        }
        
        /// RIGHT DETAILS AND CONTROLLER
        var left = vx+listWidth+listDetailSpacing;
        var right = vx+w-interiorPadding-UI_RIGHT_BAND;
        
        if (selectedMaterial &gt;= 0){
            var rsc, sprite, name, loreText;
            var building = false;
            if (selectedMaterial &lt; array_length_1d(rscs)){
                rsc = rscs[selectedMaterial];
                sprite = getRessource(rsc, "fullSize");
                name = translate("RSC", rsc);
                var loreKey = rsc;
                loreText = translate("LORE", loreKey);
            }
            else{
                building = true;
                rsc = buildings[selectedMaterial-array_length_1d(rscs)];
                sprite = getBuilding(rsc, "sprite");
                name = translate(BUILDING, object_get_name(rsc));
                var loreKey = object_get_name(rsc);
                loreText = translate("BUILDING_TIP", loreKey)+"##"+translate("LORE", loreKey);
            }
            
            var canvasSize = 48;
            
            /// Lasergrid
            draw_set_color(COLOR_SHADOW());
            draw_rectangle(left+1, top+1, left+canvasSize+1, top+canvasSize+1, false);
            draw_sprite_part(sprite_bg_lasergrid, 0, 
                (get_timer()/50000)%(sprite_get_width(sprite_bg_lasergrid)-canvasSize), 
                (get_timer()/50000)%(sprite_get_height(sprite_bg_lasergrid)-canvasSize), 
                canvasSize, canvasSize, left, top);
            draw_set_color(COLOR_FOREGROUND());
            draw_rectangle(left, top, left+canvasSize, top+canvasSize, true);
            
            /// Sprite draw
            draw_sprite(sprite, 0, left+canvasSize/2, top+canvasSize/2);
            
            draw_set_valign(fa_top);
            draw_set_halign(fa_left);
            
            draw_set_font(font_ui_big);
            draw_set_color(COLOR_FOREGROUND());
            drawShadowedText(left+canvasSize+textInteriorPadding, top+textInteriorPadding, name);
            var height = string_height("A");
            
            draw_set_font(font_ui);
            if (!building){
                drawShadowedText(left+canvasSize+textInteriorPadding, 
                                    top+textInteriorPadding+height+lineSpacing, 
                                    translate("CHOOSE_STOCK", "lastMarketValue")+"₵"+numberFormat(getCurrentPrice(rsc, 1)/getWeight(rsc))+" / kg");
            }
            var littleHeight = string_height("A");
            
            var infoBoxDimensions = array(left, top+canvasSize+lineSpacing*2, right, bottom-buttonZoneHeight*4);
            var myColors = array(COLOR_FOREGROUND(), merge_colour(COLOR_BACKGROUND(), c_black, 0.3), COLOR_SHADOW());
            
            if (loreTypewriter &lt;= string_length(loreText)){
                loreTypewriter += (1/room_speed)*typewriterSpeed;
                if (lastTypewriter &lt; floor(loreTypewriter) &amp;&amp; string_char_at(loreText, floor(loreTypewriter)+1) != " "){
                    lastTypewriter = floor(loreTypewriter);
                    playSfx(sound_sfx_typewriter);
                }
            } 
            loreText = string_delete(loreText, loreTypewriter+1, string_length(loreText));
            if (loreTypewriter%2 &lt; 1){
                loreText += "_";
            }
            drawBlock(infoBoxDimensions, myColors);
            
            var loreColors = array(c_lime, COLOR_BACKGROUND(), COLOR_SHADOW());
            
            
            
            drawShadowedText(infoBoxDimensions[0]+textInteriorPadding, infoBoxDimensions[1]+textInteriorPadding, loreText, loreColors, infoBoxDimensions[2]-infoBoxDimensions[0]-2*textInteriorPadding);
            
            /// REM STOCK BUTTONS
            draw_set_valign(fa_middle);
            draw_set_halign(fa_left);
            draw_set_font(font_ui);
            
            var top = vy + h - UI_LEFT_BAND-bottomRemstockDistance;
            var text = translate("CHOOSE_STOCK", "removeFromStock");
            var textWidth = string_width(text)+textInteriorPadding*2;
            var buttonZoneWidth = right-left-textWidth;
            drawShadowedText(left+textInteriorPadding, top+buttonZoneHeight/2, text);
            
            var removers = removeButtons;
            if (building){
                removers = array(-1);
            }
            
            for (var i = 0; i &lt; array_length_1d(removers); i++){
                var box = array(
                        left+textWidth+(buttonZoneWidth/array_length_1d(removers))*(i),
                        top+buttonMargin,
                        left+textWidth+(buttonZoneWidth/array_length_1d(removers))*(i+1)-buttonWSpacing,
                        top+buttonZoneHeight-buttonMargin    
                    );
                    
                var boxText = string(removers[i]*getWeight(rsc))+"kg";
                if (building){
                    boxText = (translate("CHOOSE_STOCK", "drop")+" "+string(removers[i]));
                }
                draw_set_halign(fa_center);
                                
                var colorsUsed = colors;
                if (hoveredRemButton == removers[i]){
                    colorsUsed = hoveredColors;
                }
                
                drawBlock(box, colorsUsed);             
                drawShadowedText(floor(box[0]+(box[2]-box[0])/2), floor(box[1]+(box[3]-box[1])/2), boxText, colorsUsed);
            }
            
        }
        
        
        /// Storage gauge    
        
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        
        var top = vy + h - UI_LEFT_BAND-bottomRemstockDistance + buttonZoneHeight;
                
        var totalWeight = getHardWeight();
        var storageGauge = array(left,
                                top+heightBeforeGauge,
                                 right,
                                 top+heightBeforeGauge+gaugeHeight);
        
        draw_set_color(COLOR_SHADOW());
        draw_rectangle(storageGauge[0]+1, storageGauge[1]+1, storageGauge[2]+1, storageGauge[3]+1, false);
        draw_set_color(COLOR_BACKGROUND());
        draw_rectangle(storageGauge[0], storageGauge[1], storageGauge[2], storageGauge[3], false);
        
        draw_set_color(c_lime)
        if (getStationCapacity() &lt; totalWeight){
            draw_set_color(c_red);
        }
        draw_rectangle(storageGauge[0], storageGauge[1], storageGauge[0] + (storageGauge[2]-storageGauge[0])*clamp(totalWeight/getStationCapacity(),0,1), storageGauge[3], false);;
        
        draw_set_color(COLOR_FOREGROUND());
        draw_rectangle(storageGauge[0], storageGauge[1], storageGauge[2], storageGauge[3], true)
        
        drawShadowedText(left+textInteriorPadding, storageGauge[1]-buttonMargin, translate("CHOOSE_STOCK", "currentStorage"));
        draw_set_halign(fa_right);
        drawShadowedText(right-textInteriorPadding, storageGauge[1]-buttonMargin, string(totalWeight)+"/"+string(getStationCapacity())+"kg");
        
        var okBox = array(left, vy+h-interiorPadding-buttonZoneHeight-UI_LEFT_BAND-stationBarSafety, right, vy+h-interiorPadding-UI_LEFT_BAND-stationBarSafety);
       
        var colorsUsed = colors;
        if (hoveringOK){
            colorsUsed = hoveredColors;
        }
                
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var text = translate("GENERAL_UI", "ok");
        if (getStationCapacity() &lt; totalWeight){
            text = translate("CHOOSE_STOCK", "pleaseFree");
        }
        drawBlock(okBox, colorsUsed);
        drawShadowedText(okBox[0]+(okBox[2]-okBox[0])/2, okBox[1]+(okBox[3]-okBox[1])/2, text, colorsUsed);
        
        break;
        
    case STATION_HOME:
        
        var homeTop = top+homeHeight;
            
        /// Left box
        var leftBlock = array(left, top-2, left+homeLeftBoxRight, top+h+2);
        var blockColors = colors;
        blockColors[1] = merge_color(c_black, colors[1], 0.5);
        drawBlock(leftBlock, blockColors, 1);
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        
        if (companyLoaded){
            
            /// Left box text
            
            for (var i = 0; i &lt; array_length_1d(homeCompanyInfos); i++){
                var button = homeCompanyInfos[i];
                var text = translate("STATION_HOME", button);
                var value = 0;
                var myColors = colors;
                
                switch (button){
                    case "creationDate":
                        value = date_date_string(date_timestamp(company[? "creationTime"]));
                        break;
                    case "crewSize":
                        value = ds_list_size(crew);
                        break;
                    case "leaderboardPosition":
                        value = ranking;
                        break;
                    case "capital":
                        value = "₵"+numberFormat(company[? "funds"]);
                        if (company[? "funds"] &lt; 0){
                            myColors[0] = c_red;
                        }
                        break;
                    case "stationLevel":
                        value = numberFormat(company[? "level"]);
                        break;
                }
                
                var textY = (homeTop +( (homeLeftBoxHeight-homeLeftBoxPadding*2)/array_length_1d(homeCompanyInfos))*i);
                
                draw_set_valign(fa_top);
                draw_set_font(font_tiniest);
                drawShadowedText(
                    floor(leftBlock[0]+homeLeftBoxPadding+textInteriorPadding), 
                    floor(textY), 
                    stripAccents(text), blockColors);
                draw_set_font(font_ui);
                drawShadowedText(
                    floor(leftBlock[0]+homeLeftBoxPadding+ textInteriorPadding), 
                    floor(textY + textInteriorPadding+interiorPadding), 
                    string(value), myColors);
            }
        
            /// Drawing title
            draw_set_font(font_ui_big);
            draw_set_halign(fa_left);
            
            drawShadowedText(floor(left+homeLeftBoxPadding+textInteriorPadding), floor(top+homeTopTextMargin+textInteriorPadding), company[? "name"]);
            var th = string_height("A");
            draw_set_font(font_tiniest);
            drawShadowedText(floor(left+homeLeftBoxPadding+textInteriorPadding), floor(top+homeTopTextMargin+th+textInteriorPadding), stripAccents(company[? "quote"]), colors, leftBlock[2]-leftBlock[0]-textInteriorPadding*2 - homeLeftBoxPadding);
            
            
            /// Right boxes
            for (var i = 0; i &lt; array_length_1d(homeButtons); i++){
                var button = homeButtons[i];
                var text = translate("STATION_HOME", button);
                var pos = array(right-homeButtonWidth-interiorPadding-homeButtonRightMargin, 
                                homeTop+homeButtonZoneHeight*i, 
                                right-interiorPadding-homeButtonRightMargin, 
                                homeTop+homeButtonZoneHeight*(i+1)-buttonHSpacing);
                var theseColors = colors;
            
                if (hoveredHomeButton == i){
                    theseColors = hoveredColors;
                }
                
                if (homeButtons[i] == "stationRanking" &amp;&amp; object_game.offlineMode){
                    theseColors = greyedColors;
                }
                
                draw_set_halign(fa_center);
                draw_set_valign(fa_middle);
                draw_set_font(font_ui);
                
                drawBlock(pos, theseColors);
                drawShadowedText(floormean(pos[0], pos[2]), floormean(pos[1], pos[3]), text, theseColors);
            }
            
            /// EXPLORE buttons
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            var theseColors = colors;
            if (greyedHomeExplore){
                theseColors = greyedColors;
            }
            if (hoveredHomeExplore || (!checkMarker("exploreBlink") &amp;&amp; (get_timer()/500000)%2 &lt; 1)){
                theseColors = hoveredColors;
            }
            var explore = array(right-buttonWidth*2, top+height-interiorPadding*4-buttonZoneHeight, right, top+height-interiorPadding*4);
            var text = translate("STATION_HOME", "explore")+" &gt;&gt;";
            drawBlock(explore, theseColors);
            drawShadowedText(floormean(explore[0], explore[2]), floormean(explore[1], explore[3]), text, theseColors);
        }
        else{
            /// Left box text
            draw_set_font(font_ui_big);
            draw_set_halign(fa_left);
            
            drawShadowedText(left+homeLeftBoxPadding+textInteriorPadding, top+homeTopTextMargin+textInteriorPadding, translate("STATION_HOME", "newCompany"), colors, homeLeftBoxRight-textInteriorPadding-homeLeftBoxPadding);
            var th = string_height("A");
            draw_set_font(font_tiniest);
            drawShadowedText(left+homeLeftBoxPadding+textInteriorPadding, top+homeTopTextMargin+th+textInteriorPadding,  stripAccents(translate("STATION_HOME", "createCompanyButtonNotice")), colors, homeLeftBoxRight-textInteriorPadding-homeLeftBoxPadding);
            th += string_height("A")*2;
            
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_set_font(font_ui);
            var text = translate("STATION_HOME", "createCompany");
            
            var createComp = array(left+interiorPadding, top+height/2, left+homeLeftBoxRight-interiorPadding,  top+height/2+buttonZoneHeight);
            var theseColors = colors;
            if (hoveredHomeCreateCompany){
                theseColors = hoveredColors;
            }
            drawBlock(createComp, theseColors);
            drawShadowedText(floormean(createComp[0], createComp[2]), floormean(createComp[1], createComp[3]), text, theseColors);
            
            
            
        }
            
        /// BACK TO MENU button
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        var explore = array(left+interiorPadding, top+height-interiorPadding*4-buttonZoneHeight, left+buttonWidth*2, top+height-interiorPadding*4);
        var text = "&lt;&lt; "+translate("STATION_HOME", "back");
        var theseColors = colors;
        if (hoveredHomeBack){
            theseColors = hoveredColors;
        }
        drawBlock(explore, theseColors);
        drawShadowedText(mean(explore[0], explore[2]), mean(explore[1], explore[3]), text, theseColors);
        
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
