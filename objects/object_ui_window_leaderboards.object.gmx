<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_market</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unique();
hostWindow = createWindow(translate("STATION_HOME", "stationRanking"), "", 
    array(noone), true);

depth = hostWindow.depth-1;

hostWindow.width = 480;
hostWindow.height = 320;
hostWindow.x = (SCREEN_WIDTH-hostWindow.width)/2;
hostWindow.y = (SCREEN_HEIGHT-hostWindow.height)/2;

x = hostWindow.x+UI_LEFT_BAND;
y = hostWindow.y+UI_TOP_BAND;

interiorPadding = 8;
textInteriorPadding = 5;

xButtonSize = UI_TOP_BAND-2;

hostWindow.controlButtonsSize = xButtonSize+interiorPadding;

width = hostWindow.width - UI_RIGHT_BAND - UI_LEFT_BAND;
height = hostWindow.height - UI_TOP_BAND - UI_LEFT_BAND;

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());
                
hoveredX = false;

buttonMargin = 4;
buttonWSpacing = 12;
buttonWidth = 64;
buttonZoneHeight = 32;
buttonHeight = buttonZoneHeight-buttonMargin;


hoveredBack = false;
hoveredOK = false;

scrollValue = 0;
maxScroll = 0;

onlineGetSurroundingLeaderboards(object_station.company[? "cid"]);
loadingWindow= instance_create(0,0,object_ui_window_loading);
leaderboardList = noone;
waitForServer = 4;
connectionFailed = false;
companyHeight = 64;
spriteMargin = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (leaderboardList != noone){
    ds_list_destroy(leaderboardList);
    leaderboardList = noone;
    var map = object_online_communicator.spriteBank;
    var key = ds_map_find_first(map);
    for (var i = 0; i &lt; ds_map_size(map); i++){
        if (!is_undefined(map[? key]) &amp;&amp; sprite_exists(map[? key])){
            sprite_delete(map[? key]);
        }
        key = ds_map_find_next(map, i);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit windows ontop also kills loading


if (leaderboardList != noone){
    if (instance_exists(loadingWindow)){
        loadingWindow.die = true;
    }
}
else if (connectionFailed){
    createWindow(translate("GENERAL_UI", "notice"), translate("GENERAL_UI", "serverOffline"));
    if (instance_exists(loadingWindow)){
        loadingWindow.die = true;
    }
    closeWindow(hostWindow);
    instance_destroy();
    exit;
}
else if (waitForServer &gt; 0){
    waitForServer -= 1/room_speed;
    exit;
}
else{
    connectionFailed = true;
}

willExit = false;
with (object_ui_window){
    if (depth &lt;= other.depth &amp;&amp; !isDebugWindow){
        other.willExit = true;
    }
}
if (willExit){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;

var left = vx+x+interiorPadding;
var right = vx+x+width-interiorPadding-UI_RIGHT_BAND;
var top = vy+y+interiorPadding+UI_TOP_BAND;
var bottom = vy+y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

if (leaderboardList == noone){
    exit;
}

colors = 
        array(COLOR_FOREGROUND(),
                COLOR_BACKGROUND(), 
                COLOR_SHADOW());
hoveredColors = 
        array(COLOR_BACKGROUND(),
                COLOR_FOREGROUND(), 
                COLOR_SHADOW());

/// 0. Close button
var pos = array(vx+x+width-xButtonSize, vy+hostWindow.y, vx+x+width+UI_RIGHT_BAND, vy+hostWindow.y+xButtonSize);
if (mouseIn(pos)){
    hoveredX = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
        exit;
    }
}
else{
    hoveredX = false;
}


/// Bottom buttons

var confirmBlock = array(mean(left, right)-buttonWidth/2, bottom-buttonZoneHeight, mean(left, right)+buttonWidth/2, bottom);
if (mouseIn(confirmBlock)){
    hoveredOK = true;
    if (global.i[I_SELECT]){
        playSfx(sound_sfx_select);
        closeWindow(hostWindow);
        instance_destroy();
        exit;
    }
}
else{
    hoveredOK = false;
}

/// Scrolling

var fakeSurf = array(right-left, bottom-top-buttonZoneHeight - 8);
var totalHeight = 64;
var bonus = 0;

for (var i = 0; i &lt; ds_list_size(leaderboardList); i++){
    var company = leaderboardList[| i];
    draw_set_font(font_ui_big);
    if (i &lt; ds_list_size(leaderboardList)-1)  totalHeight += companyHeight+bonus;
    
    if (i == 0){
        // First of the leaderboard,adding a little bar
        var nextCompany = leaderboardList[| i+1];
        if (nextCompany[? "position"] != company[? "position"]+1){
            bonus = buttonZoneHeight;
        }
    }
}
    
maxScroll = totalHeight - (bottom-top);

if (totalHeight &gt; fakeSurf[1]){
    if (mouseIn(array(left, top, right, top+fakeSurf[1]))){
        if (global.i[I_SCROLL_UP]){
            scrollValue -= 8;
            scrollValue = max(scrollValue, 0);
        }
        else if (global.i[I_SCROLL_DOWN]){
            scrollValue += 8;
            scrollValue = min(scrollValue, maxScroll);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vx = view_xview;
var vy = view_yview;

var left = vx+x+interiorPadding;
var right = vx+x+width-interiorPadding-UI_RIGHT_BAND;
var top = vy+y+interiorPadding+UI_TOP_BAND;
var bottom = vy+y+height+interiorPadding-UI_LEFT_BAND-UI_TOP_BAND;

if (leaderboardList == noone){
    exit;
}

/// 0. Close button
var pos = array(vx+x+width-xButtonSize, vy+y+hostWindow.y, vx+x+width+UI_RIGHT_BAND, vy+y+hostWindow.y+xButtonSize);

var colorsUsed = hostWindow.colors;
if (hoveredX){
    colorsUsed = hostWindow.hoveredColors;
}

drawBlock(pos, colorsUsed);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
drawShadowedText(pos[0]+(pos[2]-pos[0])/2, pos[1]+(pos[3]-pos[1])/2, "X", colorsUsed);

/// 1. Draw background
draw_set_color(COLOR_SHADOW());
draw_rectangle(vx+x, vy+y, vx+x+width-2,  vy+y+height-2, false);

draw_set_color(COLOR_FOREGROUND());
draw_rectangle(vx+x, vy+y, vx+x+width+2,  vy+y+height+2, false);

draw_set_color(COLOR_BACKGROUND());
draw_rectangle(vx+x, vy+y, vx+x+width, vy+y+height, false);

draw_set_font(font_ui);

if (leaderboardList == noone){
    exit;
}

/// 2. Interior
draw_set_valign(fa_top);

var scrollPosition = -scrollValue;
var th = string_height("A");

var surf = surface_create(right-left, bottom-top-buttonZoneHeight - 8);

if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear(COLOR_BACKGROUND());
    
    var bonus = 0;
    
    for (var i = 0; i &lt; ds_list_size(leaderboardList); i++){
        var company = leaderboardList[| i];
        draw_set_font(font_ui_big);
        var conColors = array(company[? "color"], COLOR_BACKGROUND(company[? "color"]), COLOR_SHADOW(company[? "color"]));
        var companyBlock = array(0, i*companyHeight+bonus + scrollPosition, surface_get_width(surf), (i+1)*companyHeight+bonus + scrollPosition);
        var avatarBlock = array(companyBlock[0], companyBlock[1], companyHeight, companyBlock[3]);
        
        
        if (company[? "cid"] == object_station.company[? "cid"]){
            // It's us!
            var changingColor = make_colour_hsv(sin(get_timer()/500000)*255, 155, 155);
            var conColors = array(changingColor, COLOR_BACKGROUND(changingColor), COLOR_SHADOW(changingColor));
        }
        if (i == 0){
            // First of the leaderboard,adding a little bar
            var nextCompany = leaderboardList[| i+1];
            if (nextCompany[? "position"] != company[? "position"]+1){
                bonus = buttonZoneHeight;
                var interBlock = array(companyBlock[0], companyBlock[3], companyBlock[2], companyBlock[3]+bonus);
                drawBlock(interBlock, colors);
                draw_set_font(font_ui_big);
                draw_set_halign(fa_center);
                draw_set_valign(fa_middle);
                drawShadowedText(floormean(interBlock[0], interBlock[2]), floormean(interBlock[1], interBlock[3]), "...", colors);
            }
        }
        var companyTitle = "[\#"+string(company[? "position"])+"] "+company[? "name"]+" (₵"+numberFormat(company[? "funds"])+")";
        
        drawBlock(companyBlock, conColors);
        drawBlock(avatarBlock, conColors);
        
        if (!is_undefined(object_online_communicator.spriteBank[? company[? "playerAvatar"]]) &amp;&amp; sprite_exists(object_online_communicator.spriteBank[? company[? "playerAvatar"]])){
            var sprite = object_online_communicator.spriteBank[? company[? "playerAvatar"]];
            var scale = array((companyHeight-spriteMargin*2)/sprite_get_width(sprite), (companyHeight-spriteMargin*2)/sprite_get_height(sprite));
            
            RFX_set_coldepth(4);
            shader_set_rfx();  
            draw_sprite_ext(sprite, 0, companyBlock[0]+spriteMargin, companyBlock[1]+spriteMargin, scale[0], scale[1], 0, conColors[0], 1);
            shader_reset();
        }
        
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        drawShadowedText(hostWindow.textInteriorPadding + companyBlock[0]+companyHeight, hostWindow.textInteriorPadding + companyBlock[1], companyTitle, conColors);
        var th = string_height("A");
        draw_set_font(font_ui);
        drawShadowedText(hostWindow.textInteriorPadding + companyBlock[0]+companyHeight, hostWindow.textInteriorPadding + companyBlock[1]+th+2, company[? "owner"]+'#"'+company[? "quote"]+'"', conColors);
    }
    
    
    
    /// To step    
    surface_reset_target();
    drawBorders(array(left, top, left+surface_get_width(surf), top+surface_get_height(surf)), colors);
    draw_surface(surf, left, top);
    surface_free(surf);
    
    var displayZoneHeight = (bottom-top-buttonZoneHeight)-8;
    var elevator = array(
                    right+1, 
                    top+clamp(((scrollValue-1)/maxScroll)*displayZoneHeight, 0, displayZoneHeight), 
                    right-1, 
                    top+clamp(((scrollValue+1)/maxScroll)*displayZoneHeight, 0, displayZoneHeight)
                );
    drawBlock(elevator, colors, 1);
}            
    
    
/// 3. Buttons
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

var myColors = colors;
if (hoveredOK){
    myColors = hoveredColors;
}
var confirmBlock = array(mean(left, right)-buttonWidth/2, bottom-buttonZoneHeight, mean(left, right)+buttonWidth/2, bottom);
drawBlock(confirmBlock, myColors);
drawShadowedText(floormean(confirmBlock[0], confirmBlock[2]), floormean(confirmBlock[1], confirmBlock[3]), translate("GENERAL_UI", "ok"));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
